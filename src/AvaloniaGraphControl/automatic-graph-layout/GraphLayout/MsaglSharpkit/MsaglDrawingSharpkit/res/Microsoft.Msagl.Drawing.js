/* Generated by SharpKit 5 v5.5.0 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

function $CombineDelegates(del1,del2)
{
    if(del1 == null)
        return del2;
    if(del2 == null)
        return del1;
    var del=$CreateMulticastDelegateFunction();
    del.delegates = [];
    if(del1.isMulticastDelegate)
    {
        for(var i=0;i < del1.delegates.length;i++)
            del.delegates.push(del1.delegates[i]);
    }
    else
    {
        del.delegates.push(del1);
    }
    if(del2.isMulticastDelegate)
    {
        for(var i=0;i < del2.delegates.length;i++)
            del.delegates.push(del2.delegates[i]);
    }
    else
    {
        del.delegates.push(del2);
    }
    return del;
};

function $CreateMulticastDelegateFunction()
{
    var del2 = null;
    
    var del=function()
    {
        var x=undefined;
        for(var i=0;i < del2.delegates.length;i++)
        {
            var del3=del2.delegates[i];
            x = del3.apply(null,arguments);
        }
        return x;
    };
    del.isMulticastDelegate = true;
    del2 = del;   
    
    return del;
};

function $RemoveDelegate(delOriginal,delToRemove)
{
    if(delToRemove == null || delOriginal == null)
        return delOriginal;
    if(delOriginal.isMulticastDelegate)
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("Multicast to multicast delegate removal is not implemented yet");
        var del=$CreateMulticastDelegateFunction();
        for(var i=0;i < delOriginal.delegates.length;i++)
        {
            var del2=delOriginal.delegates[i];
            if(del2 != delToRemove)
            {
                if(del.delegates == null)
                    del.delegates = [];
                del.delegates.push(del2);
            }
        }
        if(del.delegates == null)
            return null;
        if(del.delegates.length == 1)
            return del.delegates[0];
        return del;
    }
    else
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("single to multicast delegate removal is not supported");
        if(delOriginal == delToRemove)
            return null;
        return delOriginal;
    }
};

if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}

if (typeof(Float64Array) == "undefined")
    var Float64Array = Array;
if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Microsoft$Msagl$Drawing$AttributeBase = {
    fullname: "Microsoft.Msagl.Drawing.AttributeBase",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Microsoft.Msagl.Drawing.AttributeBase.uSCultureInfo = new System.Globalization.CultureInfo.ctor$$String("en-US");
        },
        USCultureInfo$$: "System.Globalization.CultureInfo",
        get_USCultureInfo: function (){
            return Microsoft.Msagl.Drawing.AttributeBase.uSCultureInfo;
        },
        set_USCultureInfo: function (value){
            Microsoft.Msagl.Drawing.AttributeBase.uSCultureInfo = value;
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.color = new Microsoft.Msagl.Drawing.Color.ctor();
            this.id = null;
            this.lineWidth = 1;
            this.styles = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Drawing.Style.ctor);
            this.VisualsChanged = null;
            this._Uri = null;
            System.Object.ctor.call(this);
            this.color = new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte(0, 0, 0);
        },
        Color$$: "Microsoft.Msagl.Drawing.Color",
        get_Color: function (){
            return this.color;
        },
        set_Color: function (value){
            this.color = value;
            this.RaiseVisualsChangedEvent();
        },
        Styles$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Drawing.Style]]",
        get_Styles: function (){
            return this.styles;
        },
        Id$$: "System.String",
        get_Id: function (){
            return this.id;
        },
        set_Id: function (value){
            this.id = value;
        },
        LineWidth$$: "System.Double",
        get_LineWidth: function (){
            return this.lineWidth;
        },
        set_LineWidth: function (value){
            this.lineWidth = value;
            this.RaiseVisualsChangedEvent();
        },
        Uri$$: "System.String",
        get_Uri: function (){
            return this._Uri;
        },
        set_Uri: function (value){
            this._Uri = value;
        },
        add_VisualsChanged: function (value){
            this.VisualsChanged = $CombineDelegates(this.VisualsChanged, value);
        },
        remove_VisualsChanged: function (value){
            this.VisualsChanged = $RemoveDelegate(this.VisualsChanged, value);
        },
        AddStyle: function (style){
            this.styles.Add(style);
            this.RaiseVisualsChangedEvent();
        },
        RaiseVisualsChangedEvent: function (){
            if (this.VisualsChanged != null)
                this.VisualsChanged(this, null);
        },
        RemoveStyle: function (style){
            this.styles.Remove(style);
            this.RaiseVisualsChangedEvent();
        },
        ClearStyles: function (){
            this.styles.Clear();
            this.RaiseVisualsChangedEvent();
        },
        RaiseVisualsChangedEvent$$Object$$EventArgs: function (sender, args){
            if (this.VisualsChanged != null)
                this.VisualsChanged(sender, args);
        },
        IdToString: function (){
            if (System.String.IsNullOrEmpty(this.get_Id()))
                return "";
            return "id=" + Microsoft.Msagl.Drawing.Utils.Quote(this.get_Id());
        },
        StylesToString: function (delimeter){
            var al = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            if (this.lineWidth != -1)
                al.Add("style=\"setlinewidth(" + this.lineWidth + ")\"");
            if (this.styles != null){
                var $it1 = this.styles.GetEnumerator();
                while ($it1.MoveNext()){
                    var style = $it1.get_Current();
                    al.Add("style=" + Microsoft.Msagl.Drawing.Utils.Quote(style.toString()));
                }
            }
            var s = al.ToArray();
            var ret = Microsoft.Msagl.Drawing.Utils.ConcatWithDelimeter(delimeter, s);
            return ret;
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$AttributeBase);
var Microsoft$Msagl$Drawing$Color = {
    fullname: "Microsoft.Msagl.Drawing.Color",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        Xex: function (i){
            var s = System.Convert.ToString$$Int32$$Int32(i, 16);
            if (s.length == 1)
                return "0" + s;
            return s.substr(s.length - 2, 2);
        },
        op_Equality: function (a, b){
            return a.a == b.a && a.r == b.r && a.b == b.b && a.g == b.g;
        },
        op_Inequality: function (a, b){
            return a.a != b.a || a.r != b.r || a.b != b.b || a.g != b.g;
        },
        AliceBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_AliceBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 240, 248, 255);
        },
        AntiqueWhite$$: "Microsoft.Msagl.Drawing.Color",
        get_AntiqueWhite: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 250, 235, 215);
        },
        Aqua$$: "Microsoft.Msagl.Drawing.Color",
        get_Aqua: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 255, 255);
        },
        Aquamarine$$: "Microsoft.Msagl.Drawing.Color",
        get_Aquamarine: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 127, 255, 212);
        },
        Azure$$: "Microsoft.Msagl.Drawing.Color",
        get_Azure: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 240, 255, 255);
        },
        Beige$$: "Microsoft.Msagl.Drawing.Color",
        get_Beige: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 245, 245, 220);
        },
        Bisque$$: "Microsoft.Msagl.Drawing.Color",
        get_Bisque: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 228, 196);
        },
        Black$$: "Microsoft.Msagl.Drawing.Color",
        get_Black: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 0, 0);
        },
        BlanchedAlmond$$: "Microsoft.Msagl.Drawing.Color",
        get_BlanchedAlmond: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 235, 205);
        },
        Blue$$: "Microsoft.Msagl.Drawing.Color",
        get_Blue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 0, 255);
        },
        BlueViolet$$: "Microsoft.Msagl.Drawing.Color",
        get_BlueViolet: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 138, 43, 226);
        },
        Brown$$: "Microsoft.Msagl.Drawing.Color",
        get_Brown: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 165, 42, 42);
        },
        BurlyWood$$: "Microsoft.Msagl.Drawing.Color",
        get_BurlyWood: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 222, 184, 135);
        },
        CadetBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_CadetBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 95, 158, 160);
        },
        Chartreuse$$: "Microsoft.Msagl.Drawing.Color",
        get_Chartreuse: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 127, 255, 0);
        },
        Chocolate$$: "Microsoft.Msagl.Drawing.Color",
        get_Chocolate: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 210, 105, 30);
        },
        Coral$$: "Microsoft.Msagl.Drawing.Color",
        get_Coral: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 127, 80);
        },
        CornflowerBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_CornflowerBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 100, 149, 237);
        },
        Cornsilk$$: "Microsoft.Msagl.Drawing.Color",
        get_Cornsilk: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 248, 220);
        },
        Crimson$$: "Microsoft.Msagl.Drawing.Color",
        get_Crimson: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 220, 20, 60);
        },
        Cyan$$: "Microsoft.Msagl.Drawing.Color",
        get_Cyan: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 255, 255);
        },
        DarkBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 0, 139);
        },
        DarkCyan$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkCyan: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 139, 139);
        },
        DarkGoldenrod$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkGoldenrod: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 184, 134, 11);
        },
        DarkGray$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkGray: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 169, 169, 169);
        },
        DarkGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 100, 0);
        },
        DarkKhaki$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkKhaki: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 189, 183, 107);
        },
        DarkMagenta$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkMagenta: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 139, 0, 139);
        },
        DarkOliveGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkOliveGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 85, 107, 47);
        },
        DarkOrange$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkOrange: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 140, 0);
        },
        DarkOrchid$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkOrchid: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 153, 50, 204);
        },
        DarkRed$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkRed: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 139, 0, 0);
        },
        DarkSalmon$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkSalmon: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 233, 150, 122);
        },
        DarkSeaGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkSeaGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 143, 188, 139);
        },
        DarkSlateBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkSlateBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 72, 61, 139);
        },
        DarkSlateGray$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkSlateGray: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 47, 79, 79);
        },
        DarkTurquoise$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkTurquoise: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 206, 209);
        },
        DarkViolet$$: "Microsoft.Msagl.Drawing.Color",
        get_DarkViolet: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 148, 0, 211);
        },
        DeepPink$$: "Microsoft.Msagl.Drawing.Color",
        get_DeepPink: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 20, 147);
        },
        DeepSkyBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_DeepSkyBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 191, 255);
        },
        DimGray$$: "Microsoft.Msagl.Drawing.Color",
        get_DimGray: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 105, 105, 105);
        },
        DodgerBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_DodgerBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 30, 144, 255);
        },
        Firebrick$$: "Microsoft.Msagl.Drawing.Color",
        get_Firebrick: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 178, 34, 34);
        },
        FloralWhite$$: "Microsoft.Msagl.Drawing.Color",
        get_FloralWhite: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 250, 240);
        },
        ForestGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_ForestGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 34, 139, 34);
        },
        Fuchsia$$: "Microsoft.Msagl.Drawing.Color",
        get_Fuchsia: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 0, 255);
        },
        Gainsboro$$: "Microsoft.Msagl.Drawing.Color",
        get_Gainsboro: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 220, 220, 220);
        },
        GhostWhite$$: "Microsoft.Msagl.Drawing.Color",
        get_GhostWhite: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 248, 248, 255);
        },
        Gold$$: "Microsoft.Msagl.Drawing.Color",
        get_Gold: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 215, 0);
        },
        Goldenrod$$: "Microsoft.Msagl.Drawing.Color",
        get_Goldenrod: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 218, 165, 32);
        },
        Gray$$: "Microsoft.Msagl.Drawing.Color",
        get_Gray: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 128, 128, 128);
        },
        Green$$: "Microsoft.Msagl.Drawing.Color",
        get_Green: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 128, 0);
        },
        GreenYellow$$: "Microsoft.Msagl.Drawing.Color",
        get_GreenYellow: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 173, 255, 47);
        },
        Honeydew$$: "Microsoft.Msagl.Drawing.Color",
        get_Honeydew: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 240, 255, 240);
        },
        HotPink$$: "Microsoft.Msagl.Drawing.Color",
        get_HotPink: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 105, 180);
        },
        IndianRed$$: "Microsoft.Msagl.Drawing.Color",
        get_IndianRed: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 205, 92, 92);
        },
        Indigo$$: "Microsoft.Msagl.Drawing.Color",
        get_Indigo: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 75, 0, 130);
        },
        Ivory$$: "Microsoft.Msagl.Drawing.Color",
        get_Ivory: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 255, 240);
        },
        Khaki$$: "Microsoft.Msagl.Drawing.Color",
        get_Khaki: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 240, 230, 140);
        },
        Lavender$$: "Microsoft.Msagl.Drawing.Color",
        get_Lavender: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 230, 230, 250);
        },
        LavenderBlush$$: "Microsoft.Msagl.Drawing.Color",
        get_LavenderBlush: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 240, 245);
        },
        LawnGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_LawnGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 124, 252, 0);
        },
        LemonChiffon$$: "Microsoft.Msagl.Drawing.Color",
        get_LemonChiffon: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 250, 205);
        },
        LightBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_LightBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 173, 216, 230);
        },
        LightCoral$$: "Microsoft.Msagl.Drawing.Color",
        get_LightCoral: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 240, 128, 128);
        },
        LightCyan$$: "Microsoft.Msagl.Drawing.Color",
        get_LightCyan: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 224, 255, 255);
        },
        LightGoldenrodYellow$$: "Microsoft.Msagl.Drawing.Color",
        get_LightGoldenrodYellow: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 250, 250, 210);
        },
        LightGray$$: "Microsoft.Msagl.Drawing.Color",
        get_LightGray: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 211, 211, 211);
        },
        LightGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_LightGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 144, 238, 144);
        },
        LightPink$$: "Microsoft.Msagl.Drawing.Color",
        get_LightPink: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 182, 193);
        },
        LightSalmon$$: "Microsoft.Msagl.Drawing.Color",
        get_LightSalmon: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 160, 122);
        },
        LightSeaGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_LightSeaGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 32, 178, 170);
        },
        LightSkyBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_LightSkyBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 135, 206, 250);
        },
        LightSlateGray$$: "Microsoft.Msagl.Drawing.Color",
        get_LightSlateGray: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 119, 136, 153);
        },
        LightSteelBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_LightSteelBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 176, 196, 222);
        },
        LightYellow$$: "Microsoft.Msagl.Drawing.Color",
        get_LightYellow: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 255, 224);
        },
        Lime$$: "Microsoft.Msagl.Drawing.Color",
        get_Lime: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 255, 0);
        },
        LimeGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_LimeGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 50, 205, 50);
        },
        Linen$$: "Microsoft.Msagl.Drawing.Color",
        get_Linen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 250, 240, 230);
        },
        Magenta$$: "Microsoft.Msagl.Drawing.Color",
        get_Magenta: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 0, 255);
        },
        Maroon$$: "Microsoft.Msagl.Drawing.Color",
        get_Maroon: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 128, 0, 0);
        },
        MediumAquamarine$$: "Microsoft.Msagl.Drawing.Color",
        get_MediumAquamarine: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 102, 205, 170);
        },
        MediumBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_MediumBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 0, 205);
        },
        MediumOrchid$$: "Microsoft.Msagl.Drawing.Color",
        get_MediumOrchid: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 186, 85, 211);
        },
        MediumPurple$$: "Microsoft.Msagl.Drawing.Color",
        get_MediumPurple: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 147, 112, 219);
        },
        MediumSeaGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_MediumSeaGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 60, 179, 113);
        },
        MediumSlateBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_MediumSlateBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 123, 104, 238);
        },
        MediumSpringGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_MediumSpringGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 250, 154);
        },
        MediumTurquoise$$: "Microsoft.Msagl.Drawing.Color",
        get_MediumTurquoise: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 72, 209, 204);
        },
        MediumVioletRed$$: "Microsoft.Msagl.Drawing.Color",
        get_MediumVioletRed: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 199, 21, 133);
        },
        MidnightBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_MidnightBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 25, 25, 112);
        },
        MintCream$$: "Microsoft.Msagl.Drawing.Color",
        get_MintCream: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 245, 255, 250);
        },
        MistyRose$$: "Microsoft.Msagl.Drawing.Color",
        get_MistyRose: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 228, 225);
        },
        Moccasin$$: "Microsoft.Msagl.Drawing.Color",
        get_Moccasin: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 228, 181);
        },
        NavajoWhite$$: "Microsoft.Msagl.Drawing.Color",
        get_NavajoWhite: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 222, 173);
        },
        Navy$$: "Microsoft.Msagl.Drawing.Color",
        get_Navy: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 0, 128);
        },
        OldLace$$: "Microsoft.Msagl.Drawing.Color",
        get_OldLace: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 253, 245, 230);
        },
        Olive$$: "Microsoft.Msagl.Drawing.Color",
        get_Olive: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 128, 128, 0);
        },
        OliveDrab$$: "Microsoft.Msagl.Drawing.Color",
        get_OliveDrab: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 107, 142, 35);
        },
        Orange$$: "Microsoft.Msagl.Drawing.Color",
        get_Orange: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 165, 0);
        },
        OrangeRed$$: "Microsoft.Msagl.Drawing.Color",
        get_OrangeRed: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 69, 0);
        },
        Orchid$$: "Microsoft.Msagl.Drawing.Color",
        get_Orchid: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 218, 112, 214);
        },
        PaleGoldenrod$$: "Microsoft.Msagl.Drawing.Color",
        get_PaleGoldenrod: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 238, 232, 170);
        },
        PaleGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_PaleGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 152, 251, 152);
        },
        PaleTurquoise$$: "Microsoft.Msagl.Drawing.Color",
        get_PaleTurquoise: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 175, 238, 238);
        },
        PaleVioletRed$$: "Microsoft.Msagl.Drawing.Color",
        get_PaleVioletRed: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 219, 112, 147);
        },
        PapayaWhip$$: "Microsoft.Msagl.Drawing.Color",
        get_PapayaWhip: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 239, 213);
        },
        PeachPuff$$: "Microsoft.Msagl.Drawing.Color",
        get_PeachPuff: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 218, 185);
        },
        Peru$$: "Microsoft.Msagl.Drawing.Color",
        get_Peru: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 205, 133, 63);
        },
        Pink$$: "Microsoft.Msagl.Drawing.Color",
        get_Pink: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 192, 203);
        },
        Plum$$: "Microsoft.Msagl.Drawing.Color",
        get_Plum: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 221, 160, 221);
        },
        PowderBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_PowderBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 176, 224, 230);
        },
        Purple$$: "Microsoft.Msagl.Drawing.Color",
        get_Purple: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 128, 0, 128);
        },
        Red$$: "Microsoft.Msagl.Drawing.Color",
        get_Red: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 0, 0);
        },
        RosyBrown$$: "Microsoft.Msagl.Drawing.Color",
        get_RosyBrown: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 188, 143, 143);
        },
        RoyalBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_RoyalBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 65, 105, 225);
        },
        SaddleBrown$$: "Microsoft.Msagl.Drawing.Color",
        get_SaddleBrown: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 139, 69, 19);
        },
        Salmon$$: "Microsoft.Msagl.Drawing.Color",
        get_Salmon: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 250, 128, 114);
        },
        SandyBrown$$: "Microsoft.Msagl.Drawing.Color",
        get_SandyBrown: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 244, 164, 96);
        },
        SeaGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_SeaGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 46, 139, 87);
        },
        SeaShell$$: "Microsoft.Msagl.Drawing.Color",
        get_SeaShell: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 245, 238);
        },
        Sienna$$: "Microsoft.Msagl.Drawing.Color",
        get_Sienna: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 160, 82, 45);
        },
        Silver$$: "Microsoft.Msagl.Drawing.Color",
        get_Silver: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 192, 192, 192);
        },
        SkyBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_SkyBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 135, 206, 235);
        },
        SlateBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_SlateBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 106, 90, 205);
        },
        SlateGray$$: "Microsoft.Msagl.Drawing.Color",
        get_SlateGray: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 112, 128, 144);
        },
        Snow$$: "Microsoft.Msagl.Drawing.Color",
        get_Snow: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 250, 250);
        },
        SpringGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_SpringGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 255, 127);
        },
        SteelBlue$$: "Microsoft.Msagl.Drawing.Color",
        get_SteelBlue: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 70, 130, 180);
        },
        Tan$$: "Microsoft.Msagl.Drawing.Color",
        get_Tan: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 210, 180, 140);
        },
        Teal$$: "Microsoft.Msagl.Drawing.Color",
        get_Teal: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 0, 128, 128);
        },
        Thistle$$: "Microsoft.Msagl.Drawing.Color",
        get_Thistle: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 216, 191, 216);
        },
        Tomato$$: "Microsoft.Msagl.Drawing.Color",
        get_Tomato: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 99, 71);
        },
        Transparent$$: "Microsoft.Msagl.Drawing.Color",
        get_Transparent: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(0, 255, 255, 255);
        },
        Turquoise$$: "Microsoft.Msagl.Drawing.Color",
        get_Turquoise: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 64, 224, 208);
        },
        Violet$$: "Microsoft.Msagl.Drawing.Color",
        get_Violet: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 238, 130, 238);
        },
        Wheat$$: "Microsoft.Msagl.Drawing.Color",
        get_Wheat: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 245, 222, 179);
        },
        White$$: "Microsoft.Msagl.Drawing.Color",
        get_White: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 255, 255);
        },
        WhiteSmoke$$: "Microsoft.Msagl.Drawing.Color",
        get_WhiteSmoke: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 245, 245, 245);
        },
        Yellow$$: "Microsoft.Msagl.Drawing.Color",
        get_Yellow: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 255, 255, 0);
        },
        YellowGreen$$: "Microsoft.Msagl.Drawing.Color",
        get_YellowGreen: function (){
            return new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(255, 154, 205, 50);
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Struct",
    definition: {
        ctor$$Byte$$Byte$$Byte$$Byte: function (a, r, g, b){
            this.a = 0;
            this.r = 0;
            this.g = 0;
            this.b = 0;
            System.ValueType.ctor.call(this);
            this.a = a;
            this.r = r;
            this.g = g;
            this.b = b;
        },
        ctor$$Byte$$Byte$$Byte: function (r, g, b){
            this.a = 0;
            this.r = 0;
            this.g = 0;
            this.b = 0;
            System.ValueType.ctor.call(this);
            this.a = 255;
            this.r = r;
            this.g = g;
            this.b = b;
        },
        A$$: "System.Byte",
        get_A: function (){
            return this.a;
        },
        set_A: function (value){
            this.a = value;
        },
        R$$: "System.Byte",
        get_R: function (){
            return this.r;
        },
        set_R: function (value){
            this.r = value;
        },
        G$$: "System.Byte",
        get_G: function (){
            return this.g;
        },
        set_G: function (value){
            this.g = value;
        },
        B$$: "System.Byte",
        get_B: function (){
            return this.b;
        },
        set_B: function (value){
            this.b = value;
        },
        toString: function (){
            return "\"#" + Microsoft.Msagl.Drawing.Color.Xex(this.get_R()) + Microsoft.Msagl.Drawing.Color.Xex(this.get_G()) + Microsoft.Msagl.Drawing.Color.Xex(this.get_B()) + (this.get_A() == 255 ? "" : Microsoft.Msagl.Drawing.Color.Xex(this.get_A())) + "\"";
        },
        ctor: function (){
            this.a = 0;
            this.r = 0;
            this.g = 0;
            this.b = 0;
            System.ValueType.ctor.call(this);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$Color);
var Microsoft$Msagl$Drawing$ConnectionToGraph = {
    fullname: "Microsoft.Msagl.Drawing.ConnectionToGraph",
    staticDefinition: {
        Connected: 0,
        Disconnected: 1
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$ConnectionToGraph);
var Microsoft$Msagl$Drawing$Utils = {
    fullname: "Microsoft.Msagl.Drawing.Utils",
    baseTypeName: "System.Object",
    staticDefinition: {
        ContainsStyle: function (style, styles){
            var $it2 = styles.GetEnumerator();
            while ($it2.MoveNext()){
                var s = $it2.get_Current();
                if (s == style)
                    return true;
            }
            return false;
        },
        ShapeToString: function (attr, shape){
            return attr + shape.toString().toLowerCase();
        },
        Quote: function (s){
            return "\"" + s + "\"";
        },
        ColorToString: function (attr, c){
            if (c == "None")
                return "";
            else
                return attr + c;
        },
        ConcatWithComma: function (s){
            return Microsoft.Msagl.Drawing.Utils.ConcatWithDelimeter(",", s);
        },
        ConcatWithDelimeter: function (delimeter, s){
            var ns = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            for (var $i4 = 0,$l4 = s.length,str = s[$i4]; $i4 < $l4; $i4++, str = s[$i4]){
                if (!System.String.IsNullOrEmpty(str))
                    ns.Add(str);
            }
            if (ns.get_Count() == 0)
                return "";
            if (ns.get_Count() == 1)
                return ns.get_Item$$Int32(0);
            var ret = ns.get_Item$$Int32(0);
            for (var i = 1; i < ns.get_Count(); i++)
                ret += delimeter + ns.get_Item$$Int32(i);
            return ret;
        },
        ConcatWithLineEnd: function (s){
            return Microsoft.Msagl.Drawing.Utils.ConcatWithDelimeter("\r\n", s);
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$Utils);
var Microsoft$Msagl$Drawing$Style = {
    fullname: "Microsoft.Msagl.Drawing.Style",
    staticDefinition: {
        None: 0,
        Dashed: 1,
        Solid: 2,
        Invis: 3,
        Bold: 4,
        Filled: 5,
        Diagonals: 6,
        Dotted: 7,
        Rounded: 8
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$Style);
var Microsoft$Msagl$Drawing$ArrowStyle = {
    fullname: "Microsoft.Msagl.Drawing.ArrowStyle",
    staticDefinition: {
        NonSpecified: 0,
        None: 1,
        Normal: 2,
        Tee: 3,
        Diamond: 4,
        ODiamond: 5,
        Generalization: 6
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$ArrowStyle);
var Microsoft$Msagl$Drawing$EdgeDirection = {
    fullname: "Microsoft.Msagl.Drawing.EdgeDirection",
    staticDefinition: {
        NonSpecified: 0,
        Forward: 1,
        Back: 2,
        Both: 3,
        None: 4
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$EdgeDirection);
var Microsoft$Msagl$Drawing$Orientation = {
    fullname: "Microsoft.Msagl.Drawing.Orientation",
    staticDefinition: {
        Portrait: 0,
        Landscape: 1
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$Orientation);
var Microsoft$Msagl$Drawing$Layer = {
    fullname: "Microsoft.Msagl.Drawing.Layer",
    staticDefinition: {
        Undefined: 0,
        Same: 1,
        Min: 2,
        Max: 3,
        Source: 4,
        Sink: 5
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$Layer);
var Microsoft$Msagl$Drawing$Ratio = {
    fullname: "Microsoft.Msagl.Drawing.Ratio",
    staticDefinition: {
        Fill: 0,
        Auto: 1,
        Compress: 2,
        Expand: 3
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$Ratio);
var Microsoft$Msagl$Drawing$LabelJustification = {
    fullname: "Microsoft.Msagl.Drawing.LabelJustification",
    staticDefinition: {
        Left: 0,
        Right: 1
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$LabelJustification);
var Microsoft$Msagl$Drawing$LabelLocation = {
    fullname: "Microsoft.Msagl.Drawing.LabelLocation",
    staticDefinition: {
        Top: 0,
        Bottom: 1
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$LabelLocation);
var Microsoft$Msagl$Drawing$DrawingObject = {
    fullname: "Microsoft.Msagl.Drawing.DrawingObject",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.userData = null;
            this.isVisible = true;
            this.IsVisibleChanged = null;
            this._GeometryObject = null;
            System.Object.ctor.call(this);
        },
        add_IsVisibleChanged: function (value){
            this.IsVisibleChanged = $CombineDelegates(this.IsVisibleChanged, value);
        },
        remove_IsVisibleChanged: function (value){
            this.IsVisibleChanged = $RemoveDelegate(this.IsVisibleChanged, value);
        },
        UserData$$: "System.Object",
        get_UserData: function (){
            return this.userData;
        },
        set_UserData: function (value){
            this.userData = value;
        },
        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",
        GeometryObject$$: "Microsoft.Msagl.Core.Layout.GeometryObject",
        get_GeometryObject: function (){
            return this._GeometryObject;
        },
        set_GeometryObject: function (value){
            this._GeometryObject = value;
        },
        IsVisible$$: "System.Boolean",
        get_IsVisible: function (){
            return this.isVisible;
        },
        set_IsVisible: function (value){
            var was = this.isVisible;
            this.isVisible = value;
            if (was != this.isVisible && this.IsVisibleChanged != null)
                this.IsVisibleChanged(this);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$DrawingObject);
var Microsoft$Msagl$Drawing$DelegateToOverrideEdgeRendering = {
    fullname: "Microsoft.Msagl.Drawing.DelegateToOverrideEdgeRendering",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$DelegateToOverrideEdgeRendering);
var Microsoft$Msagl$Drawing$Edge = {
    fullname: "Microsoft.Msagl.Drawing.Edge",
    baseTypeName: "Microsoft.Msagl.Drawing.DrawingObject",
    assemblyName: "Microsoft.Msagl.Drawing",
    interfaceNames: ["Microsoft.Msagl.Drawing.ILabeledObject"],
    Kind: "Class",
    definition: {
        ctor$$String$$String$$String: function (source, labelText, target){
            this.geometryEdge = null;
            this.drawEdgeDelegate = null;
            this.sourcePort = null;
            this.targetPort = null;
            this.label = null;
            this.attr = null;
            this.source = null;
            this.target = null;
            this.sourceNode = null;
            this.targetNode = null;
            Microsoft.Msagl.Drawing.DrawingObject.ctor.call(this);
            if (System.String.IsNullOrEmpty(source) || System.String.IsNullOrEmpty(target))
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Creating an edge with null or empty source or target IDs"), new Error());
            this.source = source;
            this.target = target;
            this.attr = new Microsoft.Msagl.Drawing.EdgeAttr.ctor();
            if (!System.String.IsNullOrEmpty(labelText)){
                this.set_Label((function (){
                    var $v1 = new Microsoft.Msagl.Drawing.Label.ctor$$String(labelText);
                    $v1.set_Owner(this);
                    return $v1;
                }).call(this));
            }
        },
        GeometryEdge$$: "Microsoft.Msagl.Core.Layout.Edge",
        get_GeometryEdge: function (){
            return this.geometryEdge;
        },
        set_GeometryEdge: function (value){
            this.geometryEdge = value;
        },
        DrawEdgeDelegate$$: "Microsoft.Msagl.Drawing.DelegateToOverrideEdgeRendering",
        get_DrawEdgeDelegate: function (){
            return this.drawEdgeDelegate;
        },
        set_DrawEdgeDelegate: function (value){
            this.drawEdgeDelegate = value;
        },
        SourcePort$$: "Microsoft.Msagl.Core.Layout.Port",
        get_SourcePort: function (){
            return this.sourcePort;
        },
        set_SourcePort: function (value){
            this.sourcePort = value;
        },
        TargetPort$$: "Microsoft.Msagl.Core.Layout.Port",
        get_TargetPort: function (){
            return this.targetPort;
        },
        set_TargetPort: function (value){
            this.targetPort = value;
        },
        Label$$: "Microsoft.Msagl.Drawing.Label",
        get_Label: function (){
            return this.label;
        },
        set_Label: function (value){
            this.label = value;
        },
        LabelText$$: "System.String",
        get_LabelText: function (){
            return this.get_Label() == null ? "" : this.get_Label().get_Text();
        },
        set_LabelText: function (value){
            if (this.get_Label() == null)
                this.set_Label((function (){
                    var $v2 = new Microsoft.Msagl.Drawing.Label.ctor();
                    $v2.set_Owner(this);
                    return $v2;
                }).call(this));
            this.get_Label().set_Text(value);
        },
        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",
        get_BoundingBox: function (){
            if (this.get_GeometryEdge() == null)
                return new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Double$$Double$$Double$$Double(0, 0, -1, -1);
            var bb = this.get_EdgeCurve().get_BoundingBox();
            if (this.get_Label() != null)
                bb.Add$$Rectangle(this.get_Label().get_BoundingBox());
            if (this.attr.get_ArrowAtTarget())
                bb.Add$$Point(this.get_ArrowAtTargetPosition());
            if (this.attr.get_ArrowAtSource())
                bb.Add$$Point(this.get_ArrowAtSourcePosition());
            return bb;
        },
        Attr$$: "Microsoft.Msagl.Drawing.EdgeAttr",
        get_Attr: function (){
            return this.attr;
        },
        set_Attr: function (value){
            this.attr = value;
        },
        ctor$$Node$$Node$$ConnectionToGraph: function (sourceNode, targetNode, connection){
            this.geometryEdge = null;
            this.drawEdgeDelegate = null;
            this.sourcePort = null;
            this.targetPort = null;
            this.label = null;
            this.attr = null;
            this.source = null;
            this.target = null;
            this.sourceNode = null;
            this.targetNode = null;
            Microsoft.Msagl.Drawing.Edge.ctor$$String$$String$$String.call(this, sourceNode.get_Id(), null, targetNode.get_Id());
            this.set_SourceNode(sourceNode);
            this.set_TargetNode(targetNode);
            if (connection == Microsoft.Msagl.Drawing.ConnectionToGraph.Connected){
                if (sourceNode == targetNode)
                    sourceNode.AddSelfEdge(this);
                else {
                    sourceNode.AddOutEdge(this);
                    targetNode.AddInEdge(this);
                }
            }
        },
        toString: function (){
            return Microsoft.Msagl.Drawing.Utils.Quote(this.source) + " -> " + Microsoft.Msagl.Drawing.Utils.Quote(this.target) + (this.get_Label() == null ? "" : "[" + this.get_Label().get_Text() + "]");
        },
        ToDotGeometry: function (){
            return Microsoft.Msagl.Drawing.Utils.Quote(this.source) + " -> " + Microsoft.Msagl.Drawing.Utils.Quote(this.target) + "[" + Microsoft.Msagl.Drawing.Utils.ConcatWithComma((this.get_Label() == null ? "" : this.get_Label().get_Text()), this.DotGeomString(this.geometryEdge), this.attr.ToStringWithText("")) + "]";
        },
        DotGeomString: function (geometryEdge){
            var edgeGeom = geometryEdge.get_EdgeGeometry();
            if (edgeGeom == null)
                return "";
            var b = As(edgeGeom.get_Curve(), Microsoft.Msagl.Core.Geometry.Curves.CubicBezierSegment.ctor);
            if (b == null)
                return "";
            var ret = "";
            if (edgeGeom.get_SourceArrowhead() != null){
                ret += System.String.Format$$String$$Object$$Object("s,{0},{1} ", edgeGeom.get_SourceArrowhead().get_TipPosition().get_X(), edgeGeom.get_SourceArrowhead().get_TipPosition().get_Y());
            }
            if (edgeGeom.get_TargetArrowhead() != null){
                ret += System.String.Format$$String$$Object$$Object("e,{0},{1} ", edgeGeom.get_TargetArrowhead().get_TipPosition().get_X(), edgeGeom.get_TargetArrowhead().get_TipPosition().get_Y());
            }
            for (var i = 0; i < 4; i++)
                ret += System.String.Format$$String$$Object$$Object("{0},{1} ", b.B(i).get_X(), b.B(i).get_Y());
            return "pos=" + Microsoft.Msagl.Drawing.Utils.Quote(ret);
        },
        Source$$: "System.String",
        get_Source: function (){
            return this.source;
        },
        Target$$: "System.String",
        get_Target: function (){
            return this.target;
        },
        SourceNode$$: "Microsoft.Msagl.Drawing.Node",
        get_SourceNode: function (){
            return this.sourceNode;
        },
        set_SourceNode: function (value){
            this.sourceNode = value;
        },
        TargetNode$$: "Microsoft.Msagl.Drawing.Node",
        get_TargetNode: function (){
            return this.targetNode;
        },
        set_TargetNode: function (value){
            this.targetNode = value;
        },
        GeometryObject$$: "Microsoft.Msagl.Core.Layout.GeometryObject",
        get_GeometryObject: function (){
            return this.get_GeometryEdge();
        },
        set_GeometryObject: function (value){
            this.set_GeometryEdge(Cast(value, Microsoft.Msagl.Core.Layout.Edge.ctor));
        },
        EdgeCurve$$: "Microsoft.Msagl.Core.Geometry.Curves.ICurve",
        get_EdgeCurve: function (){
            if (this.get_GeometryEdge() == null)
                return null;
            return this.get_GeometryEdge().get_Curve();
        },
        set_EdgeCurve: function (value){
            this.get_GeometryEdge().set_Curve(value);
        },
        ArrowAtTargetPosition$$: "Microsoft.Msagl.Core.Geometry.Point",
        get_ArrowAtTargetPosition: function (){
            if (this.get_GeometryEdge() == null || this.get_GeometryEdge().get_EdgeGeometry().get_TargetArrowhead() == null)
                return new Microsoft.Msagl.Core.Geometry.Point.ctor();
            return this.get_GeometryEdge().get_EdgeGeometry().get_TargetArrowhead().get_TipPosition();
        },
        set_ArrowAtTargetPosition: function (value){
            if (this.get_GeometryEdge().get_EdgeGeometry() != null){
                if (this.get_GeometryEdge().get_EdgeGeometry().get_TargetArrowhead() == null){
                    this.get_GeometryEdge().get_EdgeGeometry().set_TargetArrowhead(new Microsoft.Msagl.Core.Layout.Arrowhead.ctor());
                }
                this.get_GeometryEdge().get_EdgeGeometry().get_TargetArrowhead().set_TipPosition(value);
            }
        },
        ArrowAtSourcePosition$$: "Microsoft.Msagl.Core.Geometry.Point",
        get_ArrowAtSourcePosition: function (){
            if (this.get_GeometryEdge() == null || this.get_GeometryEdge().get_EdgeGeometry().get_SourceArrowhead() == null)
                return new Microsoft.Msagl.Core.Geometry.Point.ctor();
            return this.get_GeometryEdge().get_EdgeGeometry().get_SourceArrowhead().get_TipPosition();
        },
        set_ArrowAtSourcePosition: function (value){
            if (this.get_GeometryEdge().get_EdgeGeometry() != null){
                if (this.get_GeometryEdge().get_EdgeGeometry().get_SourceArrowhead() == null){
                    this.get_GeometryEdge().get_EdgeGeometry().set_SourceArrowhead(new Microsoft.Msagl.Core.Layout.Arrowhead.ctor());
                }
                this.get_GeometryEdge().get_EdgeGeometry().get_SourceArrowhead().set_TipPosition(value);
            }
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$Edge);
var Microsoft$Msagl$Drawing$EdgeAttr = {
    fullname: "Microsoft.Msagl.Drawing.EdgeAttr",
    baseTypeName: "Microsoft.Msagl.Drawing.AttributeBase",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.separation = 1;
            this.weight = 1;
            this.arrowheadAtSource = Microsoft.Msagl.Drawing.ArrowStyle.NonSpecified;
            this.arrowheadAtTarget = Microsoft.Msagl.Drawing.ArrowStyle.NonSpecified;
            this.arrowheadLength = 10;
            this.length = 1;
            Microsoft.Msagl.Drawing.AttributeBase.ctor.call(this);
            this.set_Color(new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte(0, 0, 0));
        },
        Separation$$: "System.Int32",
        get_Separation: function (){
            return this.separation;
        },
        set_Separation: function (value){
            this.separation = value;
        },
        Weight$$: "System.Int32",
        get_Weight: function (){
            return this.weight;
        },
        set_Weight: function (value){
            this.weight = value;
        },
        Clone: function (){
            return As(this.MemberwiseClone(), Microsoft.Msagl.Drawing.EdgeAttr.ctor);
        },
        ArrowheadAtSource$$: "Microsoft.Msagl.Drawing.ArrowStyle",
        get_ArrowheadAtSource: function (){
            return this.arrowheadAtSource;
        },
        set_ArrowheadAtSource: function (value){
            this.arrowheadAtSource = value;
            this.RaiseVisualsChangedEvent$$Object$$EventArgs(this, null);
        },
        ArrowheadAtTarget$$: "Microsoft.Msagl.Drawing.ArrowStyle",
        get_ArrowheadAtTarget: function (){
            return this.arrowheadAtTarget;
        },
        set_ArrowheadAtTarget: function (value){
            this.arrowheadAtTarget = value;
            this.RaiseVisualsChangedEvent$$Object$$EventArgs(this, null);
        },
        ArrowheadLength$$: "System.Double",
        get_ArrowheadLength: function (){
            return this.arrowheadLength;
        },
        set_ArrowheadLength: function (value){
            this.arrowheadLength = value;
            this.RaiseVisualsChangedEvent$$Object$$EventArgs(this, null);
        },
        ToStringWithText: function (text){
            var ret = "";
            if (!System.String.IsNullOrEmpty(text)){
                text = text.Replace$$String$$String("\r\n", "\\n");
                ret += "label=" + Microsoft.Msagl.Drawing.Utils.Quote(text);
            }
            if (this.arrowheadAtSource != Microsoft.Msagl.Drawing.ArrowStyle.NonSpecified)
                ret = Microsoft.Msagl.Drawing.Utils.ConcatWithComma(ret, "arrowhead=" + this.arrowheadAtSource.toString().toLowerCase());
            ret = Microsoft.Msagl.Drawing.Utils.ConcatWithComma(ret, Microsoft.Msagl.Drawing.Utils.ColorToString("color=", this.get_Color().toString()), this.StylesToString(","), this.IdToString());
            return ret;
        },
        ArrowAtTarget$$: "System.Boolean",
        get_ArrowAtTarget: function (){
            return this.get_ArrowheadAtTarget() != Microsoft.Msagl.Drawing.ArrowStyle.None;
        },
        ArrowAtSource$$: "System.Boolean",
        get_ArrowAtSource: function (){
            return !(this.get_ArrowheadAtSource() == Microsoft.Msagl.Drawing.ArrowStyle.NonSpecified || this.get_ArrowheadAtSource() == Microsoft.Msagl.Drawing.ArrowStyle.None);
        },
        Length$$: "System.Double",
        get_Length: function (){
            return this.length;
        },
        set_Length: function (value){
            this.length = value;
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$EdgeAttr);
var Microsoft$Msagl$Drawing$LayerDirection = {
    fullname: "Microsoft.Msagl.Drawing.LayerDirection",
    staticDefinition: {
        TB: 0,
        LR: 1,
        BT: 2,
        RL: 3,
        None: 4
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$LayerDirection);
var Microsoft$Msagl$Drawing$Shape = {
    fullname: "Microsoft.Msagl.Drawing.Shape",
    staticDefinition: {
        Diamond: 0,
        Ellipse: 1,
        Box: 2,
        Circle: 3,
        Record: 4,
        Plaintext: 5,
        Point: 6,
        Mdiamond: 7,
        Msquare: 8,
        Polygon: 9,
        DoubleCircle: 10,
        House: 11,
        InvHouse: 12,
        Parallelogram: 13,
        Octagon: 14,
        TripleOctagon: 15,
        Triangle: 16,
        Trapezium: 17,
        DrawFromGeometry: 18,
        TestShape: 19,
        Hexagon: 20
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$Shape);
var Microsoft$Msagl$Drawing$FontStyle = {
    fullname: "Microsoft.Msagl.Drawing.FontStyle",
    staticDefinition: {
        Regular: 0,
        Bold: 1,
        Italic: 2,
        Underline: 4,
        Strikeout: 8
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$FontStyle);
var Microsoft$Msagl$Drawing$GeometryGraphCreator = {
    fullname: "Microsoft.Msagl.Drawing.GeometryGraphCreator",
    baseTypeName: "System.Object",
    staticDefinition: {
        CreateGeometryEdgeAndAddItToGeometryGraph: function (drawingEdge, msaglGraph){
            var msaglEdge = Microsoft.Msagl.Drawing.GeometryGraphCreator.CreateGeometryEdgeFromDrawingEdge(drawingEdge);
            msaglGraph.get_Edges().Add(msaglEdge);
            return msaglEdge;
        },
        CreateGeometryEdgeFromDrawingEdge: function (drawingEdge){
            var sourceNode = drawingEdge.get_SourceNode().get_GeometryNode();
            var targetNode = drawingEdge.get_TargetNode().get_GeometryNode();
            var msaglEdge = new Microsoft.Msagl.Core.Layout.Edge.ctor$$Node$$Node(sourceNode, targetNode);
            drawingEdge.set_GeometryEdge(msaglEdge);
            msaglEdge.set_SourcePort(drawingEdge.get_SourcePort());
            msaglEdge.set_TargetPort(drawingEdge.get_TargetPort());
            if (drawingEdge.get_Label() != null){
                msaglEdge.set_Label(drawingEdge.get_Label().get_GeometryLabel());
                msaglEdge.get_Label().set_GeometryParent(msaglEdge);
            }
            msaglEdge.set_Weight(drawingEdge.get_Attr().get_Weight());
            msaglEdge.set_Length(drawingEdge.get_Attr().get_Length());
            msaglEdge.set_Separation(drawingEdge.get_Attr().get_Separation());
            if (drawingEdge.get_Attr().get_ArrowAtSource()){
                msaglEdge.get_EdgeGeometry().set_SourceArrowhead((function (){
                    var $v3 = new Microsoft.Msagl.Core.Layout.Arrowhead.ctor();
                    $v3.set_Length(drawingEdge.get_Attr().get_ArrowheadLength());
                    return $v3;
                })());
            }
            if (drawingEdge.get_Attr().get_ArrowAtTarget()){
                msaglEdge.get_EdgeGeometry().set_TargetArrowhead((function (){
                    var $v4 = new Microsoft.Msagl.Core.Layout.Arrowhead.ctor();
                    $v4.set_Length(drawingEdge.get_Attr().get_ArrowheadLength());
                    return $v4;
                })());
            }
            msaglEdge.set_UserData(drawingEdge);
            msaglEdge.set_LineWidth(drawingEdge.get_Attr().get_LineWidth());
            return msaglEdge;
        },
        ProcessGraphAttrs: function (graph, msaglGraph, settings){
            msaglGraph.set_Margins(graph.get_Attr().get_Margin());
            var ss = As(settings, Microsoft.Msagl.Layout.Layered.SugiyamaLayoutSettings.ctor);
            if (ss != null){
                switch (graph.get_Attr().get_LayerDirection()){
                    case Microsoft.Msagl.Drawing.LayerDirection.None:
                    case Microsoft.Msagl.Drawing.LayerDirection.TB:
                        break;
                    case Microsoft.Msagl.Drawing.LayerDirection.LR:
                        ss.set_Transformation(Microsoft.Msagl.Core.Geometry.Curves.PlaneTransformation.Rotation(1.5707963267949));
                        break;
                    case Microsoft.Msagl.Drawing.LayerDirection.RL:
                        ss.set_Transformation(Microsoft.Msagl.Core.Geometry.Curves.PlaneTransformation.Rotation(-1.5707963267949));
                        break;
                    case Microsoft.Msagl.Drawing.LayerDirection.BT:
                        ss.set_Transformation(Microsoft.Msagl.Core.Geometry.Curves.PlaneTransformation.Rotation(3.14159265358979));
                        break;
                    default:
                        throw $CreateException(new System.InvalidOperationException.ctor(), new Error());
                }
                Microsoft.Msagl.Drawing.GeometryGraphCreator.TransferConstraints(ss, graph);
            }
        },
        TransferConstraints: function (sugiyamaLayoutSettings, graph){
            Microsoft.Msagl.Drawing.GeometryGraphCreator.TransferHorizontalConstraints(graph.get_LayerConstraints().get_HorizontalConstraints(), sugiyamaLayoutSettings);
            Microsoft.Msagl.Drawing.GeometryGraphCreator.TransferVerticalConstraints(graph.get_LayerConstraints().get_VerticalConstraints(), sugiyamaLayoutSettings);
        },
        TransferVerticalConstraints: function (verticalConstraints, sugiyamaLayoutSettings){
            var $it11 = verticalConstraints._minLayerOfDrawingGraph.GetEnumerator();
            while ($it11.MoveNext()){
                var node = $it11.get_Current();
                Microsoft.Msagl.Drawing.GeometryGraphCreator.CheckGeomNode(node);
                sugiyamaLayoutSettings.PinNodesToMinLayer(node.get_GeometryNode());
            }
            var $it12 = verticalConstraints._maxLayerOfDrawingGraph.GetEnumerator();
            while ($it12.MoveNext()){
                var node = $it12.get_Current();
                Microsoft.Msagl.Drawing.GeometryGraphCreator.CheckGeomNode(node);
                sugiyamaLayoutSettings.PinNodesToMaxLayer(node.get_GeometryNode());
            }
            var $it13 = verticalConstraints.SameLayerConstraints.GetEnumerator();
            while ($it13.MoveNext()){
                var couple = $it13.get_Current();
                Microsoft.Msagl.Drawing.GeometryGraphCreator.CheckGeomNode(couple.get_Item1());
                Microsoft.Msagl.Drawing.GeometryGraphCreator.CheckGeomNode(couple.get_Item2());
                sugiyamaLayoutSettings.PinNodesToSameLayer(couple.get_Item1().get_GeometryNode(), couple.get_Item2().get_GeometryNode());
            }
            var $it14 = verticalConstraints.UpDownConstraints.GetEnumerator();
            while ($it14.MoveNext()){
                var couple = $it14.get_Current();
                Microsoft.Msagl.Drawing.GeometryGraphCreator.CheckGeomNode(couple.get_Item1());
                Microsoft.Msagl.Drawing.GeometryGraphCreator.CheckGeomNode(couple.get_Item2());
                sugiyamaLayoutSettings.AddUpDownConstraint(couple.get_Item1().get_GeometryNode(), couple.get_Item2().get_GeometryNode());
            }
        },
        CheckGeomNode: function (node){
            if (node.get_GeometryNode() == null)
                throw $CreateException(new System.IO.InvalidDataException.ctor$$String(System.String.Format$$String$$Object("node \"{0}\" probably does not belong to the drawing graph because its GeometryNode is null", node)), new Error());
        },
        TransferHorizontalConstraints: function (horizontalConstraints, sugiyamaLayoutSettings){
            var $it15 = horizontalConstraints.UpDownVerticalConstraints.GetEnumerator();
            while ($it15.MoveNext()){
                var couple = $it15.get_Current();
                sugiyamaLayoutSettings.AddUpDownVerticalConstraint(couple.get_Item1().get_GeometryNode(), couple.get_Item2().get_GeometryNode());
            }
            var $it16 = horizontalConstraints.get_LeftRightConstraints().GetEnumerator();
            while ($it16.MoveNext()){
                var couple = $it16.get_Current();
                sugiyamaLayoutSettings.AddLeftRightConstraint(couple.get_Item1().get_GeometryNode(), couple.get_Item2().get_GeometryNode());
            }
            var $it17 = horizontalConstraints.LeftRightNeighbors.GetEnumerator();
            while ($it17.MoveNext()){
                var couple = $it17.get_Current();
                sugiyamaLayoutSettings.AddSameLayerNeighbors$$Node$$Node(couple.get_Item1().get_GeometryNode(), couple.get_Item2().get_GeometryNode());
            }
        },
        CreateLayoutSettings: function (graph){
            var settings = Cast(graph.get_LayoutAlgorithmSettings(), Microsoft.Msagl.Layout.Layered.SugiyamaLayoutSettings.ctor);
            if (settings != null){
                settings.set_NodeSeparation(graph.get_Attr().get_NodeSeparation());
                settings.set_AspectRatio(graph.attr.get_AspectRatio());
                settings.set_MinimalWidth(graph.attr.get_MinimalWidth());
                settings.set_MinimalHeight(graph.attr.get_MinimalHeight());
                switch (graph.get_Attr().get_LayerDirection()){
                    case Microsoft.Msagl.Drawing.LayerDirection.LR:
                        if (settings.get_AspectRatio() != 0)
                        settings.set_AspectRatio(1 / settings.get_AspectRatio());
                        settings.set_MinimalWidth(graph.attr.get_MinimalHeight());
                        settings.set_MinimalHeight(graph.attr.get_MinimalWidth());
                        break;
                    case Microsoft.Msagl.Drawing.LayerDirection.RL:
                        if (settings.get_AspectRatio() != 0)
                        settings.set_AspectRatio(1 / settings.get_AspectRatio());
                        settings.set_MinimalWidth(graph.attr.get_MinimalHeight());
                        settings.set_MinimalHeight(graph.attr.get_MinimalWidth());
                        break;
                    case Microsoft.Msagl.Drawing.LayerDirection.BT:
                        break;
                    case Microsoft.Msagl.Drawing.LayerDirection.None:
                        break;
                    case Microsoft.Msagl.Drawing.LayerDirection.TB:
                        break;
                    default:
                        throw $CreateException(new System.InvalidOperationException.ctor(), new Error());
                }
            }
            return settings;
        },
        CreateGeometryNode: function (drawingGraph, geometryGraph, node, connection){
            var geomNode = new Microsoft.Msagl.Core.Layout.Node.ctor();
            if (connection == Microsoft.Msagl.Drawing.ConnectionToGraph.Connected)
                geometryGraph.get_Nodes().Add(geomNode);
            node.set_GeometryNode(geomNode);
            geomNode.set_UserData(node);
            geomNode.set_Padding(node.get_Attr().get_Padding());
            return geomNode;
        },
        CreatePhyloTree: function (drawingTree){
            var creator = new Microsoft.Msagl.Drawing.GeometryGraphCreator.ctor(drawingTree);
            var phyloTree = new Microsoft.Msagl.Prototype.Phylo.PhyloTree.ctor();
            creator.FillPhyloTree(phyloTree);
            Microsoft.Msagl.Drawing.GeometryGraphCreator.AssignLengthsToGeometryEdges(phyloTree);
            return phyloTree;
        },
        AssignLengthsToGeometryEdges: function (phyloGeometryTree){
            var $it18 = phyloGeometryTree.get_Edges().GetEnumerator();
            while ($it18.MoveNext()){
                var msaglEdge = $it18.get_Current();
                var drawingEdge = As(msaglEdge.get_UserData(), Microsoft.Msagl.Drawing.PhyloEdge.ctor);
                msaglEdge.set_Length(drawingEdge.get_Length());
            }
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (drawingGraph){
            this.drawingGraph = null;
            this.nodeMapping = new System.Collections.Generic.Dictionary$2.ctor(Microsoft.Msagl.Drawing.Node.ctor, Microsoft.Msagl.Core.Layout.Node.ctor);
            System.Object.ctor.call(this);
            this.drawingGraph = drawingGraph;
        },
        Create: function (){
            var msaglGraph = new Microsoft.Msagl.Core.Layout.GeometryGraph.ctor();
            return this.FillGraph(msaglGraph);
        },
        FillGraph: function (geometryGraph){
            this.ProcessNodes(geometryGraph);
            if (this.drawingGraph.get_RootSubgraph() != null){
                geometryGraph.set_RootCluster(this.ProcessSubGraphs(this.drawingGraph.get_RootSubgraph()));
                geometryGraph.get_RootCluster().set_GeometryParent(geometryGraph);
            }
            this.ProcessEdges(geometryGraph);
            Microsoft.Msagl.Drawing.GeometryGraphCreator.ProcessGraphAttrs(this.drawingGraph, geometryGraph, this.drawingGraph.get_LayoutAlgorithmSettings());
            return geometryGraph;
        },
        FillPhyloTree: function (msaglGraph){
            this.ProcessNodes(msaglGraph);
            this.ProcessPhyloEdges(this.drawingGraph, msaglGraph);
            Microsoft.Msagl.Drawing.GeometryGraphCreator.ProcessGraphAttrs(this.drawingGraph, msaglGraph, this.drawingGraph.get_LayoutAlgorithmSettings());
            return msaglGraph;
        },
        ProcessEdges: function (msaglGraph){
            var $it4 = this.drawingGraph.get_Edges().GetEnumerator();
            while ($it4.MoveNext()){
                var drawingEdge = $it4.get_Current();
                var sourceNode = this.nodeMapping.get_Item$$TKey(drawingEdge.get_SourceNode());
                var targetNode = this.nodeMapping.get_Item$$TKey(drawingEdge.get_TargetNode());
                if (sourceNode == null){
                    sourceNode = Microsoft.Msagl.Drawing.GeometryGraphCreator.CreateGeometryNode(this.drawingGraph, msaglGraph, this.drawingGraph.FindNode(drawingEdge.get_Source()), Microsoft.Msagl.Drawing.ConnectionToGraph.Connected);
                    this.nodeMapping.set_Item$$TKey(drawingEdge.get_SourceNode(), sourceNode);
                }
                if (targetNode == null){
                    targetNode = Microsoft.Msagl.Drawing.GeometryGraphCreator.CreateGeometryNode(this.drawingGraph, msaglGraph, this.drawingGraph.FindNode(drawingEdge.get_Target()), Microsoft.Msagl.Drawing.ConnectionToGraph.Connected);
                    this.nodeMapping.set_Item$$TKey(drawingEdge.get_TargetNode(), targetNode);
                }
                var msaglEdge = Microsoft.Msagl.Drawing.GeometryGraphCreator.CreateGeometryEdgeAndAddItToGeometryGraph(drawingEdge, msaglGraph);
            }
        },
        ProcessPhyloEdges: function (graph, msaglGraph){
            var $it5 = graph.get_Edges().GetEnumerator();
            while ($it5.MoveNext()){
                var e = $it5.get_Current();
                var sourceNode = this.nodeMapping.get_Item$$TKey(e.get_SourceNode());
                var targetNode = this.nodeMapping.get_Item$$TKey(e.get_TargetNode());
                if (sourceNode == null){
                    sourceNode = Microsoft.Msagl.Drawing.GeometryGraphCreator.CreateGeometryNode(graph, msaglGraph, graph.FindNode(e.get_Source()), Microsoft.Msagl.Drawing.ConnectionToGraph.Connected);
                    this.nodeMapping.set_Item$$TKey(e.get_SourceNode(), sourceNode);
                }
                if (targetNode == null){
                    targetNode = Microsoft.Msagl.Drawing.GeometryGraphCreator.CreateGeometryNode(graph, msaglGraph, graph.FindNode(e.get_Target()), Microsoft.Msagl.Drawing.ConnectionToGraph.Connected);
                    this.nodeMapping.set_Item$$TKey(e.get_TargetNode(), targetNode);
                }
                var msaglEdge = new Microsoft.Msagl.Prototype.Phylo.PhyloEdge.ctor(sourceNode, targetNode);
                msaglEdge.set_Weight(e.get_Attr().get_Weight());
                msaglEdge.set_Separation(e.get_Attr().get_Separation());
                if (e.get_Attr().get_ArrowAtSource()){
                    msaglEdge.get_EdgeGeometry().set_SourceArrowhead((function (){
                        var $v5 = new Microsoft.Msagl.Core.Layout.Arrowhead.ctor();
                        $v5.set_Length(e.get_Attr().get_ArrowheadLength());
                        return $v5;
                    }).call(this));
                }
                if (e.get_Attr().get_ArrowAtTarget()){
                    msaglEdge.get_EdgeGeometry().set_TargetArrowhead((function (){
                        var $v6 = new Microsoft.Msagl.Core.Layout.Arrowhead.ctor();
                        $v6.set_Length(e.get_Attr().get_ArrowheadLength());
                        return $v6;
                    }).call(this));
                }
                msaglGraph.get_Edges().Add(msaglEdge);
                msaglEdge.set_UserData(e);
                msaglEdge.set_LineWidth(e.get_Attr().get_LineWidth());
            }
        },
        ProcessNodes: function (msaglGraph){
            var $it6 = this.drawingGraph.get_Nodes().GetEnumerator();
            while ($it6.MoveNext()){
                var n = $it6.get_Current();
                this.nodeMapping.set_Item$$TKey(n, Microsoft.Msagl.Drawing.GeometryGraphCreator.CreateGeometryNode(this.drawingGraph, msaglGraph, n, Microsoft.Msagl.Drawing.ConnectionToGraph.Connected));
            }
            var $it7 = this.SubgraphNodes().GetEnumerator();
            while ($it7.MoveNext()){
                var n = $it7.get_Current();
                if (!this.nodeMapping.ContainsKey(n))
                    this.nodeMapping.set_Item$$TKey(n, Microsoft.Msagl.Drawing.GeometryGraphCreator.CreateGeometryNode(this.drawingGraph, msaglGraph, n, Microsoft.Msagl.Drawing.ConnectionToGraph.Disconnected));
            }
        },
        SubgraphNodes: function (){
            var $yield = [];
            if (this.drawingGraph.get_RootSubgraph() == null)
                return $yield;
            var $it8 = this.drawingGraph.get_RootSubgraph().get_Subgraphs().GetEnumerator();
            while ($it8.MoveNext()){
                var sg = $it8.get_Current();
                var $it9 = sg.get_Nodes().GetEnumerator();
                while ($it9.MoveNext()){
                    var node = $it9.get_Current();
                    $yield.push(node);
                }
            }
            return $yield;
        },
        ProcessSubGraphs: function (subgraph){
            var geomCluster = new Microsoft.Msagl.Core.Layout.Cluster.ctor$$IEnumerable$1$Node$$IEnumerable$1$Cluster(System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Drawing.Node.ctor, Microsoft.Msagl.Core.Layout.Node.ctor, subgraph.get_Nodes(), $CreateAnonymousDelegate(this, function (n){
                return this.nodeMapping.get_Item$$TKey(n);
            })), System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Drawing.Subgraph.ctor, Microsoft.Msagl.Core.Layout.Cluster.ctor, subgraph.get_Subgraphs(), $CreateDelegate(this, this.ProcessSubGraphs)));
            var $it10 = geomCluster.get_Clusters().GetEnumerator();
            while ($it10.MoveNext()){
                var sub = $it10.get_Current();
                sub.set_GeometryParent(geomCluster);
            }
            subgraph.set_GeometryNode(geomCluster);
            geomCluster.set_UserData(subgraph);
            this.nodeMapping.set_Item$$TKey(subgraph, geomCluster);
            return geomCluster;
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$GeometryGraphCreator);
var Microsoft$Msagl$Drawing$Graph = {
    fullname: "Microsoft.Msagl.Drawing.Graph",
    baseTypeName: "Microsoft.Msagl.Drawing.DrawingObject",
    staticDefinition: {
        cctor: function (){
            Microsoft.Msagl.Drawing.Graph.FileExtension = ".msagl";
        },
        Read: function (fileName){
            var stream = System.IO.File.OpenRead(fileName);
            try{
                return Microsoft.Msagl.Drawing.Graph.ReadGraphFromStream(stream);
            }
            finally{
                stream.Dispose();
            }
        },
        ReadGraphFromStream: function (stream){
            var graphReader = new Microsoft.Msagl.Drawing.GraphReader.ctor(stream);
            return graphReader.Read();
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    interfaceNames: ["Microsoft.Msagl.Drawing.ILabeledObject"],
    Kind: "Class",
    definition: {
        ctor$$String$$String: function (label, id){
            this.rootSubgraph = new Microsoft.Msagl.Drawing.Subgraph.ctor("the root subgraph\'s boundary");
            this.label = null;
            this.layoutAlgorithm = new Microsoft.Msagl.Layout.Layered.SugiyamaLayoutSettings.ctor();
            this.attr = null;
            this.nodeMap = new System.Collections.Hashtable.ctor();
            this.idToEdges = new System.Collections.Hashtable.ctor();
            this.id = null;
            this.directed = true;
            this.geomGraph = null;
            this.layerConstraints = new Microsoft.Msagl.Drawing.LayerConstraints.ctor();
            this.subgraphMap = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Microsoft.Msagl.Drawing.Subgraph.ctor);
            Microsoft.Msagl.Drawing.DrawingObject.ctor.call(this);
            this.id = id;
            this.set_Label(new Microsoft.Msagl.Drawing.Label.ctor());
            this.get_Label().set_Text(label);
            this.InitAttributes();
        },
        RootSubgraph$$: "Microsoft.Msagl.Drawing.Subgraph",
        get_RootSubgraph: function (){
            return this.rootSubgraph;
        },
        set_RootSubgraph: function (value){
            this.rootSubgraph = value;
        },
        Label$$: "Microsoft.Msagl.Drawing.Label",
        get_Label: function (){
            return this.label;
        },
        set_Label: function (value){
            this.label = value;
        },
        Nodes$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Drawing.Node]]",
        get_Nodes: function (){
            var $yield = [];
            var $it19 = this.nodeMap.get_Values().GetEnumerator();
            while ($it19.MoveNext()){
                var r = $it19.get_Current();
                $yield.push(Cast(r, Microsoft.Msagl.Drawing.Node.ctor));
            }
            return $yield;
        },
        LayoutAlgorithmSettings$$: "Microsoft.Msagl.Core.Layout.LayoutAlgorithmSettings",
        get_LayoutAlgorithmSettings: function (){
            return this.layoutAlgorithm;
        },
        set_LayoutAlgorithmSettings: function (value){
            this.layoutAlgorithm = value;
        },
        WriteNodes: function (sw){
            sw.WriteLine$$String("//nodes");
            var $it20 = this.nodeMap.get_Values().GetEnumerator();
            while ($it20.MoveNext()){
                var node = $it20.get_Current();
                sw.WriteLine$$String(node.toString());
            }
        },
        toString: function (){
            var sw = new System.IO.StringWriter.ctor();
            sw.WriteLine$$String("digraph \"" + (System.String.IsNullOrEmpty(this.get_Label().get_Text()) ? "noname" : this.get_Label().get_Text()) + "\" {");
            this.WriteStms(sw);
            sw.WriteLine$$String("}");
            sw.Close();
            return sw.toString();
        },
        WriteEdges: function (tw){
            var $it21 = this.get_Edges().GetEnumerator();
            while ($it21.MoveNext()){
                var edge = $it21.get_Current();
                tw.WriteLine$$String(edge.ToDotGeometry());
            }
        },
        WriteStms: function (sw){
            sw.WriteLine$$String(this.attr.ToString$$String(this.get_Label().get_Text()));
            this.WriteNodes(sw);
            this.WriteEdges(sw);
        },
        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",
        get_BoundingBox: function (){
            return this.get_GeometryGraph() != null ? this.PumpByBorder(this.get_GeometryGraph().get_BoundingBox()) : new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Double$$Double$$Point(0, 0, new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(1, 1));
        },
        PumpByBorder: function (rectangle){
            var del = new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(this.get_Attr().get_Border(), this.get_Attr().get_Border());
            return new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Point$$Point(Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(rectangle.get_LeftBottom(), del), Microsoft.Msagl.Core.Geometry.Point.op_Addition(rectangle.get_RightTop(), del));
        },
        Attr$$: "Microsoft.Msagl.Drawing.GraphAttr",
        get_Attr: function (){
            return this.attr;
        },
        set_Attr: function (value){
            this.attr = value;
        },
        Width$$: "System.Double",
        get_Width: function (){
            return this.get_GeometryGraph() != null ? this.get_GeometryGraph().get_Width() + this.get_Attr().get_Border() : 1;
        },
        Height$$: "System.Double",
        get_Height: function (){
            return this.get_GeometryGraph() != null ? this.get_GeometryGraph().get_Height() + this.get_Attr().get_Border() : 1;
        },
        Left$$: "System.Double",
        get_Left: function (){
            return this.get_GeometryGraph() != null ? this.get_GeometryGraph().get_Left() - this.get_Attr().get_Border() : 0;
        },
        Top$$: "System.Double",
        get_Top: function (){
            return this.get_GeometryGraph() != null ? this.get_GeometryGraph().get_Top() + this.get_Attr().get_Border() : 1;
        },
        Bottom$$: "System.Double",
        get_Bottom: function (){
            return this.get_GeometryGraph() != null ? this.get_GeometryGraph().get_Bottom() - this.get_Attr().get_Border() : 0;
        },
        Right$$: "System.Double",
        get_Right: function (){
            return this.get_GeometryGraph() != null ? this.get_GeometryGraph().get_Right() + this.get_Attr().get_Border() : 1;
        },
        AddNode$$String: function (nodeId){
            var ret;
            if (this.get_RootSubgraph() != null && this.get_RootSubgraph().get_IsUpdated()){
                this.get_SubgraphMap().Clear();
                var $it22 = this.get_RootSubgraph().AllSubgraphsDepthFirst().GetEnumerator();
                while ($it22.MoveNext()){
                    var sg = $it22.get_Current();
                    this.get_SubgraphMap().set_Item$$TKey(sg.get_Id(), sg);
                }
                this.get_RootSubgraph().set_IsUpdated(false);
            }
            var subgraph;
            if ((function (){
                var $1 = {
                    Value: subgraph
                };
                var $res = this.get_SubgraphMap().TryGetValue(nodeId, $1);
                subgraph = $1.Value;
                return $res;
            }).call(this))
                return subgraph;
            ret = As(this.nodeMap.get_Item$$Object(nodeId), Microsoft.Msagl.Drawing.Node.ctor);
            if (ret == null){
                ret = new Microsoft.Msagl.Drawing.Node.ctor(nodeId);
                this.nodeMap.set_Item$$Object(nodeId, ret);
            }
            return ret;
        },
        AddNode$$Node: function (node){
            if (this.nodeMap.ContainsKey(node.get_Id()))
                return;
            if (this.subgraphMap.ContainsKey(node.get_Id()))
                return;
            var sg = As(node, Microsoft.Msagl.Drawing.Subgraph.ctor);
            if (sg != null)
                this.subgraphMap.set_Item$$TKey(node.get_Id(), sg);
            this.nodeMap.set_Item$$Object(node.get_Id(), node);
        },
        NodeCount$$: "System.Int32",
        get_NodeCount: function (){
            return this.nodeMap.get_Count();
        },
        EdgeById: function (edgeId){
            if (this.idToEdges == null || this.idToEdges.get_Count() == 0){
                var $it23 = this.get_Edges().GetEnumerator();
                while ($it23.MoveNext()){
                    var e = $it23.get_Current();
                    if (e.get_Attr().get_Id() != null)
                        this.idToEdges.set_Item$$Object(e.get_Attr().get_Id(), e);
                }
            }
            return As(this.idToEdges.get_Item$$Object(edgeId), Microsoft.Msagl.Drawing.Edge.ctor);
        },
        EdgeCount$$: "System.Int32",
        get_EdgeCount: function (){
            return System.Linq.Enumerable.Count$1$$IEnumerable$1(Microsoft.Msagl.Drawing.Edge.ctor, this.get_Edges());
        },
        RemoveEdge: function (edge){
            if (edge == null)
                return;
            var source = edge.get_SourceNode();
            var target = edge.get_TargetNode();
            if (source != target){
                source.RemoveOutEdge(edge);
                target.RemoveInEdge(edge);
            }
            else
                source.RemoveSelfEdge(edge);
            if (edge.get_GeometryObject() != null)
                this.get_GeometryGraph().get_Edges().Remove(As(edge.get_GeometryObject(), Microsoft.Msagl.Core.Layout.Edge.ctor));
        },
        RemoveNode: function (node){
            if (node == null || !this.get_NodeMap().ContainsKey(node.get_Id()))
                return;
            var delendi = new System.Collections.ArrayList.ctor();
            var $it24 = node.get_InEdges().GetEnumerator();
            while ($it24.MoveNext()){
                var e = $it24.get_Current();
                delendi.Add(e);
            }
            var $it25 = node.get_OutEdges().GetEnumerator();
            while ($it25.MoveNext()){
                var e = $it25.get_Current();
                delendi.Add(e);
            }
            var $it26 = node.get_SelfEdges().GetEnumerator();
            while ($it26.MoveNext()){
                var e = $it26.get_Current();
                delendi.Add(e);
            }
            var $it27 = delendi.GetEnumerator();
            while ($it27.MoveNext()){
                var e = $it27.get_Current();
                this.RemoveEdge(e);
            }
            this.get_NodeMap().Remove(node.get_Id());
            this.get_GeometryGraph().get_Nodes().Remove(As(node.get_GeometryObject(), Microsoft.Msagl.Core.Layout.Node.ctor));
        },
        AddEdge$$String$$String$$String: function (source, edgeLabel, target){
            var l = edgeLabel;
            if (l == null)
                l = "";
            var edge = (function (){
                var $v7 = new Microsoft.Msagl.Drawing.Edge.ctor$$String$$String$$String(source, l, target);
                $v7.set_SourceNode(this.AddNode$$String(source));
                $v7.set_TargetNode(this.AddNode$$String(target));
                return $v7;
            }).call(this);
            this.AddPrecalculatedEdge(edge);
            return edge;
        },
        AddPrecalculatedEdge: function (edge){
            if (edge.get_Source() != edge.get_Target()){
                edge.get_SourceNode().AddOutEdge(edge);
                edge.get_TargetNode().AddInEdge(edge);
            }
            else
                edge.get_SourceNode().AddSelfEdge(edge);
        },
        FindNode: function (nodeId){
            return As(this.nodeMap.get_Item$$Object(nodeId), Microsoft.Msagl.Drawing.Node.ctor);
        },
        FindGeometryNode: function (nodeId){
            if (this.get_GeometryGraph() != null){
                var node = As(this.nodeMap.get_Item$$Object(nodeId), Microsoft.Msagl.Drawing.Node.ctor);
                if (node != null){
                    return this.get_GeometryGraph().FindNodeByUserData(node);
                }
            }
            return null;
        },
        AddEdge$$String$$String: function (source, target){
            return this.AddEdge$$String$$String$$String(source, null, target);
        },
        NodeMap$$: "System.Collections.Hashtable",
        get_NodeMap: function (){
            return this.nodeMap;
        },
        SubgraphMap$$: "System.Collections.Generic.Dictionary`2[[System.String],[Microsoft.Msagl.Drawing.Subgraph]]",
        get_SubgraphMap: function (){
            return this.subgraphMap;
        },
        Edges$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Drawing.Edge]]",
        get_Edges: function (){
            var $yield = [];
            if (this.get_RootSubgraph() != null){
                var $it28 = this.get_RootSubgraph().AllSubgraphsWidthFirstExcludingSelf().GetEnumerator();
                while ($it28.MoveNext()){
                    var subgraph = $it28.get_Current();
                    var $it29 = subgraph.get_OutEdges().GetEnumerator();
                    while ($it29.MoveNext()){
                        var e = $it29.get_Current();
                        $yield.push(e);
                    }
                    var $it30 = subgraph.get_SelfEdges().GetEnumerator();
                    while ($it30.MoveNext()){
                        var e = $it30.get_Current();
                        $yield.push(e);
                    }
                }
            }
            var $it31 = this.get_Nodes().GetEnumerator();
            while ($it31.MoveNext()){
                var node = $it31.get_Current();
                var $it32 = node.get_OutEdges().GetEnumerator();
                while ($it32.MoveNext()){
                    var e = $it32.get_Current();
                    $yield.push(e);
                }
                var $it33 = node.get_SelfEdges().GetEnumerator();
                while ($it33.MoveNext()){
                    var e = $it33.get_Current();
                    $yield.push(e);
                }
            }
            return $yield;
        },
        ctor: function (){
            this.rootSubgraph = new Microsoft.Msagl.Drawing.Subgraph.ctor("the root subgraph\'s boundary");
            this.label = null;
            this.layoutAlgorithm = new Microsoft.Msagl.Layout.Layered.SugiyamaLayoutSettings.ctor();
            this.attr = null;
            this.nodeMap = new System.Collections.Hashtable.ctor();
            this.idToEdges = new System.Collections.Hashtable.ctor();
            this.id = null;
            this.directed = true;
            this.geomGraph = null;
            this.layerConstraints = new Microsoft.Msagl.Drawing.LayerConstraints.ctor();
            this.subgraphMap = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Microsoft.Msagl.Drawing.Subgraph.ctor);
            Microsoft.Msagl.Drawing.Graph.ctor$$String.call(this, "");
        },
        ctor$$String: function (labelPar){
            this.rootSubgraph = new Microsoft.Msagl.Drawing.Subgraph.ctor("the root subgraph\'s boundary");
            this.label = null;
            this.layoutAlgorithm = new Microsoft.Msagl.Layout.Layered.SugiyamaLayoutSettings.ctor();
            this.attr = null;
            this.nodeMap = new System.Collections.Hashtable.ctor();
            this.idToEdges = new System.Collections.Hashtable.ctor();
            this.id = null;
            this.directed = true;
            this.geomGraph = null;
            this.layerConstraints = new Microsoft.Msagl.Drawing.LayerConstraints.ctor();
            this.subgraphMap = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Microsoft.Msagl.Drawing.Subgraph.ctor);
            Microsoft.Msagl.Drawing.DrawingObject.ctor.call(this);
            this.set_Label(new Microsoft.Msagl.Drawing.Label.ctor());
            this.id = (function ($p1){
                this.get_Label().set_Text($p1);
                return $p1;
            }).call(this, labelPar);
            this.InitAttributes();
        },
        InitAttributes: function (){
            this.attr = new Microsoft.Msagl.Drawing.GraphAttr.ctor();
        },
        Directed$$: "System.Boolean",
        get_Directed: function (){
            return this.directed;
        },
        set_Directed: function (value){
            this.directed = value;
        },
        GeometryGraph$$: "Microsoft.Msagl.Core.Layout.GeometryGraph",
        get_GeometryGraph: function (){
            return this.geomGraph;
        },
        set_GeometryGraph: function (value){
            this.geomGraph = value;
        },
        CreateGeometryGraph: function (){
            this.set_GeometryGraph(new Microsoft.Msagl.Drawing.GeometryGraphCreator.ctor(this).Create());
        },
        CreateLayoutSettings: function (){
            return Microsoft.Msagl.Drawing.GeometryGraphCreator.CreateLayoutSettings(this);
        },
        GeometryObject$$: "Microsoft.Msagl.Core.Layout.GeometryObject",
        get_GeometryObject: function (){
            return this.get_GeometryGraph();
        },
        set_GeometryObject: function (value){
            this.set_GeometryGraph(Cast(value, Microsoft.Msagl.Core.Layout.GeometryGraph.ctor));
        },
        LayerConstraints$$: "Microsoft.Msagl.Drawing.LayerConstraints",
        get_LayerConstraints: function (){
            return this.layerConstraints;
        },
        set_LayerConstraints: function (value){
            this.layerConstraints = value;
        },
        Write: function (fileName){
            if (fileName != null){
                if (!fileName.EndsWith$$String$$StringComparison(".msagl", 5))
                    fileName += ".msagl";
                var stream = System.IO.File.Open$$String$$FileMode(fileName, 2);
                try{
                    this.WriteToStream(stream);
                }
                finally{
                    stream.Dispose();
                }
            }
        },
        WriteToStream: function (stream){
            var graphWriter = new Microsoft.Msagl.Drawing.GraphWriter.ctor$$Stream$$Graph(stream, this);
            graphWriter.Write();
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$Graph);
var Microsoft$Msagl$Drawing$GraphAttr = {
    fullname: "Microsoft.Msagl.Drawing.GraphAttr",
    baseTypeName: "Microsoft.Msagl.Drawing.AttributeBase",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.minimalWidth = 0;
            this.minimalHeight = 0;
            this.minNodeHeight = 9;
            this.minNodeWidth = 13.5;
            this.simpleStretch = true;
            this.border = 0;
            this.bgcolor = new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte(255, 255, 255);
            this.margin = 10;
            this.optimizeLabelPositions = true;
            this.minNodeSeparation = 4.5;
            this.nodesep = 9;
            this.layerdir = Microsoft.Msagl.Drawing.LayerDirection.TB;
            this.layersep = 36;
            this.minLayerSep = 0.36;
            this._AspectRatio = 0;
            Microsoft.Msagl.Drawing.AttributeBase.ctor.call(this);
        },
        MinimalWidth$$: "System.Double",
        get_MinimalWidth: function (){
            return this.minimalWidth;
        },
        set_MinimalWidth: function (value){
            this.minimalWidth = System.Math.Max$$Double$$Double(value, 0);
        },
        MinimalHeight$$: "System.Double",
        get_MinimalHeight: function (){
            return this.minimalHeight;
        },
        set_MinimalHeight: function (value){
            this.minimalHeight = System.Math.Max$$Double$$Double(value, 0);
        },
        MinNodeHeight$$: "System.Double",
        get_MinNodeHeight: function (){
            return this.minNodeHeight;
        },
        set_MinNodeHeight: function (value){
            this.minNodeHeight = System.Math.Max$$Double$$Double(0.9, value);
        },
        MinNodeWidth$$: "System.Double",
        get_MinNodeWidth: function (){
            return this.minNodeWidth;
        },
        set_MinNodeWidth: function (value){
            this.minNodeWidth = System.Math.Max$$Double$$Double(1.35, value);
        },
        SimpleStretch$$: "System.Boolean",
        get_SimpleStretch: function (){
            return this.simpleStretch;
        },
        set_SimpleStretch: function (value){
            this.simpleStretch = value;
        },
        AspectRatio$$: "System.Double",
        get_AspectRatio: function (){
            return this._AspectRatio;
        },
        set_AspectRatio: function (value){
            this._AspectRatio = value;
        },
        Border$$: "System.Int32",
        get_Border: function (){
            return this.border;
        },
        set_Border: function (value){
            this.border = value;
        },
        ToString$$String: function (label){
            var ret = "graph [";
            if (!System.String.IsNullOrEmpty(label)){
                label = label.Replace$$String$$String("\r\n", "\\n");
                ret += "label=" + Microsoft.Msagl.Drawing.Utils.Quote(label);
            }
            if (this.get_LayerDirection() != Microsoft.Msagl.Drawing.LayerDirection.None){
                ret = Microsoft.Msagl.Drawing.Utils.ConcatWithLineEnd(ret, "layerdir=" + this.get_LayerDirection().toString());
            }
            ret = Microsoft.Msagl.Drawing.Utils.ConcatWithLineEnd(ret, "layersep=" + this.get_LayerSeparation());
            ret = Microsoft.Msagl.Drawing.Utils.ConcatWithLineEnd(ret, "nodesep=" + this.get_NodeSeparation());
            ret = Microsoft.Msagl.Drawing.Utils.ConcatWithLineEnd(ret, Microsoft.Msagl.Drawing.Utils.ColorToString("color=", this.get_Color().toString()), Microsoft.Msagl.Drawing.Utils.ColorToString("bgcolor=", this.bgcolor.toString()), this.StylesToString("\r\n"), "]");
            return ret;
        },
        BackgroundColor$$: "Microsoft.Msagl.Drawing.Color",
        get_BackgroundColor: function (){
            return this.bgcolor;
        },
        set_BackgroundColor: function (value){
            this.bgcolor = value;
        },
        Margin$$: "System.Double",
        get_Margin: function (){
            return this.margin;
        },
        set_Margin: function (value){
            this.margin = value;
        },
        OptimizeLabelPositions$$: "System.Boolean",
        get_OptimizeLabelPositions: function (){
            return this.optimizeLabelPositions;
        },
        set_OptimizeLabelPositions: function (value){
            this.optimizeLabelPositions = value;
        },
        MinNodeSeparation$$: "System.Double",
        get_MinNodeSeparation: function (){
            return this.minNodeSeparation;
        },
        NodeSeparation$$: "System.Double",
        get_NodeSeparation: function (){
            return this.nodesep;
        },
        set_NodeSeparation: function (value){
            this.nodesep = System.Math.Max$$Double$$Double(value, this.get_MinNodeSeparation());
        },
        LayerDirection$$: "Microsoft.Msagl.Drawing.LayerDirection",
        get_LayerDirection: function (){
            return this.layerdir;
        },
        set_LayerDirection: function (value){
            this.layerdir = value;
        },
        LayerSeparation$$: "System.Double",
        get_LayerSeparation: function (){
            return this.layersep;
        },
        set_LayerSeparation: function (value){
            this.layersep = System.Math.Max$$Double$$Double(value, this.minLayerSep);
        },
        MinLayerSeparation$$: "System.Double",
        get_MinLayerSeparation: function (){
            return this.minLayerSep;
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$GraphAttr);
var Microsoft$Msagl$Drawing$GraphReader = {
    fullname: "Microsoft.Msagl.Drawing.GraphReader",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (streamP){
            this.EdgeList = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Drawing.Edge.ctor);
            this.stream = null;
            this.graph = new Microsoft.Msagl.Drawing.Graph.ctor();
            this.xmlReader = null;
            this.subgraphTable = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Microsoft.Msagl.Drawing.SubgraphTemplate.ctor);
            this.geometryGraphReader = null;
            System.Object.ctor.call(this);
            this.stream = streamP;
            var readerSettings = new System.Xml.XmlReaderSettings.ctor();
            readerSettings.set_IgnoreWhitespace(true);
            readerSettings.set_IgnoreComments(true);
            this.xmlReader = System.Xml.XmlReader.Create$$Stream$$XmlReaderSettings(this.stream, readerSettings);
        },
        Read: function (){
            var currentCulture = System.Threading.Thread.get_CurrentThread().get_CurrentCulture();
            System.Threading.Thread.get_CurrentThread().set_CurrentCulture(System.Globalization.CultureInfo.get_InvariantCulture());
            try{
                this.ReadGraph();
            }
            finally{
                System.Threading.Thread.get_CurrentThread().set_CurrentCulture(currentCulture);
            }
            return this.graph;
        },
        ReadGraph: function (){
            this.MoveToContent();
            this.XmlRead();
            if (this.TokenIs(Microsoft.Msagl.Drawing.Tokens.UserData))
                this.graph.set_UserData(this.ReadUserData());
            this.ReadAttr();
            this.ReadLabel(this.graph);
            var done = false;
            do{
                switch (this.GetElementTag()){
                    case Microsoft.Msagl.Drawing.Tokens.Nodes:
                        this.ReadNodes();
                        break;
                    case Microsoft.Msagl.Drawing.Tokens.Edges:
                        this.FleshOutSubgraphs();
                        this.ReadEdges();
                        break;
                    case Microsoft.Msagl.Drawing.Tokens.Subgraphs:
                        this.ReadSubgraphs();
                        break;
                    case Microsoft.Msagl.Drawing.Tokens.graph:
                        this.ReadGeomGraph();
                        break;
                    case Microsoft.Msagl.Drawing.Tokens.End:
                        done = true;
                        break;
                    default:
                        this.xmlReader.Skip();
                        break;
                }
            }
            while (!done)
        },
        FleshOutSubgraphs: function (){
            var $it34 = this.subgraphTable.get_Values().GetEnumerator();
            while ($it34.MoveNext()){
                var subgraphTemlate = $it34.get_Current();
                var subgraph = subgraphTemlate.Subgraph;
                var $it35 = subgraphTemlate.SubgraphIdList.GetEnumerator();
                while ($it35.MoveNext()){
                    var id = $it35.get_Current();
                    subgraph.AddSubgraph(this.subgraphTable.get_Item$$TKey(id).Subgraph);
                }
                var $it36 = subgraphTemlate.NodeIdList.GetEnumerator();
                while ($it36.MoveNext()){
                    var id = $it36.get_Current();
                    subgraph.AddNode(this.graph.FindNode(id));
                }
            }
            var rootSubgraphSet = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Drawing.Subgraph.ctor);
            var $it37 = System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Drawing.SubgraphTemplate.ctor, Microsoft.Msagl.Drawing.Subgraph.ctor, this.subgraphTable.get_Values(), $CreateAnonymousDelegate(this, function (c){
                return c.Subgraph;
            })).GetEnumerator();
            while ($it37.MoveNext()){
                var subgraph = $it37.get_Current();
                if (subgraph.get_ParentSubgraph() == null){
                    rootSubgraphSet.Insert(subgraph);
                    this.graph.get_RootSubgraph().AddSubgraph(subgraph);
                }
            }
            if (rootSubgraphSet.get_Count() == 1)
                this.graph.set_RootSubgraph(System.Linq.Enumerable.First$1$$IEnumerable$1(Microsoft.Msagl.Drawing.Subgraph.ctor, rootSubgraphSet));
            else {
                var $it38 = rootSubgraphSet.GetEnumerator();
                while ($it38.MoveNext()){
                    var subgraph = $it38.get_Current();
                    this.graph.get_RootSubgraph().AddSubgraph(subgraph);
                }
            }
        },
        ReadSubgraphs: function (){
            this.xmlReader.Read();
            while (this.TokenIs(Microsoft.Msagl.Drawing.Tokens.Subgraph))
                this.ReadSubgraph();
            if (!this.xmlReader.IsStartElement())
                this.ReadEndElement();
        },
        ReadSubgraph: function (){
            var listOfSubgraphs = this.xmlReader.GetAttribute$$String(Microsoft.Msagl.Drawing.Tokens.listOfSubgraphs.toString());
            var subgraphTempl = new Microsoft.Msagl.Drawing.SubgraphTemplate.ctor();
            if (!System.String.IsNullOrEmpty(listOfSubgraphs)){
                subgraphTempl.SubgraphIdList.AddRange(listOfSubgraphs.Split$$Char$Array(" "));
            }
            var listOfNodes = this.xmlReader.GetAttribute$$String(Microsoft.Msagl.Drawing.Tokens.listOfNodes.toString());
            if (!System.String.IsNullOrEmpty(listOfNodes)){
                subgraphTempl.NodeIdList.AddRange(listOfNodes.Split$$Char$Array(" "));
            }
            this.xmlReader.Read();
            var subgraph = this.ReadSubgraphContent();
            subgraphTempl.Subgraph = subgraph;
            this.subgraphTable.set_Item$$TKey(subgraph.get_Id(), subgraphTempl);
        },
        ReadUserData: function (){
            this.XmlRead();
            var typeString = this.ReadStringElement(Microsoft.Msagl.Drawing.Tokens.UserDataType);
            var serString = this.ReadStringElement(Microsoft.Msagl.Drawing.Tokens.SerializedUserData);
            this.ReadEndElement();
            var t = System.Type.GetType$$String(typeString);
            var dcs = new System.Runtime.Serialization.DataContractSerializer.ctor$$Type(t);
            var sr = new System.IO.StringReader.ctor(serString);
            var xr = System.Xml.XmlReader.Create$$TextReader(sr);
            return dcs.ReadObject$$XmlReader$$Boolean(xr, true);
        },
        ReadLabel: function (parent){
            var hasLabel = !this.xmlReader.get_IsEmptyElement();
            if (hasLabel){
                this.XmlRead();
                var label = (function (){
                    var $v8 = new Microsoft.Msagl.Drawing.Label.ctor();
                    $v8.set_Text(this.ReadStringElement(Microsoft.Msagl.Drawing.Tokens.Text));
                    $v8.set_FontName(this.ReadStringElement(Microsoft.Msagl.Drawing.Tokens.FontName));
                    $v8.set_FontColor(this.ReadColorElement(Microsoft.Msagl.Drawing.Tokens.FontColor));
                    $v8.set_FontStyle(this.TokenIs(Microsoft.Msagl.Drawing.Tokens.FontStyle) ? this.ReadIntElement(Microsoft.Msagl.Drawing.Tokens.FontStyle) : Microsoft.Msagl.Drawing.FontStyle.Regular);
                    $v8.set_FontSize(this.ReadDoubleElement(Microsoft.Msagl.Drawing.Tokens.FontSize));
                    $v8.set_Width(this.ReadDoubleElement(Microsoft.Msagl.Drawing.Tokens.Width));
                    $v8.set_Height(this.ReadDoubleElement(Microsoft.Msagl.Drawing.Tokens.Height));
                    $v8.set_Owner(parent);
                    return $v8;
                }).call(this);
                (Cast(parent, Microsoft.Msagl.Drawing.ILabeledObject.ctor)).set_Label(label);
                this.ReadEndElement();
            }
            else {
                var node = As(parent, Microsoft.Msagl.Drawing.Node.ctor);
                if (node != null){
                    var label = (function (){
                        var $v9 = new Microsoft.Msagl.Drawing.Label.ctor();
                        $v9.set_Text(node.get_Id());
                        $v9.set_Owner(parent);
                        return $v9;
                    }).call(this);
                    (Cast(parent, Microsoft.Msagl.Drawing.ILabeledObject.ctor)).set_Label(label);
                }
                this.xmlReader.Skip();
            }
        },
        ReadGeomGraph: function (){
            this.geometryGraphReader = new Microsoft.Msagl.DebugHelpers.Persistence.GeometryGraphReader.ctor();
            this.geometryGraphReader.SetXmlReader(this.xmlReader);
            var geomGraph = this.geometryGraphReader.Read();
            this.BindTheGraphs(this.graph, geomGraph, this.graph.get_LayoutAlgorithmSettings());
        },
        BindTheGraphs: function (drawingGraph, geomGraph, settings){
            drawingGraph.set_GeometryGraph(geomGraph);
            var $it39 = drawingGraph.get_NodeMap().get_Values().GetEnumerator();
            while ($it39.MoveNext()){
                var dn = $it39.get_Current();
                var geomNode = (function ($p2){
                    dn.set_GeometryNode($p2);
                    return $p2;
                }).call(this, this.geometryGraphReader.FindNodeById(dn.get_Id()));
                geomNode.set_UserData(dn);
            }
            var $it40 = drawingGraph.get_RootSubgraph().AllSubgraphsDepthFirst().GetEnumerator();
            while ($it40.MoveNext()){
                var subgraph = $it40.get_Current();
                var geomNode = (function ($p3){
                    subgraph.set_GeometryNode($p3);
                    return $p3;
                }).call(this, this.geometryGraphReader.FindClusterById(subgraph.get_Id()));
                if (geomNode != null)
                    geomNode.set_UserData(subgraph);
            }
            for (var i = 0; i < this.EdgeList.get_Count(); i++){
                var drawingEdge = this.EdgeList.get_Item$$Int32(i);
                var geomEdge = this.geometryGraphReader.EdgeList.get_Item$$Int32(i);
                drawingEdge.set_GeometryEdge(geomEdge);
                geomEdge.set_UserData(drawingEdge);
                if (drawingEdge.get_Label() != null){
                    drawingEdge.get_Label().set_GeometryLabel(geomEdge.get_Label());
                    geomEdge.get_Label().set_UserData(drawingEdge.get_Label());
                }
            }
            drawingGraph.set_LayoutAlgorithmSettings(settings);
        },
        ReadEdges: function (){
            if (this.xmlReader.get_IsEmptyElement()){
                this.XmlRead();
                return;
            }
            this.XmlRead();
            while (this.TokenIs(Microsoft.Msagl.Drawing.Tokens.Edge))
                this.ReadEdge();
            this.ReadEndElement();
        },
        ReadEdge: function (){
            this.XmlRead();
            var userData = null;
            if (this.TokenIs(Microsoft.Msagl.Drawing.Tokens.UserData))
                userData = this.ReadUserData();
            var edge = this.graph.AddEdge$$String$$String(this.ReadStringElement(Microsoft.Msagl.Drawing.Tokens.SourceNodeID), this.ReadStringElement(Microsoft.Msagl.Drawing.Tokens.TargetNodeID));
            edge.set_Attr(new Microsoft.Msagl.Drawing.EdgeAttr.ctor());
            edge.set_UserData(userData);
            this.ReadEdgeAttr(edge.get_Attr());
            this.ReadLabel(edge);
            this.EdgeList.Add(edge);
            this.ReadEndElement();
        },
        GetElementTag: function (){
            var token;
            if (this.xmlReader.get_ReadState() == 3)
                return Microsoft.Msagl.Drawing.Tokens.End;
            if ((function (){
                var $1 = {
                    Value: token
                };
                var $res = System.Enum.TryParse$1$$String$$Boolean$$TEnum(Microsoft.Msagl.Drawing.Tokens.ctor, this.xmlReader.get_Name(), true, $1);
                token = $1.Value;
                return $res;
            }).call(this))
                return token;
            throw $CreateException(new System.InvalidOperationException.ctor(), new Error());
        },
        ReadEdgeAttr: function (edgeAttr){
            this.XmlRead();
            this.ReadBaseAttr(edgeAttr);
            edgeAttr.set_Separation(this.ReadIntElement(Microsoft.Msagl.Drawing.Tokens.EdgeSeparation));
            edgeAttr.set_Weight(this.ReadIntElement(Microsoft.Msagl.Drawing.Tokens.Weight));
            edgeAttr.set_ArrowheadAtSource(Cast(System.Enum.Parse$$Type$$String$$Boolean(Typeof(Microsoft.Msagl.Drawing.ArrowStyle.ctor), this.ReadStringElement(Microsoft.Msagl.Drawing.Tokens.ArrowStyle), false), Microsoft.Msagl.Drawing.ArrowStyle.ctor));
            edgeAttr.set_ArrowheadAtTarget(Cast(System.Enum.Parse$$Type$$String$$Boolean(Typeof(Microsoft.Msagl.Drawing.ArrowStyle.ctor), this.ReadStringElement(Microsoft.Msagl.Drawing.Tokens.ArrowStyle), false), Microsoft.Msagl.Drawing.ArrowStyle.ctor));
            edgeAttr.set_ArrowheadLength(this.ReadDoubleElement(Microsoft.Msagl.Drawing.Tokens.ArrowheadLength));
            this.ReadEndElement();
        },
        ReadIntElement: function (token){
            return this.ReadElementContentAsInt();
        },
        ReadStringElement: function (token){
            return this.ReadElementContentAsString();
        },
        ReadElementContentAsInt: function (){
            return this.xmlReader.ReadElementContentAsInt();
        },
        ReadBooleanElement: function (token){
            return this.ReadElementContentAsBoolean();
        },
        ReadDoubleElement: function (token){
            return this.ReadElementContentAsDouble();
        },
        ReadNodes: function (){
            this.XmlRead();
            while (this.TokenIs(Microsoft.Msagl.Drawing.Tokens.Node))
                this.ReadNode();
            this.ReadEndElement();
        },
        ReadNode: function (){
            this.ReadNodeContent();
        },
        ReadSubgraphContent: function (){
            var userData = null;
            if (this.TokenIs(Microsoft.Msagl.Drawing.Tokens.UserData))
                userData = this.ReadUserData();
            var nodeAttr = new Microsoft.Msagl.Drawing.NodeAttr.ctor();
            this.ReadNodeAttr(nodeAttr);
            var subgraph = (function (){
                var $v10 = new Microsoft.Msagl.Drawing.Subgraph.ctor(nodeAttr.get_Id());
                $v10.set_Label(null);
                $v10.set_Attr(nodeAttr);
                $v10.set_UserData(userData);
                return $v10;
            }).call(this);
            this.ReadLabel(subgraph);
            this.ReadEndElement();
            return subgraph;
        },
        ReadNodeContent: function (){
            this.XmlRead();
            var userData = null;
            if (this.TokenIs(Microsoft.Msagl.Drawing.Tokens.UserData))
                userData = this.ReadUserData();
            var nodeAttr = new Microsoft.Msagl.Drawing.NodeAttr.ctor();
            this.ReadNodeAttr(nodeAttr);
            var node = this.graph.AddNode$$String(nodeAttr.get_Id());
            node.set_Label(null);
            node.set_Attr(nodeAttr);
            node.set_UserData(userData);
            this.ReadLabel(node);
            this.ReadEndElement();
        },
        ReadNodeAttr: function (na){
            this.XmlRead();
            this.ReadBaseAttr(na);
            na.set_FillColor(this.ReadColorElement(Microsoft.Msagl.Drawing.Tokens.Fillcolor));
            na.set_LabelMargin(this.ReadIntElement(Microsoft.Msagl.Drawing.Tokens.LabelMargin));
            na.set_Padding(this.ReadDoubleElement(Microsoft.Msagl.Drawing.Tokens.Padding));
            na.set_Shape(Cast(System.Enum.Parse$$Type$$String$$Boolean(Typeof(Microsoft.Msagl.Drawing.Shape.ctor), this.ReadStringElement(Microsoft.Msagl.Drawing.Tokens.Shape), false), Microsoft.Msagl.Drawing.Shape.ctor));
            na.set_XRadius(this.ReadDoubleElement(Microsoft.Msagl.Drawing.Tokens.XRad));
            na.set_YRadius(this.ReadDoubleElement(Microsoft.Msagl.Drawing.Tokens.YRad));
            this.ReadEndElement();
        },
        ReadBaseAttr: function (baseAttr){
            this.XmlRead();
            this.ReadStyles(baseAttr);
            baseAttr.set_Color(this.ReadColorElement(Microsoft.Msagl.Drawing.Tokens.Color));
            baseAttr.set_LineWidth(this.ReadDoubleElement(Microsoft.Msagl.Drawing.Tokens.LineWidth));
            baseAttr.set_Id(this.ReadStringElement(Microsoft.Msagl.Drawing.Tokens.ID));
            this.ReadEndElement();
        },
        ReadStyles: function (baseAttr){
            this.XmlRead();
            var haveStyles = false;
            while (this.TokenIs(Microsoft.Msagl.Drawing.Tokens.Style)){
                baseAttr.AddStyle(Cast(System.Enum.Parse$$Type$$String$$Boolean(Typeof(Microsoft.Msagl.Drawing.Style.ctor), this.ReadStringElement(Microsoft.Msagl.Drawing.Tokens.Style), false), Microsoft.Msagl.Drawing.Style.ctor));
                haveStyles = true;
            }
            if (haveStyles)
                this.ReadEndElement();
        },
        ReadEndElement: function (){
            this.xmlReader.ReadEndElement();
        },
        ReadElementContentAsString: function (){
            return this.xmlReader.ReadElementContentAsString();
        },
        CheckToken: function (t){
            if (!this.xmlReader.IsStartElement$$String(t.toString())){
                throw $CreateException(new System.IO.InvalidDataException.ctor$$String(System.String.Format$$String$$Object("expecting {0}", t)), new Error());
            }
        },
        TokenIs: function (t){
            return this.xmlReader.IsStartElement$$String(t.toString());
        },
        ReadAttr: function (){
            this.XmlRead();
            this.ReadBaseAttr(this.graph.get_Attr());
            this.ReadMinNodeHeight();
            this.ReadMinNodeWidth();
            this.ReadAspectRatio();
            this.ReadBorder();
            this.graph.get_Attr().set_BackgroundColor(this.ReadColorElement(Microsoft.Msagl.Drawing.Tokens.BackgroundColor));
            this.graph.get_Attr().set_Margin(this.ReadDoubleElement(Microsoft.Msagl.Drawing.Tokens.Margin));
            this.graph.get_Attr().set_OptimizeLabelPositions(this.ReadBooleanElement(Microsoft.Msagl.Drawing.Tokens.OptimizeLabelPositions));
            this.graph.get_Attr().set_NodeSeparation(this.ReadDoubleElement(Microsoft.Msagl.Drawing.Tokens.NodeSeparation));
            this.graph.get_Attr().set_LayerDirection(Cast(System.Enum.Parse$$Type$$String$$Boolean(Typeof(Microsoft.Msagl.Drawing.LayerDirection.ctor), this.ReadStringElement(Microsoft.Msagl.Drawing.Tokens.LayerDirection), false), Microsoft.Msagl.Drawing.LayerDirection.ctor));
            this.graph.get_Attr().set_LayerSeparation(this.ReadDoubleElement(Microsoft.Msagl.Drawing.Tokens.LayerSeparation));
            this.ReadEndElement();
        },
        ReadBorder: function (){
            this.graph.get_Attr().set_Border(this.ReadIntElement(Microsoft.Msagl.Drawing.Tokens.Border));
        },
        ReadMinNodeWidth: function (){
            this.graph.get_Attr().set_MinNodeWidth(this.ReadDoubleElement(Microsoft.Msagl.Drawing.Tokens.MinNodeWidth));
        },
        ReadMinNodeHeight: function (){
            this.graph.get_Attr().set_MinNodeHeight(this.ReadDoubleElement(Microsoft.Msagl.Drawing.Tokens.MinNodeHeight));
        },
        ReadColorElement: function (token){
            this.XmlRead();
            var c = this.ReadColor();
            this.ReadEndElement();
            return c;
        },
        ReadColor: function (){
            this.XmlRead();
            var c = new Microsoft.Msagl.Drawing.Color.ctor$$Byte$$Byte$$Byte$$Byte(this.ReadByte(Microsoft.Msagl.Drawing.Tokens.A), this.ReadByte(Microsoft.Msagl.Drawing.Tokens.R), this.ReadByte(Microsoft.Msagl.Drawing.Tokens.G), this.ReadByte(Microsoft.Msagl.Drawing.Tokens.B));
            this.ReadEndElement();
            return c;
        },
        ReadByte: function (token){
            return this.ReadIntElement(token);
        },
        ReadAspectRatio: function (){
            this.graph.get_Attr().set_AspectRatio(this.ReadElementContentAsDouble());
        },
        ReadElementContentAsBoolean: function (){
            return System.Convert.ToBoolean$$String(this.xmlReader.ReadElementContentAsString());
        },
        ReadElementContentAsDouble: function (){
            return this.xmlReader.ReadElementContentAsDouble();
        },
        MoveToContent: function (){
            this.xmlReader.MoveToContent();
        },
        XmlRead: function (){
            this.xmlReader.Read();
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$GraphReader);
var Microsoft$Msagl$Drawing$GraphWriter = {
    fullname: "Microsoft.Msagl.Drawing.GraphWriter",
    baseTypeName: "System.Object",
    staticDefinition: {
        FirstCharToLower: function (attrKind){
            var attrString = attrKind.toString();
            attrString = attrString.substr(0, 1).toLowerCase$$CultureInfo(System.Globalization.CultureInfo.get_InvariantCulture()) + attrString.substr(1, attrString.length - 1);
            return attrString;
        },
        WriteUserDataToStream: function (obj, dcs){
            dcs.Value = new System.Runtime.Serialization.DataContractSerializer.ctor$$Type(obj.GetType());
            var sw = new System.IO.StringWriter.ctor$$IFormatProvider(System.Globalization.CultureInfo.get_InvariantCulture());
            var xw = System.Xml.XmlWriter.Create$$TextWriter(sw);
            dcs.Value.WriteObject$$XmlWriter$$Object(xw, obj);
            xw.Flush();
            return sw;
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor$$Stream$$Graph: function (streamPar, graphP){
            this.graph = null;
            this.stream = null;
            this.xmlWriter = null;
            System.Object.ctor.call(this);
            this.stream = streamPar;
            this.graph = graphP;
            var xmlWriterSettings = new System.Xml.XmlWriterSettings.ctor();
            xmlWriterSettings.set_Indent(true);
            this.xmlWriter = System.Xml.XmlWriter.Create$$Stream$$XmlWriterSettings(this.stream, xmlWriterSettings);
        },
        ctor: function (){
            this.graph = null;
            this.stream = null;
            this.xmlWriter = null;
            System.Object.ctor.call(this);
        },
        XmlWriter$$: "System.Xml.XmlWriter",
        get_XmlWriter: function (){
            return this.xmlWriter;
        },
        Write: function (){
            var currentCulture = System.Threading.Thread.get_CurrentThread().get_CurrentCulture();
            System.Threading.Thread.get_CurrentThread().set_CurrentCulture(System.Globalization.CultureInfo.get_InvariantCulture());
            try{
                this.Open();
                if (this.graph.get_UserData() != null)
                    this.WriteUserData(this.graph.get_UserData());
                this.WriteGraphAttr(this.graph.get_Attr());
                this.WriteLabel(this.graph.get_Label());
                this.WriteSubgraphs();
                this.WriteNodes();
                this.WriteEdges();
                this.WriteGeometryGraph();
                this.Close();
            }
            finally{
                System.Threading.Thread.get_CurrentThread().set_CurrentCulture(currentCulture);
            }
        },
        WriteSubgraphs: function (){
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.Subgraphs);
            var $it41 = this.graph.get_RootSubgraph().AllSubgraphsDepthFirstExcludingSelf().GetEnumerator();
            while ($it41.MoveNext()){
                var node = $it41.get_Current();
                this.WriteSubgraph(node);
            }
            this.WriteEndElement();
        },
        WriteAttribute: function (attrKind, val){
            var attrString = Microsoft.Msagl.Drawing.GraphWriter.FirstCharToLower(attrKind);
            this.xmlWriter.WriteAttributeString$$String$$String(attrString, val.toString());
        },
        WriteSubgraph: function (subgraph){
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.Subgraph);
            var subgraphsString = System.String.Join$$String$$IEnumerable$1$String(" ", System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Drawing.Subgraph.ctor, System.String.ctor, subgraph.get_Subgraphs(), $CreateAnonymousDelegate(this, function (s){
                return s.get_Id();
            })));
            this.WriteAttribute(Microsoft.Msagl.Drawing.Tokens.listOfSubgraphs, subgraphsString);
            var nodesString = System.String.Join$$String$$IEnumerable$1$String(" ", System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Drawing.Node.ctor, System.String.ctor, subgraph.get_Nodes(), $CreateAnonymousDelegate(this, function (s){
                return s.get_Id();
            })));
            this.WriteAttribute(Microsoft.Msagl.Drawing.Tokens.listOfNodes, nodesString);
            if (subgraph.get_UserData() != null)
                this.WriteUserData(subgraph.get_UserData());
            this.WriteNodeAttr(subgraph.get_Attr());
            this.WriteLabel(subgraph.get_Label());
            this.WriteEndElement();
        },
        WriteUserData: function (o){
            var dcs = null;
            var sw;
            var success = true;
            try{
                sw = (function (){
                    var $1 = {
                        Value: dcs
                    };
                    var $res = Microsoft.Msagl.Drawing.GraphWriter.WriteUserDataToStream(o, $1);
                    dcs = $1.Value;
                    return $res;
                }).call(this);
            }
            catch(e){
                success = false;
                sw = (function (){
                    var $1 = {
                        Value: dcs
                    };
                    var $res = Microsoft.Msagl.Drawing.GraphWriter.WriteUserDataToStream(e.get_Message(), $1);
                    dcs = $1.Value;
                    return $res;
                }).call(this);
            }
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.UserData);
            if (success)
                this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.UserDataType, o.GetType().get_AssemblyQualifiedName());
            else
                this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.UserDataType, "string".GetType().get_AssemblyQualifiedName());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.SerializedUserData, sw.toString());
            this.WriteEndElement();
        },
        WriteLabel: function (label){
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.Label);
            if (label != null && !System.String.IsNullOrEmpty(label.get_Text())){
                this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.Text, label.get_Text());
                this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.FontName, label.get_FontName());
                this.WriteColorElement(Microsoft.Msagl.Drawing.Tokens.FontColor, label.get_FontColor());
                this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.FontStyle, label.get_FontStyle());
                this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.FontSize, label.get_FontSize());
                this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.Width, label.get_Width());
                this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.Height, label.get_Height());
            }
            this.WriteEndElement();
        },
        WriteGraphAttr: function (graphAttr){
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.GraphAttribute);
            this.WriteBaseAttr(graphAttr);
            this.WriteMinNodeHeight();
            this.WriteMinNodeWidth();
            this.WriteAspectRatio();
            this.WriteBorder();
            this.WriteColorElement(Microsoft.Msagl.Drawing.Tokens.BackgroundColor, graphAttr.get_BackgroundColor());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.Margin, graphAttr.get_Margin());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.OptimizeLabelPositions, graphAttr.get_OptimizeLabelPositions());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.NodeSeparation, graphAttr.get_NodeSeparation());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.LayerDirection, graphAttr.get_LayerDirection());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.LayerSeparation, graphAttr.get_LayerSeparation());
            this.WriteEndElement();
        },
        WriteBorder: function (){
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.Border, this.graph.get_Attr().get_Border());
        },
        WriteMinNodeWidth: function (){
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.MinNodeWidth, this.graph.get_Attr().get_MinNodeWidth());
        },
        WriteMinNodeHeight: function (){
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.MinNodeHeight, this.graph.get_Attr().get_MinNodeHeight());
        },
        WriteColorElement: function (t, c){
            this.WriteStartElement(t);
            this.WriteColor(c);
            this.WriteEndElement();
            return c;
        },
        WriteColor: function (color){
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.Color);
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.A, color.get_A());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.R, color.get_R());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.G, color.get_G());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.B, color.get_B());
            this.WriteEndElement();
        },
        WriteGeometryGraph: function (){
            if (this.graph.geomGraph != null){
                this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.GeometryGraphIsPresent, true);
                var ggw = (function (){
                    var $v11 = new Microsoft.Msagl.DebugHelpers.Persistence.GeometryGraphWriter.ctor();
                    $v11.set_Settings(this.graph.get_LayoutAlgorithmSettings());
                    $v11.set_XmlWriter(this.get_XmlWriter());
                    $v11.set_Stream(this.stream);
                    $v11.set_Graph(this.graph.get_GeometryGraph());
                    $v11.set_NeedToCloseXmlWriter(false);
                    $v11.set_NodeToIds(this.BuildGeomNodesAndClustersToIdsDictionary());
                    $v11.set_EdgeEnumeration(System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Drawing.Edge.ctor, Microsoft.Msagl.Core.Layout.Edge.ctor, this.graph.get_Edges(), $CreateAnonymousDelegate(this, function (e){
                        return e.get_GeometryEdge();
                    })));
                    return $v11;
                }).call(this);
                ggw.Write();
            }
            else
                this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.GeometryGraphIsPresent, false);
        },
        BuildGeomNodesAndClustersToIdsDictionary: function (){
            var d = new System.Collections.Generic.Dictionary$2.ctor(Microsoft.Msagl.Core.Layout.Node.ctor, System.String.ctor);
            var nodesAndClusters = this.graph.get_Nodes();
            if (this.graph.get_RootSubgraph() != null)
                nodesAndClusters = System.Linq.Enumerable.Concat$1(Microsoft.Msagl.Drawing.Node.ctor, nodesAndClusters, this.graph.get_RootSubgraph().AllSubgraphsDepthFirstExcludingSelf());
            var $it42 = nodesAndClusters.GetEnumerator();
            while ($it42.MoveNext()){
                var node = $it42.get_Current();
                d.set_Item$$TKey(node.get_GeometryNode(), node.get_Id());
            }
            return d;
        },
        Open: function (){
            this.xmlWriter.WriteStartElement$$String(Microsoft.Msagl.Drawing.Tokens.MsaglGraph.toString());
        },
        Close: function (){
            this.xmlWriter.WriteEndElement();
            this.xmlWriter.WriteEndDocument();
            this.xmlWriter.Flush();
            this.xmlWriter.Close();
        },
        WriteEdges: function (){
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.Edges);
            var $it43 = this.graph.get_Edges().GetEnumerator();
            while ($it43.MoveNext()){
                var edge = $it43.get_Current();
                this.WriteEdge(edge);
            }
            this.WriteEndElement();
        },
        WriteEdge: function (edge){
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.Edge);
            if (edge.get_UserData() != null)
                this.WriteUserData(edge.get_UserData());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.SourceNodeID, edge.get_Source());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.TargetNodeID, edge.get_Target());
            this.WriteEdgeAttr(edge.get_Attr());
            this.WriteLabel(edge.get_Label());
            this.WriteEndElement();
        },
        WriteEdgeAttr: function (edgeAttr){
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.EdgeAttribute);
            this.WriteBaseAttr(edgeAttr);
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.EdgeSeparation, edgeAttr.get_Separation());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.Weight, edgeAttr.get_Weight());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.ArrowStyle, edgeAttr.get_ArrowheadAtSource());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.ArrowStyle, edgeAttr.get_ArrowheadAtTarget());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.ArrowheadLength, edgeAttr.get_ArrowheadLength());
            this.WriteEndElement();
        },
        WriteNodes: function (){
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.Nodes);
            var $it44 = this.graph.get_Nodes().GetEnumerator();
            while ($it44.MoveNext()){
                var node = $it44.get_Current();
                this.WriteNode(node);
            }
            this.WriteEndElement();
        },
        WriteNode: function (node){
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.Node);
            if (node.get_UserData() != null)
                this.WriteUserData(node.get_UserData());
            this.WriteNodeAttr(node.get_Attr());
            this.WriteLabel(node.get_Label());
            this.WriteEndElement();
        },
        WriteNodeAttr: function (na){
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.NodeAttribute);
            this.WriteBaseAttr(na);
            this.WriteColorElement(Microsoft.Msagl.Drawing.Tokens.Fillcolor, na.get_FillColor());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.LabelMargin, na.get_LabelMargin());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.Padding, na.get_Padding());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.Shape, na.get_Shape());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.XRad, na.get_XRadius());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.YRad, na.get_YRadius());
            this.WriteEndElement();
        },
        WriteBaseAttr: function (baseAttr){
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.BaseAttr);
            this.WriteStyles(baseAttr.get_Styles());
            this.WriteColorElement(Microsoft.Msagl.Drawing.Tokens.Color, baseAttr.get_Color());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.LineWidth, baseAttr.get_LineWidth());
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.ID, baseAttr.get_Id() == null ? "" : baseAttr.get_Id());
            this.WriteEndElement();
        },
        WriteStyles: function (styles){
            this.WriteStartElement(Microsoft.Msagl.Drawing.Tokens.Styles);
            var $it45 = styles.GetEnumerator();
            while ($it45.MoveNext()){
                var s = $it45.get_Current();
                this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.Style, s);
            }
            this.WriteEndElement();
        },
        WriteAspectRatio: function (){
            this.WriteStringElement(Microsoft.Msagl.Drawing.Tokens.AspectRatio, this.graph.get_Attr().get_AspectRatio());
        },
        WriteEndElement: function (){
            this.xmlWriter.WriteEndElement();
        },
        WriteStartElement: function (t){
            this.xmlWriter.WriteStartElement$$String(t.toString());
        },
        WriteStringElement: function (t, s){
            this.xmlWriter.WriteElementString$$String$$String(t.toString(), s.toString());
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$GraphWriter);
var Microsoft$Msagl$Drawing$HorizontalConstraintsForLayeredLayout = {
    fullname: "Microsoft.Msagl.Drawing.HorizontalConstraintsForLayeredLayout",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.UpDownVerticalConstraints = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(System.Tuple$2.ctor);
            this.leftRightConstraints = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(System.Tuple$2.ctor);
            this.LeftRightNeighbors = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(System.Tuple$2.ctor);
            System.Object.ctor.call(this);
        },
        LeftRightConstraints$$: "Microsoft.Msagl.Core.DataStructures.Set`1[[System.Tuple`2[[Microsoft.Msagl.Drawing.Node],[Microsoft.Msagl.Drawing.Node]]]]",
        get_LeftRightConstraints: function (){
            return this.leftRightConstraints;
        },
        AddSameLayerNeighbors: function (neighbors){
            for (var i = 0; i < neighbors.get_Count() - 1; i++)
                this.AddSameLayerNeighborsPair(neighbors.get_Item$$Int32(i), neighbors.get_Item$$Int32(i + 1));
        },
        AddSameLayerNeighborsPair: function (leftNode, rightNode){
            this.LeftRightNeighbors.Insert(new System.Tuple$2.ctor(Microsoft.Msagl.Drawing.Node.ctor, Microsoft.Msagl.Drawing.Node.ctor, leftNode, rightNode));
        },
        Clear: function (){
            this.leftRightConstraints.Clear();
            this.LeftRightNeighbors.Clear();
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$HorizontalConstraintsForLayeredLayout);
var Microsoft$Msagl$Drawing$Label = {
    fullname: "Microsoft.Msagl.Drawing.Label",
    baseTypeName: "Microsoft.Msagl.Drawing.DrawingObject",
    staticDefinition: {
        cctor: function (){
            Microsoft.Msagl.Drawing.Label.defaultFontName = "Times-Roman";
            Microsoft.Msagl.Drawing.Label.defaultFontSize = 12;
        },
        DefaultFontName$$: "System.String",
        get_DefaultFontName: function (){
            return Microsoft.Msagl.Drawing.Label.defaultFontName;
        },
        set_DefaultFontName: function (value){
            Microsoft.Msagl.Drawing.Label.defaultFontName = value;
        },
        DefaultFontSize$$: "System.Int32",
        get_DefaultFontSize: function (){
            return Microsoft.Msagl.Drawing.Label.defaultFontSize;
        },
        set_DefaultFontSize: function (value){
            Microsoft.Msagl.Drawing.Label.defaultFontSize = value;
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.width = 0;
            this.height = 0;
            this.fontcolor = Microsoft.Msagl.Drawing.Color.get_Black();
            this.fontStyle = Microsoft.Msagl.Drawing.FontStyle.Regular;
            this.fontName = "";
            this.text = null;
            this.fontsize = Microsoft.Msagl.Drawing.Label.get_DefaultFontSize();
            this.geometryLabel = new Microsoft.Msagl.Core.Layout.Label.ctor();
            this._Owner = null;
            Microsoft.Msagl.Drawing.DrawingObject.ctor.call(this);
        },
        Owner$$: "Microsoft.Msagl.Drawing.DrawingObject",
        get_Owner: function (){
            return this._Owner;
        },
        set_Owner: function (value){
            this._Owner = value;
        },
        ctor$$String: function (textPar){
            this.width = 0;
            this.height = 0;
            this.fontcolor = Microsoft.Msagl.Drawing.Color.get_Black();
            this.fontStyle = Microsoft.Msagl.Drawing.FontStyle.Regular;
            this.fontName = "";
            this.text = null;
            this.fontsize = Microsoft.Msagl.Drawing.Label.get_DefaultFontSize();
            this.geometryLabel = new Microsoft.Msagl.Core.Layout.Label.ctor();
            this._Owner = null;
            Microsoft.Msagl.Drawing.DrawingObject.ctor.call(this);
            this.text = textPar;
        },
        Center$$: "Microsoft.Msagl.Core.Geometry.Point",
        get_Center: function (){
            if (this.get_Owner() == null)
                return new Microsoft.Msagl.Core.Geometry.Point.ctor();
            var edge = As(this.get_Owner(), Microsoft.Msagl.Drawing.Edge.ctor);
            if (edge != null)
                return edge.get_GeometryEdge().get_Label().get_Center();
            return (Cast(this.get_Owner(), Microsoft.Msagl.Drawing.Node.ctor)).get_GeometryNode().get_Center();
        },
        Width$$: "System.Double",
        get_Width: function (){
            return this.get_GeometryLabel() == null ? this.width : this.get_GeometryLabel().get_Width();
        },
        set_Width: function (value){
            if (this.get_GeometryLabel() == null)
                this.width = value;
            else
                this.get_GeometryLabel().set_Width(value);
        },
        Height$$: "System.Double",
        get_Height: function (){
            return this.get_GeometryLabel() == null ? this.height : this.get_GeometryLabel().get_Height();
        },
        set_Height: function (value){
            if (this.get_GeometryLabel() == null)
                this.height = value;
            else
                this.get_GeometryLabel().set_Height(value);
        },
        Left$$: "System.Double",
        get_Left: function (){
            return this.get_Center().get_X() - this.get_Width() / 2;
        },
        Top$$: "System.Double",
        get_Top: function (){
            return this.get_Center().get_Y() + this.get_Height() / 2;
        },
        Right$$: "System.Double",
        get_Right: function (){
            return this.get_Center().get_X() + this.get_Width() / 2;
        },
        Bottom$$: "System.Double",
        get_Bottom: function (){
            return this.get_Center().get_Y() - this.get_Height() / 2;
        },
        LeftTop$$: "Microsoft.Msagl.Core.Geometry.Point",
        get_LeftTop: function (){
            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(this.get_Left(), this.get_Top());
        },
        RightBottom$$: "Microsoft.Msagl.Core.Geometry.Point",
        get_RightBottom: function (){
            return new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(this.get_Right(), this.get_Bottom());
        },
        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",
        get_BoundingBox: function (){
            return new Microsoft.Msagl.Core.Geometry.Rectangle.ctor$$Point$$Point(this.get_LeftTop(), this.get_RightBottom());
        },
        Size$$: "Microsoft.Msagl.Core.DataStructures.Size",
        get_Size: function (){
            return new Microsoft.Msagl.Core.DataStructures.Size.ctor$$Double$$Double(this.get_Width(), this.get_Height());
        },
        set_Size: function (value){
            this.set_Width(value.get_Width());
            this.set_Height(value.get_Height());
        },
        FontColor$$: "Microsoft.Msagl.Drawing.Color",
        get_FontColor: function (){
            return this.fontcolor;
        },
        set_FontColor: function (value){
            this.fontcolor = value;
        },
        FontStyle$$: "Microsoft.Msagl.Drawing.FontStyle",
        get_FontStyle: function (){
            return this.fontStyle;
        },
        set_FontStyle: function (value){
            this.fontStyle = value;
        },
        FontName$$: "System.String",
        get_FontName: function (){
            if (System.String.IsNullOrEmpty(this.fontName))
                return Microsoft.Msagl.Drawing.Label.get_DefaultFontName();
            else
                return this.fontName;
        },
        set_FontName: function (value){
            this.fontName = value;
        },
        Text$$: "System.String",
        get_Text: function (){
            return this.text;
        },
        set_Text: function (value){
            if (value != null)
                this.text = value.Replace$$String$$String("\\n", "\n");
            else
                this.text = "";
        },
        FontSize$$: "System.Double",
        get_FontSize: function (){
            return this.fontsize;
        },
        set_FontSize: function (value){
            this.fontsize = value;
        },
        GeometryLabel$$: "Microsoft.Msagl.Core.Layout.Label",
        get_GeometryLabel: function (){
            return this.geometryLabel;
        },
        set_GeometryLabel: function (value){
            this.geometryLabel = value;
        },
        GeometryObject$$: "Microsoft.Msagl.Core.Layout.GeometryObject",
        get_GeometryObject: function (){
            return this.get_GeometryLabel();
        },
        set_GeometryObject: function (value){
            this.set_GeometryLabel(Cast(value, Microsoft.Msagl.Core.Layout.Label.ctor));
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$Label);
var Microsoft$Msagl$Drawing$LayerConstraints = {
    fullname: "Microsoft.Msagl.Drawing.LayerConstraints",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.horizontalConstraints = new Microsoft.Msagl.Drawing.HorizontalConstraintsForLayeredLayout.ctor();
            this.verticalConstraints = new Microsoft.Msagl.Drawing.VerticalConstraintsForLayeredLayout.ctor();
            System.Object.ctor.call(this);
        },
        VerticalConstraints$$: "Microsoft.Msagl.Drawing.VerticalConstraintsForLayeredLayout",
        get_VerticalConstraints: function (){
            return this.verticalConstraints;
        },
        HorizontalConstraints$$: "Microsoft.Msagl.Drawing.HorizontalConstraintsForLayeredLayout",
        get_HorizontalConstraints: function (){
            return this.horizontalConstraints;
        },
        AddLeftRightConstraint: function (leftNode, rightNode){
            this.get_HorizontalConstraints().get_LeftRightConstraints().Insert(new System.Tuple$2.ctor(Microsoft.Msagl.Drawing.Node.ctor, Microsoft.Msagl.Drawing.Node.ctor, leftNode, rightNode));
        },
        RemoveLeftRightConstraint: function (leftNode, rightNode){
            this.get_HorizontalConstraints().get_LeftRightConstraints().Remove(new System.Tuple$2.ctor(Microsoft.Msagl.Drawing.Node.ctor, Microsoft.Msagl.Drawing.Node.ctor, leftNode, rightNode));
        },
        PinNodesToMaxLayer: function (nodes){
            for (var i = 0; i < nodes.length; i++)
                this.get_VerticalConstraints().PinNodeToMaxLayer(nodes[i]);
        },
        PinNodesToMinLayer: function (nodes){
            for (var i = 0; i < nodes.length; i++)
                this.get_VerticalConstraints().PinNodeToMinLayer(nodes[i]);
        },
        PinNodesToSameLayer: function (nodes){
            for (var i = 1; i < nodes.length; i++)
                this.get_VerticalConstraints().SameLayerConstraints.Insert(new System.Tuple$2.ctor(Microsoft.Msagl.Drawing.Node.ctor, Microsoft.Msagl.Drawing.Node.ctor, nodes[0], nodes[i]));
        },
        AddSameLayerNeighbors$$Node$Array: function (neighbors){
            this.AddSameLayerNeighbors$$IEnumerable$1$Node(new System.Collections.Generic.List$1.ctor$$IEnumerable$1(Microsoft.Msagl.Drawing.Node.ctor, neighbors));
        },
        AddSameLayerNeighbors$$IEnumerable$1$Node: function (neighbors){
            var neibs = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(Microsoft.Msagl.Drawing.Node.ctor, neighbors);
            this.get_HorizontalConstraints().AddSameLayerNeighbors(neibs);
            for (var i = 0; i < neibs.get_Count() - 1; i++)
                this.get_VerticalConstraints().SameLayerConstraints.Insert(new System.Tuple$2.ctor(Microsoft.Msagl.Drawing.Node.ctor, Microsoft.Msagl.Drawing.Node.ctor, neibs.get_Item$$Int32(i), neibs.get_Item$$Int32(i + 1)));
        },
        AddSameLayerNeighbors$$Node$$Node: function (leftNode, rightNode){
            this.get_HorizontalConstraints().AddSameLayerNeighborsPair(leftNode, rightNode);
            this.get_VerticalConstraints().SameLayerConstraints.Insert(new System.Tuple$2.ctor(Microsoft.Msagl.Drawing.Node.ctor, Microsoft.Msagl.Drawing.Node.ctor, leftNode, rightNode));
        },
        RemoveAllConstraints: function (){
            this.get_HorizontalConstraints().Clear();
            this.get_VerticalConstraints().Clear();
        },
        AddUpDownConstraint: function (upperNode, lowerNode){
            this.get_VerticalConstraints().UpDownConstraints.Insert(new System.Tuple$2.ctor(Microsoft.Msagl.Drawing.Node.ctor, Microsoft.Msagl.Drawing.Node.ctor, upperNode, lowerNode));
        },
        AddUpDownVerticalConstraint: function (upperNode, lowerNode){
            this.get_VerticalConstraints().UpDownConstraints.Insert(new System.Tuple$2.ctor(Microsoft.Msagl.Drawing.Node.ctor, Microsoft.Msagl.Drawing.Node.ctor, upperNode, lowerNode));
            this.get_HorizontalConstraints().UpDownVerticalConstraints.Insert(new System.Tuple$2.ctor(Microsoft.Msagl.Drawing.Node.ctor, Microsoft.Msagl.Drawing.Node.ctor, upperNode, lowerNode));
        },
        AddSequenceOfUpDownVerticalConstraint: function (nodes){
            for (var i = 0; i < nodes.length - 1; i++)
                this.AddUpDownVerticalConstraint(nodes[i], nodes[i + 1]);
        },
        AddUpDownVerticalConstraints: function (upDownNodes){
            for (var i = 1; i < upDownNodes.length; i++)
                this.AddUpDownVerticalConstraint(upDownNodes[i - 1], upDownNodes[i]);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$LayerConstraints);
var Microsoft$Msagl$Drawing$AddEdgeUndoAction = {
    fullname: "Microsoft.Msagl.Drawing.AddEdgeUndoAction",
    baseTypeName: "Microsoft.Msagl.Drawing.UndoRedoAction",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (viewer, edge){
            this.addedEdge = null;
            this.viewer = null;
            Microsoft.Msagl.Drawing.UndoRedoAction.ctor.call(this, viewer.get_ViewerGraph().get_DrawingGraph().get_GeometryGraph());
            this.viewer = viewer;
            this.addedEdge = edge;
        },
        Undo: function (){
            Microsoft.Msagl.Drawing.UndoRedoAction.commonPrototype.Undo.call(this);
            this.viewer.RemoveEdge(this.addedEdge, false);
        },
        Redo: function (){
            Microsoft.Msagl.Drawing.UndoRedoAction.commonPrototype.Redo.call(this);
            this.viewer.AddEdge(this.addedEdge, false);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$AddEdgeUndoAction);
var Microsoft$Msagl$Drawing$AddNodeUndoAction = {
    fullname: "Microsoft.Msagl.Drawing.AddNodeUndoAction",
    baseTypeName: "Microsoft.Msagl.Drawing.UndoRedoAction",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (graph, viewer, node){
            this.addedNode = null;
            this.viewer = null;
            Microsoft.Msagl.Drawing.UndoRedoAction.ctor.call(this, graph.get_GeometryGraph());
            this.viewer = viewer;
            this.addedNode = node;
        },
        Undo: function (){
            Microsoft.Msagl.Drawing.UndoRedoAction.commonPrototype.Undo.call(this);
            this.viewer.RemoveNode(this.addedNode, false);
        },
        Redo: function (){
            Microsoft.Msagl.Drawing.UndoRedoAction.commonPrototype.Redo.call(this);
            this.viewer.AddNode(this.addedNode, false);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$AddNodeUndoAction);
var Microsoft$Msagl$Drawing$DelegateForEdge = {
    fullname: "Microsoft.Msagl.Drawing.DelegateForEdge",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$DelegateForEdge);
var Microsoft$Msagl$Drawing$DelegateForIViewerObject = {
    fullname: "Microsoft.Msagl.Drawing.DelegateForIViewerObject",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$DelegateForIViewerObject);
var Microsoft$Msagl$Drawing$DraggingMode = {
    fullname: "Microsoft.Msagl.Drawing.DraggingMode",
    staticDefinition: {
        Default: 0,
        Incremental: 1
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$DraggingMode);
var Microsoft$Msagl$Drawing$EdgeDragUndoRedoAction = {
    fullname: "Microsoft.Msagl.Drawing.EdgeDragUndoRedoAction",
    baseTypeName: "Microsoft.Msagl.Drawing.UndoRedoAction",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (editedEdgePar){
            this.editedEdge = null;
            Microsoft.Msagl.Drawing.UndoRedoAction.ctor.call(this, Cast(editedEdgePar.get_GeometryParent(), Microsoft.Msagl.Core.Layout.GeometryGraph.ctor));
            this.editedEdge = editedEdgePar;
        },
        Undo: function (){
            this.ClearAffectedObjects();
            this.Restore();
        },
        Redo: function (){
            this.ClearAffectedObjects();
            this.Restore();
        },
        Restore: function (){
            var erd = Cast(this.GetRestoreData(this.editedEdge), Microsoft.Msagl.Prototype.LayoutEditing.EdgeRestoreData.ctor);
            this.editedEdge.set_Curve(erd.get_Curve());
            this.editedEdge.set_UnderlyingPolyline(erd.get_UnderlyingPolyline());
            if (this.editedEdge.get_EdgeGeometry().get_SourceArrowhead() != null)
                this.editedEdge.get_EdgeGeometry().get_SourceArrowhead().set_TipPosition(erd.get_ArrowheadAtSourcePosition());
            if (this.editedEdge.get_EdgeGeometry().get_TargetArrowhead() != null)
                this.editedEdge.get_EdgeGeometry().get_TargetArrowhead().set_TipPosition(erd.get_ArrowheadAtTargetPosition());
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$EdgeDragUndoRedoAction);
var Microsoft$Msagl$Drawing$GeometryGraphEditor = {
    fullname: "Microsoft.Msagl.Drawing.GeometryGraphEditor",
    baseTypeName: "System.Object",
    staticDefinition: {
        DragLabel: function (label, delta){
            label.set_Center(Microsoft.Msagl.Core.Geometry.Point.op_Addition(label.get_Center(), delta));
            var edge = As(label.get_GeometryParent(), Microsoft.Msagl.Core.Layout.Edge.ctor);
            if (edge != null){
                Microsoft.Msagl.Drawing.GeometryGraphEditor.CalculateAttachedSegmentEnd(label, edge);
                if (!Microsoft.Msagl.Core.Geometry.ApproximateComparer.Close$$Point$$Point(label.get_AttachmentSegmentEnd(), label.get_Center())){
                    var x = Microsoft.Msagl.Core.Geometry.Curves.Curve.CurveCurveIntersectionOne(label.get_BoundingBox().Perimeter(), new Microsoft.Msagl.Core.Geometry.Curves.LineSegment.ctor$$Point$$Point(label.get_AttachmentSegmentEnd(), label.get_Center()), false);
                    label.set_AttachmentSegmentStart(x != null ? x.get_IntersectionPoint() : label.get_Center());
                }
                else
                    label.set_AttachmentSegmentStart(label.get_Center());
            }
        },
        CalculateAttachedSegmentEnd: function (label, edge){
            label.set_AttachmentSegmentEnd(edge.get_Curve().get_Item$$Double(edge.get_Curve().ClosestParameter(label.get_Center())));
        },
        ShiftDragEdge: function (delta, geomObj){
            var edge = As(geomObj, Microsoft.Msagl.Core.Layout.Edge.ctor);
            if (edge != null)
                edge.Translate(delta);
            else {
                var label = As(geomObj, Microsoft.Msagl.Core.Layout.Label.ctor);
                if (label != null)
                    Microsoft.Msagl.Drawing.GeometryGraphEditor.DragLabel(label, delta);
                else
                    throw $CreateException(new System.NotImplementedException.ctor(), new Error());
            }
        },
        DragEdgeAsStraightLine: function (delta, edge){
            Microsoft.Msagl.Routing.StraightLineEdges.CreateSimpleEdgeCurveWithUnderlyingPolyline(edge);
        },
        DragEdgeWithSite: function (delta, e, site){
            e.RaiseLayoutChangeEvent(delta);
            site.set_Point(Microsoft.Msagl.Core.Geometry.Point.op_Addition(site.get_Point(), delta));
            Microsoft.Msagl.Drawing.GeometryGraphEditor.CreateCurveOnChangedPolyline(e);
        },
        CreateCurveOnChangedPolyline: function (e){
            var curve = e.get_UnderlyingPolyline().CreateCurve();
            if (!Microsoft.Msagl.Core.Layout.Arrowheads.TrimSplineAndCalculateArrowheads$$EdgeGeometry$$ICurve$$ICurve$$ICurve$$Boolean$$Boolean(e.get_EdgeGeometry(), e.get_Source().get_BoundaryCurve(), e.get_Target().get_BoundaryCurve(), curve, false, false))
                Microsoft.Msagl.Core.Layout.Arrowheads.CreateBigEnoughSpline(e);
        },
        CalculateOffsetsForMultiedges: function (node, nodeSeparation){
            var offsetsInsideOfMultiedge = new System.Collections.Generic.Dictionary$2.ctor(Microsoft.Msagl.Core.Layout.Edge.ctor, System.Double.ctor);
            var $it66 = Microsoft.Msagl.Drawing.GeometryGraphEditor.GetMultiEdges(node).GetEnumerator();
            while ($it66.MoveNext()){
                var multiedge = $it66.get_Current();
                Microsoft.Msagl.Drawing.GeometryGraphEditor.CalculateMiddleOffsetsForMultiedge(multiedge, node, offsetsInsideOfMultiedge, nodeSeparation);
            }
            return offsetsInsideOfMultiedge;
        },
        CalculateMiddleOffsetsForMultiedge: function (multiedge, node, offsetsInsideOfMultiedge, nodeSeparation){
            var middleAngles = Microsoft.Msagl.Drawing.GeometryGraphEditor.GetMiddleAnglesOfMultiedge(multiedge, node);
            var angles = new Float64Array(middleAngles.get_Count());
            var edges = new Array(middleAngles.get_Count());
            var i = 0;
            var $it67 = middleAngles.GetEnumerator();
            while ($it67.MoveNext()){
                var v = $it67.get_Current();
                angles[i] = v.get_Value();
                edges[i] = v.get_Key();
                i++;
            }
            System.Array.Sort$2$$TKey$Array$$TValue$Array(System.Double.ctor, Microsoft.Msagl.Core.Layout.Edge.ctor, angles, edges);
            var separation = nodeSeparation * 6;
            var k = (edges.length / 2) | 0;
            var even = k * 2 == edges.length;
            var off;
            if (even){
                off = -separation / 2;
                for (var j = k - 1; j >= 0; j--){
                    var edge = edges[j];
                    offsetsInsideOfMultiedge.set_Item$$TKey(edge, off);
                    off -= separation + (edge.get_Label() != null ? edge.get_Label().get_Width() : 0);
                }
                off = separation / 2;
                for (var j = k; j < edges.length; j++){
                    var edge = edges[j];
                    offsetsInsideOfMultiedge.set_Item$$TKey(edge, off);
                    off += separation + (edge.get_Label() != null ? edge.get_Label().get_Width() : 0);
                }
            }
            else {
                off = 0;
                for (var j = k; j >= 0; j--){
                    var edge = edges[j];
                    offsetsInsideOfMultiedge.set_Item$$TKey(edge, off);
                    off -= separation + (edge.get_Label() != null ? edge.get_Label().get_Width() : 0);
                }
                off = separation;
                for (var j = k + 1; j < edges.length; j++){
                    var edge = edges[j];
                    offsetsInsideOfMultiedge.set_Item$$TKey(edge, off);
                    off += separation + (edge.get_Label() != null ? edge.get_Label().get_Width() : 0);
                }
            }
        },
        GetMiddleAnglesOfMultiedge: function (multiedge, node){
            var ret = new System.Collections.Generic.Dictionary$2.ctor(Microsoft.Msagl.Core.Layout.Edge.ctor, System.Double.ctor);
            var firstEdge = multiedge.get_Item$$Int32(0);
            var a = node.get_Center();
            var b = Microsoft.Msagl.Drawing.GeometryGraphEditor.Middle(firstEdge.get_Curve());
            ret.set_Item$$TKey(firstEdge, 0);
            for (var i = 1; i < multiedge.get_Count(); i++){
                var edge = multiedge.get_Item$$Int32(i);
                var c = Microsoft.Msagl.Drawing.GeometryGraphEditor.Middle(edge.get_Curve());
                var angle = Microsoft.Msagl.Core.Geometry.Point.Angle$$Point$$Point$$Point(b, a, c);
                if (angle > 3.14159265358979)
                    angle = angle - 6.28318530717959;
                ret.set_Item$$TKey(edge, angle);
            }
            return ret;
        },
        Middle: function (iCurve){
            return iCurve.get_Item$$Double(iCurve.get_ParStart() + 0.5 * (iCurve.get_ParEnd() - iCurve.get_ParStart()));
        },
        GetMultiEdges: function (node){
            var $yield = [];
            var nodeToMultiEdge = new System.Collections.Generic.Dictionary$2.ctor(Microsoft.Msagl.Core.Layout.Node.ctor, System.Collections.Generic.List$1.ctor);
            var $it68 = node.get_OutEdges().GetEnumerator();
            while ($it68.MoveNext()){
                var edge = $it68.get_Current();
                Microsoft.Msagl.Drawing.GeometryGraphEditor.GetOrCreateListOfMultiedge(nodeToMultiEdge, edge.get_Target()).Add(edge);
            }
            var $it69 = node.get_InEdges().GetEnumerator();
            while ($it69.MoveNext()){
                var edge = $it69.get_Current();
                Microsoft.Msagl.Drawing.GeometryGraphEditor.GetOrCreateListOfMultiedge(nodeToMultiEdge, edge.get_Source()).Add(edge);
            }
            var $it70 = nodeToMultiEdge.get_Values().GetEnumerator();
            while ($it70.MoveNext()){
                var list = $it70.get_Current();
                if (list.get_Count() > 1)
                    $yield.push(list);
            }
            return $yield;
        },
        GetOrCreateListOfMultiedge: function (nodeToMultiEdge, node){
            var list;
            if ((function (){
                var $1 = {
                    Value: list
                };
                var $res = nodeToMultiEdge.TryGetValue(node, $1);
                list = $1.Value;
                return $res;
            })())
                return list;
            return (function ($p4){
                nodeToMultiEdge.set_Item$$TKey(node, $p4);
                return $p4;
            })(new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Core.Layout.Edge.ctor));
        },
        GetPreviousSite: function (edge, point){
            var prevSite = edge.get_UnderlyingPolyline().get_HeadSite();
            var nextSite = prevSite.get_Next();
            do{
                if (Microsoft.Msagl.Drawing.GeometryGraphEditor.BetweenSites(prevSite, nextSite, point))
                    return prevSite;
                prevSite = nextSite;
                nextSite = nextSite.get_Next();
            }
            while (nextSite != null)
            return null;
        },
        BetweenSites: function (prevSite, nextSite, point){
            var par = Microsoft.Msagl.Core.Geometry.Point.ClosestParameterOnLineSegment(point, prevSite.get_Point(), nextSite.get_Point());
            return par > 0.1 && par < 0.9;
        },
        FindCornerForEdit: function (underlyingPolyline, mousePoint, tolerance){
            var site = underlyingPolyline.get_HeadSite().get_Next();
            tolerance *= tolerance;
            do{
                if (site.get_Previous() == null || site.get_Next() == null)
                    continue;
                var diff = Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(mousePoint, site.get_Point());
                if (Microsoft.Msagl.Core.Geometry.Point.op_Multiply$$Point$$Point(diff, diff) <= tolerance)
                    return site;
                site = site.get_Next();
            }
            while (site.get_Next() != null)
            return null;
        },
        FindClosestCornerForEdit: function (underlyingPolyline, mousePoint){
            var site = underlyingPolyline.get_HeadSite().get_Next();
            var bestSite = site;
            var dist = (Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(bestSite.get_Point(), mousePoint)).get_LengthSquared();
            while (site.get_Next() != null){
                site = site.get_Next();
                var d = (Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(mousePoint, site.get_Point())).get_LengthSquared();
                if (d < dist){
                    bestSite = site;
                    dist = d;
                }
            }
            return bestSite;
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.edgesDraggedWithSource = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Core.Layout.Edge.ctor);
            this.edgesDraggedWithTarget = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Core.Layout.Edge.ctor);
            this.graph = null;
            this.layoutSettings = null;
            this.objectsToDrag = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Core.Layout.GeometryObject.ctor);
            this.undoRedoActionsList = new Microsoft.Msagl.Drawing.UndoRedoActionsList.ctor();
            this.undoMode = true;
            this.incrementalDragger = null;
            this.ChangeInUndoRedoList = null;
            this._GraphBoundingBoxGetsExtended = false;
            this._LgLayoutSettings = null;
            this._EditedEdge = null;
            System.Object.ctor.call(this);
        },
        UndoRedoActionsList$$: "Microsoft.Msagl.Drawing.UndoRedoActionsList",
        get_UndoRedoActionsList: function (){
            return this.undoRedoActionsList;
        },
        set_UndoRedoActionsList: function (value){
            this.undoRedoActionsList = value;
        },
        CurrentUndoAction$$: "Microsoft.Msagl.Drawing.UndoRedoAction",
        get_CurrentUndoAction: function (){
            return this.get_UndoRedoActionsList().get_CurrentUndo();
        },
        CurrentRedoAction$$: "Microsoft.Msagl.Drawing.UndoRedoAction",
        get_CurrentRedoAction: function (){
            return this.get_UndoRedoActionsList().get_CurrentRedo();
        },
        GraphBoundingBoxGetsExtended$$: "System.Boolean",
        get_GraphBoundingBoxGetsExtended: function (){
            return this._GraphBoundingBoxGetsExtended;
        },
        set_GraphBoundingBoxGetsExtended: function (value){
            this._GraphBoundingBoxGetsExtended = value;
        },
        Graph$$: "Microsoft.Msagl.Core.Layout.GeometryGraph",
        get_Graph: function (){
            return this.graph;
        },
        set_Graph: function (value){
            this.graph = value;
            this.Clear();
            this.RaiseChangeInUndoList();
        },
        LayoutSettings$$: "Microsoft.Msagl.Core.Layout.LayoutAlgorithmSettings",
        get_LayoutSettings: function (){
            return this.layoutSettings;
        },
        set_LayoutSettings: function (value){
            this.layoutSettings = value;
            this.set_LgLayoutSettings(As(this.layoutSettings, Microsoft.Msagl.Layout.LargeGraphLayout.LgLayoutSettings.ctor));
        },
        LgLayoutSettings$$: "Microsoft.Msagl.Layout.LargeGraphLayout.LgLayoutSettings",
        get_LgLayoutSettings: function (){
            return this._LgLayoutSettings;
        },
        set_LgLayoutSettings: function (value){
            this._LgLayoutSettings = value;
        },
        EdgeRoutingMode$$: "Microsoft.Msagl.Core.Routing.EdgeRoutingMode",
        get_EdgeRoutingMode: function (){
            return this.get_LayoutSettings().get_EdgeRoutingSettings().get_EdgeRoutingMode();
        },
        EditedEdge$$: "Microsoft.Msagl.Core.Layout.Edge",
        get_EditedEdge: function (){
            return this._EditedEdge;
        },
        set_EditedEdge: function (value){
            this._EditedEdge = value;
        },
        ObjectsToDrag$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Core.Layout.GeometryObject]]",
        get_ObjectsToDrag: function (){
            return this.objectsToDrag;
        },
        CanUndo$$: "System.Boolean",
        get_CanUndo: function (){
            return this.get_UndoRedoActionsList().get_CurrentUndo() != null;
        },
        CanRedo$$: "System.Boolean",
        get_CanRedo: function (){
            return this.get_UndoRedoActionsList().get_CurrentRedo() != null;
        },
        UndoMode$$: "System.Boolean",
        get_UndoMode: function (){
            return this.undoMode;
        },
        set_UndoMode: function (value){
            this.undoMode = value;
        },
        add_ChangeInUndoRedoList: function (value){
            this.ChangeInUndoRedoList = $CombineDelegates(this.ChangeInUndoRedoList, value);
        },
        remove_ChangeInUndoRedoList: function (value){
            this.ChangeInUndoRedoList = $RemoveDelegate(this.ChangeInUndoRedoList, value);
        },
        Drag: function (delta, draggingMode, lastMousePosition){
            this.set_GraphBoundingBoxGetsExtended(false);
            if (delta.get_X() != 0 || delta.get_Y() != 0){
                if (this.get_EditedEdge() == null)if (this.get_EdgeRoutingMode() != Microsoft.Msagl.Core.Routing.EdgeRoutingMode.Rectilinear && this.get_EdgeRoutingMode() != Microsoft.Msagl.Core.Routing.EdgeRoutingMode.RectilinearToCenter)
                    this.DragObjectsForNonRectilinearCase(delta, draggingMode);
                else
                    this.DragObjectsForRectilinearCase(delta);
                else {
                    this.DragEdgeEdit(lastMousePosition, delta);
                    this.UpdateGraphBoundingBoxWithCheck$$GeometryObject(this.get_EditedEdge());
                }
            }
        },
        DragObjectsForRectilinearCase: function (delta){
            var $it46 = System.Linq.Enumerable.Where$1$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Layout.GeometryObject.ctor, this.objectsToDrag, $CreateAnonymousDelegate(this, function (n){
                return Is(n, Microsoft.Msagl.Core.Layout.Node.ctor);
            })).GetEnumerator();
            while ($it46.MoveNext()){
                var node = $it46.get_Current();
                node.set_Center(Microsoft.Msagl.Core.Geometry.Point.op_Addition(node.get_Center(), delta));
            }
            Microsoft.Msagl.Routing.Rectilinear.RectilinearInteractiveEditor.CreatePortsAndRouteEdges$$Double$$Double$$IEnumerable$1$Node$$IEnumerable$1$Edge$$EdgeRoutingMode$$Boolean$$Boolean$$Double(this.get_LayoutSettings().get_NodeSeparation() / 3, 1, this.graph.get_Nodes(), this.graph.get_Edges(), this.get_LayoutSettings().get_EdgeRoutingSettings().get_EdgeRoutingMode(), true, this.get_LayoutSettings().get_EdgeRoutingSettings().get_UseObstacleRectangles(), this.get_LayoutSettings().get_EdgeRoutingSettings().get_BendPenalty());
            var labelPlacer = new Microsoft.Msagl.Core.Layout.EdgeLabelPlacement.ctor$$GeometryGraph(this.graph);
            labelPlacer.Run();
            var $it47 = this.get_Graph().get_Edges().GetEnumerator();
            while ($it47.MoveNext()){
                var e = $it47.get_Current();
                this.UpdateGraphBoundingBoxWithCheck$$GeometryObject(e);
            }
            var $it48 = this.get_Graph().get_Nodes().GetEnumerator();
            while ($it48.MoveNext()){
                var n = $it48.get_Current();
                this.UpdateGraphBoundingBoxWithCheck$$GeometryObject(n);
            }
        },
        DragObjectsForNonRectilinearCase: function (delta, draggingMode){
            if (draggingMode == Microsoft.Msagl.Drawing.DraggingMode.Incremental)
                this.DragIncrementally(delta);
            else if (this.get_EdgeRoutingMode() == Microsoft.Msagl.Core.Routing.EdgeRoutingMode.Spline || this.get_EdgeRoutingMode() == Microsoft.Msagl.Core.Routing.EdgeRoutingMode.SplineBundling)
                this.DragWithSplinesOrBundles(delta);
            else
                this.DragWithStraightLines(delta);
        },
        DragWithStraightLines: function (delta){
            var $it49 = this.objectsToDrag.GetEnumerator();
            while ($it49.MoveNext()){
                var geomObj = $it49.get_Current();
                var node = As(geomObj, Microsoft.Msagl.Core.Layout.Node.ctor);
                if (node != null){
                    node.set_Center(Microsoft.Msagl.Core.Geometry.Point.op_Addition(node.get_Center(), delta));
                    var cl = As(node, Microsoft.Msagl.Core.Layout.Cluster.ctor);
                    if (cl != null){
                        cl.DeepContentsTranslation(delta, false);
                        cl.get_RectangularBoundary().TranslateRectangle(delta);
                    }
                }
                else
                    Microsoft.Msagl.Drawing.GeometryGraphEditor.ShiftDragEdge(delta, geomObj);
                this.UpdateGraphBoundingBoxWithCheck$$GeometryObject(geomObj);
            }
            this.PropagateChangesToClusterParents();
            this.DragEdgesAsStraighLines(delta);
        },
        PropagateChangesToClusterParents: function (){
            var touchedClusters = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Core.Layout.Cluster.ctor);
            var $it50 = this.objectsToDrag.GetEnumerator();
            while ($it50.MoveNext()){
                var n = $it50.get_Current();
                var node = As(n, Microsoft.Msagl.Core.Layout.Node.ctor);
                if (node == null)
                    continue;
                var $it51 = node.get_AllClusterAncestors().GetEnumerator();
                while ($it51.MoveNext()){
                    var c = $it51.get_Current();
                    if (c != this.graph.get_RootCluster() && !this.objectsToDrag.Contains$$T(c))
                        touchedClusters.Insert(c);
                }
            }
            if (System.Linq.Enumerable.Any$1$$IEnumerable$1(Microsoft.Msagl.Core.Layout.Cluster.ctor, touchedClusters)){
                var $it52 = this.graph.get_RootCluster().AllClustersDepthFirstExcludingSelf().GetEnumerator();
                while ($it52.MoveNext()){
                    var c = $it52.get_Current();
                    if (touchedClusters.Contains$$T(c))
                        c.CalculateBoundsFromChildren(this.layoutSettings.get_ClusterMargin());
                }
            }
        },
        DragWithSplinesOrBundles: function (delta){
            var $it53 = this.objectsToDrag.GetEnumerator();
            while ($it53.MoveNext()){
                var geomObj = $it53.get_Current();
                var node = As(geomObj, Microsoft.Msagl.Core.Layout.Node.ctor);
                if (node != null)
                    node.set_Center(Microsoft.Msagl.Core.Geometry.Point.op_Addition(node.get_Center(), delta));
            }
            this.RunSplineRouterAndPutLabels();
        },
        RunSplineRouterAndPutLabels: function (){
            var router = new Microsoft.Msagl.Routing.SplineRouter.ctor$$GeometryGraph$$Double$$Double$$Double$$BundlingSettings(this.graph, this.get_LayoutSettings().get_EdgeRoutingSettings().get_Padding(), this.get_LayoutSettings().get_EdgeRoutingSettings().get_PolylinePadding(), this.get_LayoutSettings().get_EdgeRoutingSettings().get_ConeAngle(), this.get_LayoutSettings().get_EdgeRoutingSettings().get_BundlingSettings());
            router.Run();
            var elp = new Microsoft.Msagl.Core.Layout.EdgeLabelPlacement.ctor$$GeometryGraph(this.graph);
            elp.Run();
            this.UpdateGraphBoundingBoxWithCheck();
        },
        DragEdgesAsStraighLines: function (delta){
            var $it54 = this.edgesDraggedWithSource.GetEnumerator();
            while ($it54.MoveNext()){
                var edge = $it54.get_Current();
                Microsoft.Msagl.Drawing.GeometryGraphEditor.DragEdgeAsStraightLine(delta, edge);
            }
            var $it55 = this.edgesDraggedWithTarget.GetEnumerator();
            while ($it55.MoveNext()){
                var edge = $it55.get_Current();
                Microsoft.Msagl.Drawing.GeometryGraphEditor.DragEdgeAsStraightLine(delta, edge);
            }
            var ep = new Microsoft.Msagl.Core.Layout.EdgeLabelPlacement.ctor$$IEnumerable$1$Node$$IEnumerable$1$Edge(this.graph.get_Nodes(), System.Linq.Enumerable.Union$1$$IEnumerable$1$$IEnumerable$1(Microsoft.Msagl.Core.Layout.Edge.ctor, this.edgesDraggedWithSource, this.edgesDraggedWithTarget));
            ep.Run();
        },
        UpdateGraphBoundingBoxWithCheck: function (){
            var $it56 = this.graph.get_Nodes().GetEnumerator();
            while ($it56.MoveNext()){
                var node = $it56.get_Current();
                this.UpdateGraphBoundingBoxWithCheck$$GeometryObject(node);
            }
            var $it57 = this.graph.get_Edges().GetEnumerator();
            while ($it57.MoveNext()){
                var edge = $it57.get_Current();
                this.UpdateGraphBoundingBoxWithCheck$$GeometryObject(edge);
            }
        },
        DragIncrementally: function (delta){
            var box = this.graph.get_BoundingBox();
            if (this.incrementalDragger == null)
                this.InitIncrementalDragger();
            this.incrementalDragger.Drag(delta);
            this.set_GraphBoundingBoxGetsExtended(Microsoft.Msagl.Core.Geometry.Rectangle.op_Inequality(box, this.graph.get_BoundingBox()));
        },
        DragEdgeEdit: function (lastMousePosition, delta){
            this.get_EditedEdge().RaiseLayoutChangeEvent(delta);
            var site = Microsoft.Msagl.Drawing.GeometryGraphEditor.FindClosestCornerForEdit(this.get_EditedEdge().get_UnderlyingPolyline(), lastMousePosition);
            site.set_Point(Microsoft.Msagl.Core.Geometry.Point.op_Addition(site.get_Point(), delta));
            Microsoft.Msagl.Drawing.GeometryGraphEditor.CreateCurveOnChangedPolyline(this.get_EditedEdge());
        },
        PrepareForObjectDragging: function (markedObjects, dragMode){
            this.set_EditedEdge(null);
            this.CalculateDragSets(markedObjects);
            this.InsertToListAndSetTheBoxBefore(new Microsoft.Msagl.Drawing.ObjectDragUndoRedoAction.ctor(this.graph));
            if (dragMode == Microsoft.Msagl.Drawing.DraggingMode.Incremental)
                this.InitIncrementalDragger();
        },
        InitIncrementalDragger: function (){
            this.incrementalDragger = new Microsoft.Msagl.Miscellaneous.LayoutEditing.IncrementalDragger.ctor(System.Linq.Enumerable.ToArray$1(Microsoft.Msagl.Core.Layout.Node.ctor, System.Linq.Enumerable.OfType$1(Microsoft.Msagl.Core.Layout.Node.ctor, this.objectsToDrag)), this.graph, this.layoutSettings);
        },
        ClearDraggedSets: function (){
            this.objectsToDrag.Clear();
            this.edgesDraggedWithSource.Clear();
            this.edgesDraggedWithTarget.Clear();
        },
        CalculateDragSets: function (markedObjects){
            this.ClearDraggedSets();
            var $it58 = markedObjects.GetEnumerator();
            while ($it58.MoveNext()){
                var geometryObject = $it58.get_Current();
                this.objectsToDrag.Insert(geometryObject);
                var edge = As(geometryObject, Microsoft.Msagl.Core.Layout.Edge.ctor);
                if (edge != null){
                    this.objectsToDrag.Insert(edge.get_Source());
                    this.objectsToDrag.Insert(edge.get_Target());
                }
            }
            this.RemoveClusterSuccessorsFromObjectsToDrag();
            this.CalculateDragSetsForEdges();
        },
        RemoveClusterSuccessorsFromObjectsToDrag: function (){
            var listToRemove = new System.Collections.Generic.List$1.ctor(Microsoft.Msagl.Core.Layout.Node.ctor);
            var $it59 = System.Linq.Enumerable.OfType$1(Microsoft.Msagl.Core.Layout.Node.ctor, this.objectsToDrag).GetEnumerator();
            while ($it59.MoveNext()){
                var node = $it59.get_Current();
                if (System.Linq.Enumerable.Any$1$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Layout.Cluster.ctor, node.get_AllClusterAncestors(), $CreateAnonymousDelegate(this, function (anc){
                    return this.objectsToDrag.Contains$$T(anc);
                })))
                    listToRemove.Add(node);
            }
            var $it60 = listToRemove.GetEnumerator();
            while ($it60.MoveNext()){
                var node = $it60.get_Current();
                this.objectsToDrag.Remove(node);
            }
        },
        UpdateGraphBoundingBoxWithCheck$$GeometryObject: function (geomObj){
            var cl = As(geomObj, Microsoft.Msagl.Core.Layout.Cluster.ctor);
            var bBox = cl != null ? cl.get_BoundaryCurve().get_BoundingBox() : geomObj.get_BoundingBox();
            var edge = As(geomObj, Microsoft.Msagl.Core.Layout.Edge.ctor);
            if (edge != null && edge.get_Label() != null)
                bBox.Add$$Rectangle(edge.get_Label().get_BoundingBox());
            var p = new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(-this.get_Graph().get_Margins(), this.get_Graph().get_Margins());
            var bounds = this.get_Graph().get_BoundingBox();
            this.get_GraphBoundingBoxGetsExtended() |= bounds.AddWithCheck(Microsoft.Msagl.Core.Geometry.Point.op_Addition(bBox.get_LeftTop(), p));
            this.get_GraphBoundingBoxGetsExtended() |= bounds.AddWithCheck(Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(bBox.get_RightBottom(), p));
            this.get_Graph().set_BoundingBox(bounds);
        },
        CalculateDragSetsForEdges: function (){
            var $it61 = this.objectsToDrag.Clone().GetEnumerator();
            while ($it61.MoveNext()){
                var geomObj = $it61.get_Current();
                var node = As(geomObj, Microsoft.Msagl.Core.Layout.Node.ctor);
                if (node != null)
                    this.AssignEdgesOfNodeToEdgeDragSets(node);
            }
        },
        AssignEdgesOfNodeToEdgeDragSets: function (node){
            var $it62 = node.get_SelfEdges().GetEnumerator();
            while ($it62.MoveNext()){
                var edge = $it62.get_Current();
                this.objectsToDrag.Insert(edge);
            }
            var $it63 = node.get_InEdges().GetEnumerator();
            while ($it63.MoveNext()){
                var edge = $it63.get_Current();
                if (this.objectsToDrag.Contains$$T(edge.get_Source()) || System.Linq.Enumerable.Any$1$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Layout.Cluster.ctor, edge.get_Source().get_ClusterParents(), $CreateAnonymousDelegate(this, function (p){
                    return this.objectsToDrag.Contains$$T(p);
                })))
                    this.objectsToDrag.Insert(edge);
                else
                    this.edgesDraggedWithTarget.Insert(edge);
            }
            var $it64 = node.get_OutEdges().GetEnumerator();
            while ($it64.MoveNext()){
                var edge = $it64.get_Current();
                if (this.objectsToDrag.Contains$$T(edge.get_Target()) || System.Linq.Enumerable.Any$1$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Layout.Cluster.ctor, edge.get_Target().get_ClusterParents(), $CreateAnonymousDelegate(this, function (p){
                    return this.objectsToDrag.Contains$$T(p);
                })))
                    this.objectsToDrag.Insert(edge);
                else
                    this.edgesDraggedWithSource.Insert(edge);
            }
            Microsoft.Msagl.Drawing.GeometryGraphEditor.CalculateOffsetsForMultiedges(node, this.get_LayoutSettings().get_NodeSeparation());
            var cl = As(node, Microsoft.Msagl.Core.Layout.Cluster.ctor);
            if (cl != null){
                var $it65 = cl.AllSuccessorsWidthFirst().GetEnumerator();
                while ($it65.MoveNext()){
                    var n = $it65.get_Current();
                    this.AssignEdgesOfNodeToEdgeDragSets(n);
                }
            }
        },
        InsertToListAndSetTheBoxBefore: function (action){
            this.get_UndoRedoActionsList().AddAction(action);
            action.set_GraphBoundingBoxBefore(action.get_Graph().get_BoundingBox());
            this.RaiseChangeInUndoList();
            return action;
        },
        RaiseChangeInUndoList: function (){
            if (this.ChangeInUndoRedoList != null)
                this.ChangeInUndoRedoList(this, null);
        },
        PrepareForEdgeCornerDragging: function (geometryEdge, site){
            this.set_EditedEdge(geometryEdge);
            var edgeDragUndoRedoAction = this.CreateEdgeEditUndoRedoAction();
            return this.InsertToListAndSetTheBoxBefore(edgeDragUndoRedoAction);
        },
        PrepareForPolylineCornerRemoval: function (affectedEdge, site){
            var action = (function (){
                var $v12 = new Microsoft.Msagl.Drawing.SiteRemoveUndoAction.ctor(this.get_EditedEdge());
                $v12.set_RemovedSite(site);
                return $v12;
            }).call(this);
            action.AddAffectedObject(affectedEdge);
            return this.InsertToListAndSetTheBoxBefore(action);
        },
        PrepareForPolylineCornerInsertion: function (affectedObj, site){
            var action = (function (){
                var $v13 = new Microsoft.Msagl.Drawing.SiteInsertUndoAction.ctor(this.get_EditedEdge());
                $v13.set_InsertedSite(site);
                return $v13;
            }).call(this);
            action.AddAffectedObject(affectedObj);
            return this.InsertToListAndSetTheBoxBefore(action);
        },
        CreateEdgeEditUndoRedoAction: function (){
            return new Microsoft.Msagl.Drawing.EdgeDragUndoRedoAction.ctor(this.get_EditedEdge());
        },
        Undo: function (){
            if (this.get_CanUndo()){
                this.get_UndoRedoActionsList().get_CurrentUndo().Undo();
                this.get_UndoRedoActionsList().set_CurrentRedo(this.get_UndoRedoActionsList().get_CurrentUndo());
                this.get_UndoRedoActionsList().set_CurrentUndo(this.get_UndoRedoActionsList().get_CurrentUndo().get_Previous());
                this.RaiseChangeInUndoList();
            }
        },
        Redo: function (){
            if (this.get_CanRedo()){
                this.get_UndoRedoActionsList().get_CurrentRedo().Redo();
                this.get_UndoRedoActionsList().set_CurrentUndo(this.get_UndoRedoActionsList().get_CurrentRedo());
                this.get_UndoRedoActionsList().set_CurrentRedo(this.get_UndoRedoActionsList().get_CurrentRedo().get_Next());
                this.RaiseChangeInUndoList();
            }
        },
        Clear: function (){
            this.objectsToDrag = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Core.Layout.GeometryObject.ctor);
            this.edgesDraggedWithSource.Clear();
            this.edgesDraggedWithTarget.Clear();
            this.set_UndoRedoActionsList(new Microsoft.Msagl.Drawing.UndoRedoActionsList.ctor());
            this.set_EditedEdge(null);
        },
        InsertSite: function (edge, point, siteBeforeInsertion, affectedEntity){
            this.set_EditedEdge(edge);
            var first = siteBeforeInsertion;
            var second = first.get_Next();
            var s = new Microsoft.Msagl.Core.Geometry.Site.ctor$$Site$$Point$$Site(first, point, second);
            this.PrepareForPolylineCornerInsertion(affectedEntity, s);
            Microsoft.Msagl.Drawing.GeometryGraphEditor.DragEdgeWithSite(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0, 0), edge, s);
        },
        DeleteSite: function (edge, site, userData){
            this.set_EditedEdge(edge);
            this.PrepareForPolylineCornerRemoval(userData, site);
            site.get_Previous().set_Next(site.get_Next());
            site.get_Next().set_Previous(site.get_Previous());
            Microsoft.Msagl.Drawing.GeometryGraphEditor.DragEdgeWithSite(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0, 0), edge, site.get_Previous());
        },
        FitGraphBoundingBox: function (affectedEntity, geometryGraph){
            if (geometryGraph != null){
                var uAction = (function (){
                    var $v14 = new Microsoft.Msagl.Drawing.UndoRedoAction.ctor(geometryGraph);
                    $v14.set_Graph(geometryGraph);
                    return $v14;
                }).call(this);
                this.get_UndoRedoActionsList().AddAction(uAction);
                var r = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor();
                var $it71 = geometryGraph.get_Nodes().GetEnumerator();
                while ($it71.MoveNext()){
                    var n = $it71.get_Current();
                    r = n.get_BoundingBox();
                    break;
                }
                var $it72 = geometryGraph.get_Nodes().GetEnumerator();
                while ($it72.MoveNext()){
                    var n = $it72.get_Current();
                    r.Add$$Rectangle(n.get_BoundingBox());
                }
                var $it73 = geometryGraph.get_Edges().GetEnumerator();
                while ($it73.MoveNext()){
                    var e = $it73.get_Current();
                    r.Add$$Rectangle(e.get_BoundingBox());
                    if (e.get_Label() != null)
                        r.Add$$Rectangle(e.get_Label().get_BoundingBox());
                }
                r.set_Left(r.get_Left() - geometryGraph.get_Margins());
                r.set_Top(r.get_Top() + geometryGraph.get_Margins());
                r.set_Bottom(r.get_Bottom() - geometryGraph.get_Margins());
                r.set_Right(r.get_Right() + geometryGraph.get_Margins());
                uAction.ClearAffectedObjects();
                uAction.AddAffectedObject(affectedEntity);
                uAction.set_GraphBoundingBoxAfter((function ($p5){
                    geometryGraph.set_BoundingBox($p5);
                    return $p5;
                }).call(this, r));
            }
        },
        OnDragEnd: function (delta){
            if (this.get_CurrentUndoAction() != null){
                var action = this.get_CurrentUndoAction();
                action.set_GraphBoundingBoxAfter(action.get_Graph().get_BoundingBox());
            }
        },
        ReactOnViewChange: function (){
            this.get_LgLayoutSettings().get_Interactor().RunOnViewChange();
        },
        ForgetDragging: function (){
            this.incrementalDragger = null;
        },
        PrepareForClusterCollapseChange: function (changedClusters){
            this.InsertToListAndSetTheBoxBefore(new Microsoft.Msagl.Drawing.ClustersCollapseExpandUndoRedoAction.ctor(this.graph));
            var $it74 = changedClusters.GetEnumerator();
            while ($it74.MoveNext()){
                var iCluster = $it74.get_Current();
                this.get_CurrentUndoAction().AddAffectedObject(iCluster);
            }
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$GeometryGraphEditor);
var Microsoft$Msagl$Drawing$ClustersCollapseExpandUndoRedoAction = {
    fullname: "Microsoft.Msagl.Drawing.ClustersCollapseExpandUndoRedoAction",
    baseTypeName: "Microsoft.Msagl.Drawing.UndoRedoAction",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (geometryGraph){
            Microsoft.Msagl.Drawing.UndoRedoAction.ctor.call(this, geometryGraph);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$ClustersCollapseExpandUndoRedoAction);
var Microsoft$Msagl$Drawing$IEditableObject = {
    fullname: "Microsoft.Msagl.Drawing.IEditableObject",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Interface"
};
JsTypes.push(Microsoft$Msagl$Drawing$IEditableObject);
var Microsoft$Msagl$Drawing$ILabeledObject = {
    fullname: "Microsoft.Msagl.Drawing.ILabeledObject",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Interface"
};
JsTypes.push(Microsoft$Msagl$Drawing$ILabeledObject);
var Microsoft$Msagl$Drawing$IViewer = {
    fullname: "Microsoft.Msagl.Drawing.IViewer",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Interface"
};
JsTypes.push(Microsoft$Msagl$Drawing$IViewer);
var Microsoft$Msagl$Drawing$IViewerEdge = {
    fullname: "Microsoft.Msagl.Drawing.IViewerEdge",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    interfaceNames: ["Microsoft.Msagl.Drawing.IViewerObject"],
    Kind: "Interface"
};
JsTypes.push(Microsoft$Msagl$Drawing$IViewerEdge);
var Microsoft$Msagl$Drawing$IViewerGraph = {
    fullname: "Microsoft.Msagl.Drawing.IViewerGraph",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Interface"
};
JsTypes.push(Microsoft$Msagl$Drawing$IViewerGraph);
var Microsoft$Msagl$Drawing$IViewerNode = {
    fullname: "Microsoft.Msagl.Drawing.IViewerNode",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    interfaceNames: ["Microsoft.Msagl.Drawing.IViewerObject"],
    Kind: "Interface"
};
JsTypes.push(Microsoft$Msagl$Drawing$IViewerNode);
var Microsoft$Msagl$Drawing$IViewerObject = {
    fullname: "Microsoft.Msagl.Drawing.IViewerObject",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Interface"
};
JsTypes.push(Microsoft$Msagl$Drawing$IViewerObject);
var Microsoft$Msagl$Drawing$MouseAndKeysAnalyzer = {
    fullname: "Microsoft.Msagl.Drawing.MouseAndKeysAnalyzer",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$MouseAndKeysAnalyzer);
var Microsoft$Msagl$Drawing$NewNodeFactory = {
    fullname: "Microsoft.Msagl.Drawing.NewNodeFactory",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$NewNodeFactory);
var Microsoft$Msagl$Drawing$ObjectDragUndoRedoAction = {
    fullname: "Microsoft.Msagl.Drawing.ObjectDragUndoRedoAction",
    baseTypeName: "Microsoft.Msagl.Drawing.UndoRedoAction",
    staticDefinition: {
        RestoreOnKevValue: function (kv){
            if (kv.get_Value().Action != null){
                kv.get_Value().Action();
                return;
            }
            var geomObj = kv.get_Key();
            var node = As(geomObj, Microsoft.Msagl.Core.Layout.Node.ctor);
            if (node != null){
                node.set_BoundaryCurve((Cast(kv.get_Value(), Microsoft.Msagl.Prototype.LayoutEditing.NodeRestoreData.ctor)).get_BoundaryCurve());
            }
            else {
                var edge = As(geomObj, Microsoft.Msagl.Core.Layout.Edge.ctor);
                if (edge != null){
                    var erd = Cast(kv.get_Value(), Microsoft.Msagl.Prototype.LayoutEditing.EdgeRestoreData.ctor);
                    edge.get_EdgeGeometry().set_Curve(erd.get_Curve());
                    edge.set_UnderlyingPolyline(erd.get_UnderlyingPolyline());
                    if (edge.get_EdgeGeometry().get_SourceArrowhead() != null)
                        edge.get_EdgeGeometry().get_SourceArrowhead().set_TipPosition(erd.get_ArrowheadAtSourcePosition());
                    if (edge.get_EdgeGeometry().get_TargetArrowhead() != null)
                        edge.get_EdgeGeometry().get_TargetArrowhead().set_TipPosition(erd.get_ArrowheadAtTargetPosition());
                }
                else {
                    var label = As(geomObj, Microsoft.Msagl.Core.Layout.Label.ctor);
                    if (label != null){
                        var lrd = Cast(kv.get_Value(), Microsoft.Msagl.Prototype.LayoutEditing.LabelRestoreData.ctor);
                        label.set_Center(lrd.get_Center());
                    }
                    else
                        throw $CreateException(new System.NotImplementedException.ctor(), new Error());
                }
            }
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (geometryGraph){
            this._BoundingBoxChanges = false;
            Microsoft.Msagl.Drawing.UndoRedoAction.ctor.call(this, geometryGraph);
        },
        BoundingBoxChanges$$: "System.Boolean",
        get_BoundingBoxChanges: function (){
            return this._BoundingBoxChanges;
        },
        set_BoundingBoxChanges: function (value){
            this._BoundingBoxChanges = value;
        },
        Undo: function (){
            Microsoft.Msagl.Drawing.UndoRedoAction.commonPrototype.Undo.call(this);
            this.ClearAffectedObjects();
            var restDictionary = this.CloneRestoreDictionary();
            var $it75 = restDictionary.GetEnumerator();
            while ($it75.MoveNext()){
                var kv = $it75.get_Current();
                Microsoft.Msagl.Drawing.ObjectDragUndoRedoAction.RestoreOnKevValue(kv);
            }
        },
        CloneRestoreDictionary: function (){
            return new System.Collections.Generic.Dictionary$2.ctor$$IDictionary$2(Microsoft.Msagl.Core.Layout.GeometryObject.ctor, Microsoft.Msagl.Prototype.LayoutEditing.RestoreData.ctor, this.restoreDataDictionary);
        },
        Redo: function (){
            Microsoft.Msagl.Drawing.UndoRedoAction.commonPrototype.Redo.call(this);
            this.ClearAffectedObjects();
            var dict = this.CloneRestoreDictionary();
            var $it76 = dict.GetEnumerator();
            while ($it76.MoveNext()){
                var restoreData = $it76.get_Current();
                Microsoft.Msagl.Drawing.ObjectDragUndoRedoAction.RestoreOnKevValue(restoreData);
            }
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$ObjectDragUndoRedoAction);
var Microsoft$Msagl$Drawing$ObjectUnderMouseCursorChangedEventArgs = {
    fullname: "Microsoft.Msagl.Drawing.ObjectUnderMouseCursorChangedEventArgs",
    baseTypeName: "System.EventArgs",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor$$IViewerObject$$IViewerObject: function (oldObject, newObject){
            this.oldObject = null;
            this.newObject = null;
            System.EventArgs.ctor.call(this);
            this.set_OldObject(oldObject);
            this.set_NewObject(newObject);
        },
        OldObject$$: "Microsoft.Msagl.Drawing.IViewerObject",
        get_OldObject: function (){
            return this.oldObject;
        },
        set_OldObject: function (value){
            this.oldObject = value;
        },
        NewObject$$: "Microsoft.Msagl.Drawing.IViewerObject",
        get_NewObject: function (){
            return this.newObject;
        },
        set_NewObject: function (value){
            this.newObject = value;
        },
        ctor: function (){
            this.oldObject = null;
            this.newObject = null;
            System.EventArgs.ctor.call(this);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$ObjectUnderMouseCursorChangedEventArgs);
var Microsoft$Msagl$Drawing$PolylineCornerType = {
    fullname: "Microsoft.Msagl.Drawing.PolylineCornerType",
    staticDefinition: {
        PreviousCornerForInsertion: 0,
        CornerToDelete: 1
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$PolylineCornerType);
var Microsoft$Msagl$Drawing$RemoveEdgeUndoAction = {
    fullname: "Microsoft.Msagl.Drawing.RemoveEdgeUndoAction",
    baseTypeName: "Microsoft.Msagl.Drawing.UndoRedoAction",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (graph, viewer, edge){
            this.viewer = null;
            this.removedEdge = null;
            Microsoft.Msagl.Drawing.UndoRedoAction.ctor.call(this, graph.get_GeometryGraph());
            this.viewer = viewer;
            this.removedEdge = edge;
            this.set_GraphBoundingBoxAfter(graph.get_BoundingBox());
        },
        Undo: function (){
            Microsoft.Msagl.Drawing.UndoRedoAction.commonPrototype.Undo.call(this);
            this.viewer.AddEdge(this.removedEdge, false);
        },
        Redo: function (){
            Microsoft.Msagl.Drawing.UndoRedoAction.commonPrototype.Redo.call(this);
            this.viewer.RemoveEdge(this.removedEdge, false);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$RemoveEdgeUndoAction);
var Microsoft$Msagl$Drawing$RemoveNodeUndoAction = {
    fullname: "Microsoft.Msagl.Drawing.RemoveNodeUndoAction",
    baseTypeName: "Microsoft.Msagl.Drawing.UndoRedoAction",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (viewer, node){
            this.removedNode = null;
            this.viewer = null;
            Microsoft.Msagl.Drawing.UndoRedoAction.ctor.call(this, viewer.get_ViewerGraph().get_DrawingGraph().get_GeometryGraph());
            this.viewer = viewer;
            this.removedNode = node;
            this.set_GraphBoundingBoxAfter(viewer.get_ViewerGraph().get_DrawingGraph().get_BoundingBox());
        },
        Undo: function (){
            Microsoft.Msagl.Drawing.UndoRedoAction.commonPrototype.Undo.call(this);
            this.viewer.AddNode(this.removedNode, false);
        },
        Redo: function (){
            Microsoft.Msagl.Drawing.UndoRedoAction.commonPrototype.Redo.call(this);
            this.viewer.RemoveNode(this.removedNode, false);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$RemoveNodeUndoAction);
var Microsoft$Msagl$Drawing$SiteInsertUndoAction = {
    fullname: "Microsoft.Msagl.Drawing.SiteInsertUndoAction",
    baseTypeName: "Microsoft.Msagl.Drawing.UndoRedoAction",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (edgeToEdit){
            this.insertedSite = null;
            this.insertionPoint = new Microsoft.Msagl.Core.Geometry.Point.ctor();
            this.prevSite = null;
            this.siteKPrevious = 0;
            this.siteKNext = 0;
            this.editedEdge = null;
            Microsoft.Msagl.Drawing.UndoRedoAction.ctor.call(this, Cast(edgeToEdit.get_GeometryParent(), Microsoft.Msagl.Core.Layout.GeometryGraph.ctor));
            this.editedEdge = edgeToEdit;
            this.AddRestoreData(this.editedEdge, Microsoft.Msagl.Prototype.LayoutEditing.RestoreHelper.GetRestoreData$$Edge(this.editedEdge));
        },
        PrevSite$$: "Microsoft.Msagl.Core.Geometry.Site",
        get_PrevSite: function (){
            return this.prevSite;
        },
        set_PrevSite: function (value){
            this.prevSite = value;
        },
        SiteKPrevious$$: "System.Double",
        get_SiteKPrevious: function (){
            return this.siteKPrevious;
        },
        set_SiteKPrevious: function (value){
            this.siteKPrevious = value;
        },
        SiteKNext$$: "System.Double",
        get_SiteKNext: function (){
            return this.siteKNext;
        },
        set_SiteKNext: function (value){
            this.siteKNext = value;
        },
        InsertionPoint$$: "Microsoft.Msagl.Core.Geometry.Point",
        get_InsertionPoint: function (){
            return this.insertionPoint;
        },
        set_InsertionPoint: function (value){
            this.insertionPoint = value;
        },
        InsertedSite$$: "Microsoft.Msagl.Core.Geometry.Site",
        get_InsertedSite: function (){
            return this.insertedSite;
        },
        set_InsertedSite: function (value){
            this.insertedSite = value;
            this.set_InsertionPoint(this.insertedSite.get_Point());
            this.set_SiteKNext(this.insertedSite.get_NextBezierSegmentFitCoefficient());
            this.set_SiteKPrevious(this.insertedSite.get_PreviousBezierSegmentFitCoefficient());
            this.set_PrevSite(this.insertedSite.get_Previous());
        },
        Undo: function (){
            var prev = this.get_InsertedSite().get_Previous();
            var next = this.get_InsertedSite().get_Next();
            prev.set_Next(next);
            next.set_Previous(prev);
            Microsoft.Msagl.Drawing.GeometryGraphEditor.DragEdgeWithSite(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0, 0), this.editedEdge, prev);
        },
        Redo: function (){
            this.insertedSite = new Microsoft.Msagl.Core.Geometry.Site.ctor$$Site$$Point$$Site(this.get_PrevSite(), this.get_InsertionPoint(), this.get_PrevSite().get_Next());
            this.insertedSite.set_NextBezierSegmentFitCoefficient(this.get_SiteKNext());
            this.insertedSite.set_PreviousBezierSegmentFitCoefficient(this.get_SiteKPrevious());
            Microsoft.Msagl.Drawing.GeometryGraphEditor.DragEdgeWithSite(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0, 0), this.editedEdge, this.insertedSite);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$SiteInsertUndoAction);
var Microsoft$Msagl$Drawing$SiteRemoveUndoAction = {
    fullname: "Microsoft.Msagl.Drawing.SiteRemoveUndoAction",
    baseTypeName: "Microsoft.Msagl.Drawing.UndoRedoAction",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (edgePar){
            this.removedSite = null;
            this.editedEdge = null;
            Microsoft.Msagl.Drawing.UndoRedoAction.ctor.call(this, Cast(edgePar.get_GeometryParent(), Microsoft.Msagl.Core.Layout.GeometryGraph.ctor));
            this.editedEdge = edgePar;
            this.AddRestoreData(this.editedEdge, Microsoft.Msagl.Prototype.LayoutEditing.RestoreHelper.GetRestoreData$$Edge(this.editedEdge));
        },
        RemovedSite$$: "Microsoft.Msagl.Core.Geometry.Site",
        get_RemovedSite: function (){
            return this.removedSite;
        },
        set_RemovedSite: function (value){
            this.removedSite = value;
        },
        Undo: function (){
            var prev = this.get_RemovedSite().get_Previous();
            var next = this.get_RemovedSite().get_Next();
            prev.set_Next(this.get_RemovedSite());
            next.set_Previous(this.get_RemovedSite());
            Microsoft.Msagl.Drawing.GeometryGraphEditor.DragEdgeWithSite(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0, 0), this.editedEdge, prev);
        },
        Redo: function (){
            var prev = this.get_RemovedSite().get_Previous();
            var next = this.get_RemovedSite().get_Next();
            prev.set_Next(next);
            next.set_Previous(prev);
            Microsoft.Msagl.Drawing.GeometryGraphEditor.DragEdgeWithSite(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0, 0), this.editedEdge, prev);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$SiteRemoveUndoAction);
var Microsoft$Msagl$Drawing$UndoRedoAction = {
    fullname: "Microsoft.Msagl.Drawing.UndoRedoAction",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetParentGraph: function (geomObj){
            do{
                var graph = As(geomObj.get_GeometryParent(), Microsoft.Msagl.Core.Layout.GeometryGraph.ctor);
                if (graph != null)
                    return graph;
                geomObj = geomObj.get_GeometryParent();
            }
            while (true)
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (graphPar){
            this.affectedObjects = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Drawing.IViewerObject.ctor);
            this.graph = null;
            this.next = null;
            this.prev = null;
            this.restoreDataDictionary = new System.Collections.Generic.Dictionary$2.ctor(Microsoft.Msagl.Core.Layout.GeometryObject.ctor, Microsoft.Msagl.Prototype.LayoutEditing.RestoreData.ctor);
            this.graphBoundingBoxBefore = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor();
            this.graphBoundingBoxAfter = new Microsoft.Msagl.Core.Geometry.Rectangle.ctor();
            System.Object.ctor.call(this);
            this.set_Graph(graphPar);
            this.graphBoundingBoxBefore = this.get_Graph().get_BoundingBox();
        },
        AffectedObjects$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Drawing.IViewerObject]]",
        get_AffectedObjects: function (){
            return this.affectedObjects;
        },
        ContainsAffectedObject: function (o){
            return this.affectedObjects.Contains$$T(o);
        },
        AddAffectedObject: function (o){
            this.affectedObjects.Insert(o);
        },
        RemoveAffectedObject: function (o){
            this.affectedObjects.Remove(o);
        },
        ClearAffectedObjects: function (){
            this.affectedObjects.Clear();
        },
        Graph$$: "Microsoft.Msagl.Core.Layout.GeometryGraph",
        get_Graph: function (){
            return this.graph;
        },
        set_Graph: function (value){
            this.graph = value;
        },
        Undo: function (){
            if (this.get_GraphBoundingBoxHasChanged())
                this.get_Graph().set_BoundingBox(this.get_GraphBoundingBoxBefore());
        },
        Redo: function (){
            if (this.get_GraphBoundingBoxHasChanged())
                this.get_Graph().set_BoundingBox(this.get_GraphBoundingBoxAfter());
        },
        Next$$: "Microsoft.Msagl.Drawing.UndoRedoAction",
        get_Next: function (){
            return this.next;
        },
        set_Next: function (value){
            this.next = value;
        },
        Previous$$: "Microsoft.Msagl.Drawing.UndoRedoAction",
        get_Previous: function (){
            return this.prev;
        },
        set_Previous: function (value){
            this.prev = value;
        },
        AddRestoreData: function (msaglObject, restoreData){
            this.restoreDataDictionary.set_Item$$TKey(msaglObject, restoreData);
        },
        GetRestoreData: function (msaglObject){
            return this.restoreDataDictionary.get_Item$$TKey(msaglObject);
        },
        EditedObjects$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Core.Layout.GeometryObject]]",
        get_EditedObjects: function (){
            return this.restoreDataDictionary.get_Keys();
        },
        GraphBoundingBoxBefore$$: "Microsoft.Msagl.Core.Geometry.Rectangle",
        get_GraphBoundingBoxBefore: function (){
            return this.graphBoundingBoxBefore;
        },
        set_GraphBoundingBoxBefore: function (value){
            this.graphBoundingBoxBefore = value;
        },
        GraphBoundingBoxAfter$$: "Microsoft.Msagl.Core.Geometry.Rectangle",
        get_GraphBoundingBoxAfter: function (){
            return this.graphBoundingBoxAfter;
        },
        set_GraphBoundingBoxAfter: function (value){
            this.graphBoundingBoxAfter = value;
        },
        GraphBoundingBoxHasChanged$$: "System.Boolean",
        get_GraphBoundingBoxHasChanged: function (){
            return Microsoft.Msagl.Core.Geometry.Rectangle.op_Inequality(this.graphBoundingBoxAfter, this.graphBoundingBoxBefore);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$UndoRedoAction);
var Microsoft$Msagl$Drawing$UndoRedoActionsList = {
    fullname: "Microsoft.Msagl.Drawing.UndoRedoActionsList",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.currentUndo = null;
            this.currentRedo = null;
            System.Object.ctor.call(this);
        },
        CurrentUndo$$: "Microsoft.Msagl.Drawing.UndoRedoAction",
        get_CurrentUndo: function (){
            return this.currentUndo;
        },
        set_CurrentUndo: function (value){
            this.currentUndo = value;
        },
        CurrentRedo$$: "Microsoft.Msagl.Drawing.UndoRedoAction",
        get_CurrentRedo: function (){
            return this.currentRedo;
        },
        set_CurrentRedo: function (value){
            this.currentRedo = value;
        },
        AddAction: function (action){
            if (this.get_CurrentUndo() != null)
                this.get_CurrentUndo().set_Next(action);
            action.set_Previous(this.get_CurrentUndo());
            this.set_CurrentUndo(action);
            this.set_CurrentRedo(null);
            return action;
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$UndoRedoActionsList);
var Microsoft$Msagl$Drawing$VoidDelegate = {
    fullname: "Microsoft.Msagl.Drawing.VoidDelegate",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$VoidDelegate);
var Microsoft$Msagl$Drawing$ModifierKeys = {
    fullname: "Microsoft.Msagl.Drawing.ModifierKeys",
    staticDefinition: {
        None: 0,
        Alt: 1,
        Control: 2,
        Shift: 4,
        Windows: 8
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$ModifierKeys);
var Microsoft$Msagl$Drawing$MouseButtons = {
    fullname: "Microsoft.Msagl.Drawing.MouseButtons",
    staticDefinition: {
        None: 0,
        Left: 1048576,
        Right: 2097152,
        Middle: 4194304,
        XButton1: 8388608,
        XButton2: 16777216
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$MouseButtons);
var Microsoft$Msagl$Drawing$MsaglMouseEventArgs = {
    fullname: "Microsoft.Msagl.Drawing.MsaglMouseEventArgs",
    baseTypeName: "System.EventArgs",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Handled = false;
            System.EventArgs.ctor.call(this);
        },
        LeftButtonIsPressed$$: "System.Boolean",
        MiddleButtonIsPressed$$: "System.Boolean",
        RightButtonIsPressed$$: "System.Boolean",
        Handled$$: "System.Boolean",
        get_Handled: function (){
            return this._Handled;
        },
        set_Handled: function (value){
            this._Handled = value;
        },
        X$$: "System.Int32",
        Y$$: "System.Int32",
        Clicks$$: "System.Int32"
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$MsaglMouseEventArgs);
var Microsoft$Msagl$Drawing$DelegateToOverrideNodeRendering = {
    fullname: "Microsoft.Msagl.Drawing.DelegateToOverrideNodeRendering",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$DelegateToOverrideNodeRendering);
var Microsoft$Msagl$Drawing$DelegateToSetNodeBoundary = {
    fullname: "Microsoft.Msagl.Drawing.DelegateToSetNodeBoundary",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$DelegateToSetNodeBoundary);
var Microsoft$Msagl$Drawing$Node = {
    fullname: "Microsoft.Msagl.Drawing.Node",
    baseTypeName: "Microsoft.Msagl.Drawing.DrawingObject",
    assemblyName: "Microsoft.Msagl.Drawing",
    interfaceNames: ["Microsoft.Msagl.Drawing.ILabeledObject"],
    Kind: "Class",
    definition: {
        ctor: function (id){
            this.label = null;
            this.drawNodeDelegate = null;
            this.nodeBoundaryDelegate = null;
            this.attr = null;
            this.outEdges = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Drawing.Edge.ctor);
            this.inEdges = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Drawing.Edge.ctor);
            this.selfEdges = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Drawing.Edge.ctor);
            this.geometryNode = null;
            Microsoft.Msagl.Drawing.DrawingObject.ctor.call(this);
            this.set_Label(new Microsoft.Msagl.Drawing.Label.ctor());
            this.get_Label().set_GeometryLabel(null);
            this.get_Label().set_Owner(this);
            this.set_Attr(new Microsoft.Msagl.Drawing.NodeAttr.ctor());
            this.attr.set_Id(id);
            this.get_Label().set_Text(id);
        },
        Label$$: "Microsoft.Msagl.Drawing.Label",
        get_Label: function (){
            return this.label;
        },
        set_Label: function (value){
            this.label = value;
        },
        DrawNodeDelegate$$: "Microsoft.Msagl.Drawing.DelegateToOverrideNodeRendering",
        get_DrawNodeDelegate: function (){
            return this.drawNodeDelegate;
        },
        set_DrawNodeDelegate: function (value){
            this.drawNodeDelegate = value;
        },
        NodeBoundaryDelegate$$: "Microsoft.Msagl.Drawing.DelegateToSetNodeBoundary",
        get_NodeBoundaryDelegate: function (){
            return this.nodeBoundaryDelegate;
        },
        set_NodeBoundaryDelegate: function (value){
            this.nodeBoundaryDelegate = value;
        },
        BoundingBox$$: "Microsoft.Msagl.Core.Geometry.Rectangle",
        get_BoundingBox: function (){
            return this.get_GeometryNode().get_BoundaryCurve().get_BoundingBox();
        },
        Attr$$: "Microsoft.Msagl.Drawing.NodeAttr",
        get_Attr: function (){
            return this.attr;
        },
        set_Attr: function (value){
            this.attr = value;
        },
        CompareTo: function (o){
            var n = As(o, Microsoft.Msagl.Drawing.Node.ctor);
            if (n == null)
                throw $CreateException(new System.InvalidOperationException.ctor(), new Error());
            return System.String.Compare$$String$$String$$StringComparison(this.get_Attr().get_Id(), n.get_Attr().get_Id(), 4);
        },
        toString: function (){
            var label_text = this.get_Label() == null ? this.get_Id() : this.get_Label().get_Text();
            return Microsoft.Msagl.Drawing.Utils.Quote(label_text) + "[" + this.get_Attr().toString() + "," + this.GeomDataString() + "]";
        },
        HeightString: function (){
            return "height=" + this.get_GeometryNode().get_Height();
        },
        WidthString: function (){
            return "width=" + this.get_GeometryNode().get_Width();
        },
        CenterString: function (){
            return "pos=" + System.String.Format$$String$$Object$$Object("\"{0},{1}\"", this.get_GeometryNode().get_Center().get_X(), this.get_GeometryNode().get_Center().get_Y());
        },
        GeomDataString: function (){
            return Microsoft.Msagl.Drawing.Utils.ConcatWithComma(this.HeightString(), this.CenterString(), this.WidthString());
        },
        Id$$: "System.String",
        get_Id: function (){
            return this.attr.get_Id();
        },
        set_Id: function (value){
            this.attr.set_Id(value);
        },
        OutEdges$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Drawing.Edge]]",
        get_OutEdges: function (){
            return this.outEdges;
        },
        InEdges$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Drawing.Edge]]",
        get_InEdges: function (){
            return this.inEdges;
        },
        SelfEdges$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Drawing.Edge]]",
        get_SelfEdges: function (){
            return this.selfEdges;
        },
        AddInEdge: function (e){
            this.inEdges.Insert(e);
        },
        AddOutEdge: function (e){
            this.outEdges.Insert(e);
        },
        AddSelfEdge: function (e){
            this.selfEdges.Insert(e);
        },
        RemoveInEdge: function (edge){
            this.inEdges.Remove(edge);
        },
        RemoveOutEdge: function (edge){
            this.outEdges.Remove(edge);
        },
        RemoveSelfEdge: function (edge){
            this.selfEdges.Remove(edge);
        },
        GeometryObject$$: "Microsoft.Msagl.Core.Layout.GeometryObject",
        get_GeometryObject: function (){
            return this.get_GeometryNode();
        },
        set_GeometryObject: function (value){
            this.set_GeometryNode(Cast(value, Microsoft.Msagl.Core.Layout.Node.ctor));
        },
        GeometryNode$$: "Microsoft.Msagl.Core.Layout.Node",
        get_GeometryNode: function (){
            return this.geometryNode;
        },
        set_GeometryNode: function (value){
            this.geometryNode = value;
        },
        LabelText$$: "System.String",
        get_LabelText: function (){
            return this.get_Label() != null ? this.get_Label().get_Text() : "";
        },
        set_LabelText: function (value){
            if (this.get_Label() == null)
                this.set_Label(new Microsoft.Msagl.Drawing.Label.ctor());
            this.get_Label().set_Text(value);
        },
        Edges$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Drawing.Edge]]",
        get_Edges: function (){
            var $yield = [];
            var $it77 = this.get_InEdges().GetEnumerator();
            while ($it77.MoveNext()){
                var e = $it77.get_Current();
                $yield.push(e);
            }
            var $it78 = this.get_OutEdges().GetEnumerator();
            while ($it78.MoveNext()){
                var e = $it78.get_Current();
                $yield.push(e);
            }
            var $it79 = this.get_SelfEdges().GetEnumerator();
            while ($it79.MoveNext()){
                var e = $it79.get_Current();
                $yield.push(e);
            }
            return $yield;
        },
        Height$$: "System.Double",
        get_Height: function (){
            return this.get_GeometryNode().get_Height();
        },
        Width$$: "System.Double",
        get_Width: function (){
            return this.get_GeometryNode().get_Width();
        },
        Pos$$: "Microsoft.Msagl.Core.Geometry.Point",
        get_Pos: function (){
            return this.get_GeometryNode().get_Center();
        },
        Equals$$Object: function (obj){
            var otherNode = As(obj, Microsoft.Msagl.Drawing.Node.ctor);
            if (otherNode == null)
                return false;
            return otherNode.get_Id() == this.get_Id();
        },
        GetHashCode: function (){
            return this.get_Id().GetHashCode();
        },
        IsVisible$$: "System.Boolean",
        get_IsVisible: function (){
            return Microsoft.Msagl.Drawing.DrawingObject.commonPrototype.get_IsVisible.call(this);
        },
        set_IsVisible: function (value){
            Microsoft.Msagl.Drawing.DrawingObject.commonPrototype.set_IsVisible.call(this, value);
            if (!value){
                var $it80 = this.get_Edges().GetEnumerator();
                while ($it80.MoveNext()){
                    var e = $it80.get_Current();
                    e.set_IsVisible(false);
                }
            }
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$Node);
var Microsoft$Msagl$Drawing$NodeAttr = {
    fullname: "Microsoft.Msagl.Drawing.NodeAttr",
    baseTypeName: "Microsoft.Msagl.Drawing.AttributeBase",
    staticDefinition: {
        cctor: function (){
            Microsoft.Msagl.Drawing.NodeAttr.defaultFillColor = Microsoft.Msagl.Drawing.Color.get_LightGray();
        },
        DefaultFillColor$$: "Microsoft.Msagl.Drawing.Color",
        get_DefaultFillColor: function (){
            return Microsoft.Msagl.Drawing.NodeAttr.defaultFillColor;
        },
        set_DefaultFillColor: function (value){
            Microsoft.Msagl.Drawing.NodeAttr.defaultFillColor = value;
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.padding = 2;
            this.xRad = 3;
            this.yRad = 3;
            this.clusterLabelPlacement = Microsoft.Msagl.Core.Layout.LgNodeInfo.LabelPlacement.Top;
            this.fillcolor = Microsoft.Msagl.Drawing.Color.get_Transparent();
            this.shape = Microsoft.Msagl.Drawing.Shape.Box;
            this.labelMargin = 1;
            this.labelWidthToHeightRatio = 1;
            Microsoft.Msagl.Drawing.AttributeBase.ctor.call(this);
        },
        Padding$$: "System.Double",
        get_Padding: function (){
            return this.padding;
        },
        set_Padding: function (value){
            this.padding = System.Math.Max$$Double$$Double(0, value);
            this.RaiseVisualsChangedEvent$$Object$$EventArgs(this, null);
        },
        XRadius$$: "System.Double",
        get_XRadius: function (){
            return this.xRad;
        },
        set_XRadius: function (value){
            this.xRad = value;
            this.RaiseVisualsChangedEvent$$Object$$EventArgs(this, null);
        },
        YRadius$$: "System.Double",
        get_YRadius: function (){
            return this.yRad;
        },
        set_YRadius: function (value){
            this.yRad = value;
        },
        ClusterLabelMargin$$: "Microsoft.Msagl.Core.Layout.LgNodeInfo+LabelPlacement",
        get_ClusterLabelMargin: function (){
            return this.clusterLabelPlacement;
        },
        set_ClusterLabelMargin: function (value){
            this.clusterLabelPlacement = value;
        },
        toString: function (){
            return Microsoft.Msagl.Drawing.Utils.ConcatWithComma(this.StylesToString(","), Microsoft.Msagl.Drawing.Utils.ColorToString("color=", Microsoft.Msagl.Drawing.AttributeBase.commonPrototype.get_Color.call(this).toString()), Microsoft.Msagl.Drawing.Utils.ShapeToString("shape=", this.shape), Microsoft.Msagl.Drawing.Utils.ColorToString("fillcolor=", this.fillcolor.toString()), this.IdToString());
        },
        Clone: function (){
            var r = As(this.MemberwiseClone(), Microsoft.Msagl.Drawing.NodeAttr.ctor);
            return r;
        },
        FillColor$$: "Microsoft.Msagl.Drawing.Color",
        get_FillColor: function (){
            return this.fillcolor;
        },
        set_FillColor: function (value){
            this.fillcolor = value;
            this.RaiseVisualsChangedEvent$$Object$$EventArgs(this, null);
        },
        Shape$$: "Microsoft.Msagl.Drawing.Shape",
        get_Shape: function (){
            return this.shape;
        },
        set_Shape: function (value){
            this.shape = value;
            this.RaiseVisualsChangedEvent$$Object$$EventArgs(this, null);
        },
        LabelMargin$$: "System.Int32",
        get_LabelMargin: function (){
            return this.labelMargin;
        },
        set_LabelMargin: function (value){
            this.labelMargin = value;
            this.RaiseVisualsChangedEvent$$Object$$EventArgs(this, null);
        },
        LabelWidthToHeightRatio$$: "System.Double",
        get_LabelWidthToHeightRatio: function (){
            return this.labelWidthToHeightRatio;
        },
        set_LabelWidthToHeightRatio: function (value){
            this.labelWidthToHeightRatio = value;
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$NodeAttr);
var Microsoft$Msagl$Drawing$NodeBoundaryCurves = {
    fullname: "Microsoft.Msagl.Drawing.NodeBoundaryCurves",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetNodeBoundaryCurve: function (node, width, height){
            if (node == null)
                throw $CreateException(new System.InvalidOperationException.ctor(), new Error());
            var nodeAttr = node.get_Attr();
            switch (nodeAttr.get_Shape()){
                case Microsoft.Msagl.Drawing.Shape.Ellipse:
                case Microsoft.Msagl.Drawing.Shape.DoubleCircle:
                    return Microsoft.Msagl.Core.Geometry.Curves.CurveFactory.CreateEllipse(width, height, new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0, 0));
                case Microsoft.Msagl.Drawing.Shape.Circle:
                    {
                    var r = System.Math.Max$$Double$$Double(width / 2, height / 2);
                    return Microsoft.Msagl.Core.Geometry.Curves.CurveFactory.CreateEllipse(r, r, new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0, 0));
                    }
                case Microsoft.Msagl.Drawing.Shape.Box:
                    if (nodeAttr.get_XRadius() != 0 || nodeAttr.get_YRadius() != 0)
                    return Microsoft.Msagl.Core.Geometry.Curves.CurveFactory.CreateRectangleWithRoundedCorners(width, height, nodeAttr.get_XRadius(), nodeAttr.get_YRadius(), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0, 0));
                    return Microsoft.Msagl.Core.Geometry.Curves.CurveFactory.CreateRectangle$$Double$$Double$$Point(width, height, new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0, 0));
                case Microsoft.Msagl.Drawing.Shape.Diamond:
                    return Microsoft.Msagl.Core.Geometry.Curves.CurveFactory.CreateDiamond(width, height, new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0, 0));
                case Microsoft.Msagl.Drawing.Shape.House:
                    return Microsoft.Msagl.Core.Geometry.Curves.CurveFactory.CreateHouse(width, height, new Microsoft.Msagl.Core.Geometry.Point.ctor());
                case Microsoft.Msagl.Drawing.Shape.InvHouse:
                    return Microsoft.Msagl.Core.Geometry.Curves.CurveFactory.CreateInvertedHouse(width, height, new Microsoft.Msagl.Core.Geometry.Point.ctor());
                case Microsoft.Msagl.Drawing.Shape.Octagon:
                    return Microsoft.Msagl.Core.Geometry.Curves.CurveFactory.CreateOctagon(width, height, new Microsoft.Msagl.Core.Geometry.Point.ctor());
                case Microsoft.Msagl.Drawing.Shape.TestShape:
                    return Microsoft.Msagl.Core.Geometry.Curves.CurveFactory.CreateTestShape(width, height);
                default:
                    {
                    return new Microsoft.Msagl.Core.Geometry.Curves.Ellipse.ctor$$Point$$Point$$Point(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(width / 2, 0), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(0, height / 2), new Microsoft.Msagl.Core.Geometry.Point.ctor());
                    }
            }
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$NodeBoundaryCurves);
var Microsoft$Msagl$Drawing$PhyloEdge = {
    fullname: "Microsoft.Msagl.Drawing.PhyloEdge",
    baseTypeName: "Microsoft.Msagl.Drawing.Edge",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor$$String$$String: function (source, target){
            this.realLength = 0;
            this.length = 1;
            this.negative = false;
            Microsoft.Msagl.Drawing.Edge.ctor$$String$$String$$String.call(this, source, null, target);
        },
        RealLength$$: "System.Double",
        get_RealLength: function (){
            return this.realLength;
        },
        set_RealLength: function (value){
            this.realLength = value;
        },
        Length$$: "System.Double",
        get_Length: function (){
            return this.length;
        },
        set_Length: function (value){
            this.length = value;
        },
        ctor$$String$$String$$Double: function (source, target, lengthP){
            this.realLength = 0;
            this.length = 1;
            this.negative = false;
            Microsoft.Msagl.Drawing.Edge.ctor$$String$$String$$String.call(this, source, null, target);
            this.set_Length(lengthP);
        },
        Negative$$: "System.Boolean",
        get_Negative: function (){
            return this.negative;
        },
        set_Negative: function (value){
            this.negative = value;
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$PhyloEdge);
var Microsoft$Msagl$Drawing$PhyloTree = {
    fullname: "Microsoft.Msagl.Drawing.PhyloTree",
    baseTypeName: "Microsoft.Msagl.Drawing.Graph",
    staticDefinition: {
        cctor: function (){
        },
        IsLeaf: function (node){
            return !node.get_OutEdges().GetEnumerator().MoveNext();
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            Microsoft.Msagl.Drawing.Graph.ctor.call(this);
        },
        CreateGeometryGraph: function (){
            this.set_GeometryGraph(Microsoft.Msagl.Drawing.GeometryGraphCreator.CreatePhyloTree(this));
        },
        AddEdge$$String$$String$$String: function (source, edgeLabel, target){
            var l = edgeLabel;
            if (l == null)
                l = "";
            var edge = (function (){
                var $v15 = new Microsoft.Msagl.Drawing.PhyloEdge.ctor$$String$$String$$Double(source, target, 1);
                $v15.set_SourceNode(this.AddNode$$String(source));
                $v15.set_TargetNode(this.AddNode$$String(target));
                return $v15;
            }).call(this);
            if (source != target){
                edge.get_SourceNode().AddOutEdge(edge);
                edge.get_TargetNode().AddInEdge(edge);
            }
            else
                edge.get_SourceNode().AddSelfEdge(edge);
            return edge;
        },
        AddEdge$$String$$String: function (source, target){
            return this.AddEdge$$String$$String$$String(source, null, target);
        },
        Leaves$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Drawing.Node]]",
        get_Leaves: function (){
            var $yield = [];
            var $it81 = this.get_Nodes().GetEnumerator();
            while ($it81.MoveNext()){
                var node = $it81.get_Current();
                if (Microsoft.Msagl.Drawing.PhyloTree.IsLeaf(node))
                    $yield.push(node);
            }
            return $yield;
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$PhyloTree);
var Microsoft$Msagl$Drawing$Subgraph = {
    fullname: "Microsoft.Msagl.Drawing.Subgraph",
    baseTypeName: "Microsoft.Msagl.Drawing.Node",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (id){
            this.diameterOfOpenCollapseButton = 10;
            this.collapseButtonColorInactive = Microsoft.Msagl.Drawing.Color.get_Cornsilk();
            this.collapseButtonColorActive = Microsoft.Msagl.Drawing.Color.get_Bisque();
            this.subgraphs = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Drawing.Subgraph.ctor);
            this.nodes = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Drawing.Node.ctor);
            this.isUpdated = false;
            this._LayoutSettings = null;
            this._ParentSubgraph = null;
            Microsoft.Msagl.Drawing.Node.ctor.call(this, id);
        },
        LayoutSettings$$: "Microsoft.Msagl.Core.Layout.LayoutAlgorithmSettings",
        get_LayoutSettings: function (){
            return this._LayoutSettings;
        },
        set_LayoutSettings: function (value){
            this._LayoutSettings = value;
        },
        DiameterOfOpenCollapseButton$$: "System.Double",
        get_DiameterOfOpenCollapseButton: function (){
            return this.diameterOfOpenCollapseButton;
        },
        set_DiameterOfOpenCollapseButton: function (value){
            this.diameterOfOpenCollapseButton = value;
        },
        CollapseButtonColorInactive$$: "Microsoft.Msagl.Drawing.Color",
        get_CollapseButtonColorInactive: function (){
            return this.collapseButtonColorInactive;
        },
        set_CollapseButtonColorInactive: function (value){
            this.collapseButtonColorInactive = value;
        },
        CollapseButtonColorActive$$: "Microsoft.Msagl.Drawing.Color",
        get_CollapseButtonColorActive: function (){
            return this.collapseButtonColorActive;
        },
        set_CollapseButtonColorActive: function (value){
            this.collapseButtonColorActive = value;
        },
        ParentSubgraph$$: "Microsoft.Msagl.Drawing.Subgraph",
        get_ParentSubgraph: function (){
            return this._ParentSubgraph;
        },
        set_ParentSubgraph: function (value){
            this._ParentSubgraph = value;
        },
        toString: function (){
            return this.get_Id();
        },
        Nodes$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Drawing.Node]]",
        get_Nodes: function (){
            return this.nodes;
        },
        Subgraphs$$: "System.Collections.Generic.IEnumerable`1[[Microsoft.Msagl.Drawing.Subgraph]]",
        get_Subgraphs: function (){
            return this.subgraphs;
        },
        IsUpdated$$: "System.Boolean",
        get_IsUpdated: function (){
            return this.isUpdated;
        },
        set_IsUpdated: function (value){
            this.isUpdated = value;
            if (this.get_ParentSubgraph() != null)
                this.get_ParentSubgraph().set_IsUpdated(value);
        },
        AllSubgraphsDepthFirst: function (){
            var $yield = [];
            var $it82 = this.subgraphs.GetEnumerator();
            while ($it82.MoveNext()){
                var c = $it82.get_Current();
                var $it83 = c.AllSubgraphsDepthFirst().GetEnumerator();
                while ($it83.MoveNext()){
                    var d = $it83.get_Current();
                    $yield.push(d);
                }
            }
            $yield.push(this);
            return $yield;
        },
        AllSubgraphsDepthFirstExcludingSelf: function (){
            var $yield = [];
            var $it84 = this.subgraphs.GetEnumerator();
            while ($it84.MoveNext()){
                var c = $it84.get_Current();
                var $it85 = c.AllSubgraphsDepthFirst().GetEnumerator();
                while ($it85.MoveNext()){
                    var d = $it85.get_Current();
                    $yield.push(d);
                }
            }
            return $yield;
        },
        AddNode: function (node){
            this.nodes.Insert(node);
            this.set_IsUpdated(true);
        },
        RemoveNode: function (node){
            this.nodes.Remove(node);
            this.set_IsUpdated(true);
        },
        AddSubgraph: function (subgraph){
            if (subgraph.get_ParentSubgraph() != null)
                subgraph.get_ParentSubgraph().RemoveSubgraph(subgraph);
            subgraph.set_ParentSubgraph(this);
            this.subgraphs.Insert(subgraph);
            this.set_IsUpdated(true);
        },
        RemoveSubgraph: function (subgraph){
            this.subgraphs.Remove(subgraph);
            subgraph.set_ParentSubgraph(null);
            this.set_IsUpdated(true);
        },
        AllSubgraphsWidthFirstExcludingSelf: function (){
            var $yield = [];
            var $it86 = this.subgraphs.GetEnumerator();
            while ($it86.MoveNext()){
                var c = $it86.get_Current();
                $yield.push(c);
                var $it87 = c.AllSubgraphsWidthFirstExcludingSelf().GetEnumerator();
                while ($it87.MoveNext()){
                    var d = $it87.get_Current();
                    $yield.push(d);
                }
            }
            return $yield;
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$Subgraph);
var Microsoft$Msagl$Drawing$SubgraphTemplate = {
    fullname: "Microsoft.Msagl.Drawing.SubgraphTemplate",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Subgraph = null;
            this.SubgraphIdList = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            this.NodeIdList = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$SubgraphTemplate);
var Microsoft$Msagl$Drawing$SvgGraphWriter = {
    fullname: "Microsoft.Msagl.Drawing.SvgGraphWriter",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Microsoft.Msagl.Drawing.SvgGraphWriter.DoubleCircleOffsetRatio = 0.9;
            Microsoft.Msagl.Drawing.SvgGraphWriter.ArrowAngle = 25;
        },
        LabelIsValid: function (label){
            if (label == null || System.String.IsNullOrEmpty(label.get_Text()) || label.get_Width() == 0)
                return false;
            return true;
        },
        WriteGraphAttr: function (graphAttr){
        },
        IsFullEllipse: function (ell){
            return ell.get_ParEnd() == 6.28318530717959 && ell.get_ParStart() == 0;
        },
        MsaglColorToSvgOpacity: function (color){
            return color.get_A() / 255;
        },
        WriteStyles: function (styles){
        },
        Write$$Graph$$String: function (graph, outputFile){
            Microsoft.Msagl.Drawing.SvgGraphWriter.Write$$Graph$$String$$Func$2$String$String$$Func$2$String$String$$Int32(graph, outputFile, null, null, 4);
        },
        WriteAllExceptEdges: function (graph, outputFile){
            var stream = System.IO.File.Create$$String(outputFile);
            try{
                var writer = (function (){
                    var $v17 = new Microsoft.Msagl.Drawing.SvgGraphWriter.ctor$$Stream$$Graph(stream, graph);
                    $v17.set_Precision(4);
                    $v17.set_IgnoreEdges(true);
                    return $v17;
                })();
                writer.Write();
            }
            finally{
                stream.Dispose();
            }
        },
        Write$$Graph$$String$$Func$2$String$String$$Func$2$String$String$$Int32: function (graph, outputFile, nodeSanitizer, attrSanitizer, precision){
            var stream = System.IO.File.Create$$String(outputFile);
            try{
                var writer = (function (){
                    var $v18 = new Microsoft.Msagl.Drawing.SvgGraphWriter.ctor$$Stream$$Graph(stream, graph);
                    $v18.set_Precision(precision);
                    $v18.set_NodeSanitizer((nodeSanitizer != null ? nodeSanitizer : (function (t){
                        return t;
                    })));
                    $v18.set_AttrSanitizer((attrSanitizer != null ? attrSanitizer : (function (t){
                        return t;
                    })));
                    return $v18;
                })();
                writer.Write();
            }
            finally{
                stream.Dispose();
            }
        },
        WriteAllExceptEdgesInBlack: function (graph, outputFile){
            var stream = System.IO.File.Create$$String(outputFile);
            try{
                var writer = (function (){
                    var $v19 = new Microsoft.Msagl.Drawing.SvgGraphWriter.ctor$$Stream$$Graph(stream, graph);
                    $v19.set_Precision(4);
                    $v19.set_IgnoreEdges(true);
                    $v19.set_BlackAndWhite(true);
                    return $v19;
                })();
                writer.Write();
            }
            finally{
                stream.Dispose();
            }
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor$$Stream$$Graph: function (streamPar, graphP){
            this._graph = null;
            this.nodeSanitizer = $CreateAnonymousDelegate(this, function (s){
                return s;
            });
            this.attrSanitizer = $CreateAnonymousDelegate(this, function (s){
                return s;
            });
            this.stream = null;
            this.xmlWriter = null;
            this.formatForDoubleString = "#.###########";
            this.precision = 11;
            this.allowedToWriteUri = true;
            this.colorSet = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(System.String.ctor);
            this._IgnoreEdges = false;
            this._BlackAndWhite = false;
            System.Object.ctor.call(this);
            this.InitColorSet();
            this.stream = streamPar;
            this._graph = graphP;
            var xmlWriterSettings = (function (){
                var $v16 = new System.Xml.XmlWriterSettings.ctor();
                $v16.set_Indent(true);
                return $v16;
            }).call(this);
            this.xmlWriter = System.Xml.XmlWriter.Create$$Stream$$XmlWriterSettings(this.stream, xmlWriterSettings);
        },
        IgnoreEdges$$: "System.Boolean",
        get_IgnoreEdges: function (){
            return this._IgnoreEdges;
        },
        set_IgnoreEdges: function (value){
            this._IgnoreEdges = value;
        },
        ctor: function (){
            this._graph = null;
            this.nodeSanitizer = $CreateAnonymousDelegate(this, function (s){
                return s;
            });
            this.attrSanitizer = $CreateAnonymousDelegate(this, function (s){
                return s;
            });
            this.stream = null;
            this.xmlWriter = null;
            this.formatForDoubleString = "#.###########";
            this.precision = 11;
            this.allowedToWriteUri = true;
            this.colorSet = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(System.String.ctor);
            this._IgnoreEdges = false;
            this._BlackAndWhite = false;
            System.Object.ctor.call(this);
        },
        XmlWriter$$: "System.Xml.XmlWriter",
        get_XmlWriter: function (){
            return this.xmlWriter;
        },
        NodeSanitizer$$: "System.Func`2[[System.String],[System.String]]",
        get_NodeSanitizer: function (){
            return this.nodeSanitizer;
        },
        set_NodeSanitizer: function (value){
            this.nodeSanitizer = value;
        },
        AttrSanitizer$$: "System.Func`2[[System.String],[System.String]]",
        get_AttrSanitizer: function (){
            return this.attrSanitizer;
        },
        set_AttrSanitizer: function (value){
            this.attrSanitizer = value;
        },
        Write: function (){
            var currentCulture = System.Threading.Thread.get_CurrentThread().get_CurrentCulture();
            System.Threading.Thread.get_CurrentThread().set_CurrentCulture(System.Globalization.CultureInfo.get_InvariantCulture());
            try{
                this.TransformGraphByFlippingY();
                this.Open();
                Microsoft.Msagl.Drawing.SvgGraphWriter.WriteGraphAttr(this._graph.get_Attr());
                this.WriteLabel(this._graph.get_Label());
                this.WriteEdges();
                this.WriteNodes();
                this.Close();
            }
            finally{
                this.TransformGraphByFlippingY();
                System.Threading.Thread.get_CurrentThread().set_CurrentCulture(currentCulture);
            }
        },
        WriteLabel: function (label){
            if (!Microsoft.Msagl.Drawing.SvgGraphWriter.LabelIsValid(label))
                return;
            var yScaleAdjustment = 1.5;
            var x = label.get_Center().get_X() - label.get_Width() / 2;
            var y = label.get_Center().get_Y() + label.get_Height() / (3);
            this.WriteStartElement("text");
            this.WriteAttribute("x", x);
            this.WriteAttribute("y", y);
            this.WriteAttribute("font-family", "Arial");
            this.WriteAttribute("font-size", "16");
            this.WriteAttribute("fill", this.MsaglColorToSvgColor(label.get_FontColor()));
            this.xmlWriter.WriteRaw$$String(this.get_NodeSanitizer()(label.get_Text()));
            this.WriteEndElement();
        },
        MsaglColorToSvgColor: function (color){
            if (this.get_BlackAndWhite())
                return "#000000";
            return "#" + Microsoft.Msagl.Drawing.Color.Xex(color.get_R()) + Microsoft.Msagl.Drawing.Color.Xex(color.get_G()) + Microsoft.Msagl.Drawing.Color.Xex(color.get_B());
        },
        BlackAndWhite$$: "System.Boolean",
        get_BlackAndWhite: function (){
            return this._BlackAndWhite;
        },
        set_BlackAndWhite: function (value){
            this._BlackAndWhite = value;
        },
        WriteAttribute: function (attrName, attrValue){
            if (true)
                attrValue = this.DoubleToString(attrValue);
            else if (Is(attrValue, Microsoft.Msagl.Core.Geometry.Point.ctor))
                attrValue = this.PointToString(Cast(attrValue, Microsoft.Msagl.Core.Geometry.Point.ctor));
            this.xmlWriter.WriteAttributeString$$String$$String(attrName, attrValue.toString());
        },
        WriteAttributeWithPrefix: function (prefix, attrName, attrValue){
            this.xmlWriter.WriteAttributeString$$String$$String$$String$$String(prefix, attrName, null, attrValue.toString());
        },
        Open: function (){
            this.WriteComment("SvgWriter version " + Typeof(Microsoft.Msagl.Drawing.SvgGraphWriter.ctor).get_Assembly().GetName().get_Version());
            var box = this._graph.get_BoundingBox();
            this.xmlWriter.WriteStartElement$$String$$String("svg", "http://www.w3.org/2000/svg");
            this.WriteAttributeWithPrefix("xmlns", "xlink", "http://www.w3.org/1999/xlink");
            this.WriteAttribute("width", box.get_Width());
            this.WriteAttribute("height", box.get_Height());
            this.WriteAttribute("id", "svg2");
            this.WriteAttribute("version", "1.1");
            this.WriteStartElement("g");
            this.WriteAttribute("transform", System.String.Format$$String$$Object$$Object("translate({0},{1})", -box.get_Left(), -box.get_Bottom()));
        },
        Close: function (){
            this.xmlWriter.WriteEndElement();
            this.xmlWriter.WriteEndDocument();
            this.xmlWriter.Flush();
            this.xmlWriter.Close();
        },
        WriteEdges: function (){
            if (this.get_IgnoreEdges())
                return;
            this.WriteComment("Edges");
            var $it88 = this._graph.get_Edges().GetEnumerator();
            while ($it88.MoveNext()){
                var edge = $it88.get_Current();
                this.WriteEdge(edge);
            }
        },
        WriteEdge: function (edge){
            this.WriteStartElement("path");
            this.WriteAttribute("fill", "none");
            var geometryEdge = edge.get_GeometryEdge();
            var iCurve = geometryEdge.get_Curve();
            this.WriteStroke(edge.get_Attr());
            this.WriteAttribute("d", this.CurveString(iCurve));
            this.WriteEndElement();
            if (geometryEdge.get_EdgeGeometry() != null && geometryEdge.get_EdgeGeometry().get_SourceArrowhead() != null)
                this.AddArrow(iCurve.get_Start(), geometryEdge.get_EdgeGeometry().get_SourceArrowhead().get_TipPosition(), edge);
            if (geometryEdge.get_EdgeGeometry() != null && geometryEdge.get_EdgeGeometry().get_TargetArrowhead() != null)
                this.AddArrow(iCurve.get_End(), geometryEdge.get_EdgeGeometry().get_TargetArrowhead().get_TipPosition(), edge);
            if (edge.get_Label() != null && edge.get_Label().get_GeometryLabel() != null && edge.get_GeometryEdge().get_Label() != null)
                this.WriteLabel(edge.get_Label());
        },
        AddArrow: function (start, end, edge){
            var dir = Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(end, start);
            var h = dir;
            dir = Microsoft.Msagl.Core.Geometry.Point.op_Division$$Point$$Double(dir, dir.get_Length());
            var s = new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(-dir.get_Y(), dir.get_X());
            s = Microsoft.Msagl.Core.Geometry.Point.op_Multiply$$Point$$Double(s, h.get_Length() * (System.Math.Tan(0.218166156499291)));
            var points = [Microsoft.Msagl.Core.Geometry.Point.op_Addition(start, s), end, Microsoft.Msagl.Core.Geometry.Point.op_Subtraction(start, s)];
            this.DrawArrowPolygon(edge.get_Attr(), points);
        },
        DrawPolygon: function (attr, points){
            this.WriteStartElement("polygon");
            this.WriteStroke(attr);
            var edgeAttr = As(attr, Microsoft.Msagl.Drawing.EdgeAttr.ctor);
            if (edgeAttr != null){
                this.WriteAttribute("fill", "none");
            }
            else {
                var nodeAttr = As(attr, Microsoft.Msagl.Drawing.NodeAttr.ctor);
                if (nodeAttr != null)
                    this.WriteFill(nodeAttr);
            }
            this.WriteAttribute("points", this.PointsToString(points));
            this.WriteEndElement();
        },
        DrawArrowPolygon: function (attr, points){
            this.WriteStartElement("polygon");
            this.WriteStroke(attr);
            var edgeAttr = As(attr, Microsoft.Msagl.Drawing.EdgeAttr.ctor);
            if (edgeAttr != null){
                this.WriteAttribute("fill", this.MsaglColorToSvgColor(attr.get_Color()));
                this.WriteAttribute("fill-opacity", Microsoft.Msagl.Drawing.SvgGraphWriter.MsaglColorToSvgOpacity(attr.get_Color()));
            }
            else {
                var nodeAttr = As(attr, Microsoft.Msagl.Drawing.NodeAttr.ctor);
                if (nodeAttr != null)
                    this.WriteFill(nodeAttr);
            }
            this.WriteAttribute("points", this.PointsToString(points));
            this.WriteEndElement();
        },
        WriteNodes: function (){
            this.WriteComment("nodes");
            var $it89 = this._graph.get_Nodes().GetEnumerator();
            while ($it89.MoveNext()){
                var node = $it89.get_Current();
                this.WriteNode(node);
            }
            this.WriteComment("end of nodes");
        },
        WriteComment: function (comment){
            this.xmlWriter.WriteComment(comment);
        },
        WriteNode: function (node){
            if (node.get_IsVisible() == false || node.get_GeometryNode() == null)
                return;
            var attr = node.get_Attr();
            var hasUri = !System.String.IsNullOrEmpty(attr.get_Uri());
            if (hasUri && this.get_AllowedToWriteUri()){
                this.WriteStartElement("a");
                this.WriteAttributeWithPrefix("xlink", "href", attr.get_Uri());
            }
            Microsoft.Msagl.Drawing.SvgGraphWriter.WriteStyles(attr.get_Styles());
            switch (attr.get_Shape()){
                case Microsoft.Msagl.Drawing.Shape.DoubleCircle:
                    this.WriteDoubleCircle(node);
                    break;
                case Microsoft.Msagl.Drawing.Shape.Box:
                    this.WriteBox(node);
                    break;
                case Microsoft.Msagl.Drawing.Shape.Diamond:
                    this.WriteDiamond(node);
                    break;
                case Microsoft.Msagl.Drawing.Shape.Point:
                    this.WriteEllipse(node);
                    break;
                case Microsoft.Msagl.Drawing.Shape.Plaintext:
                    {
                    break;
                    }
                case Microsoft.Msagl.Drawing.Shape.Octagon:
                case Microsoft.Msagl.Drawing.Shape.House:
                case Microsoft.Msagl.Drawing.Shape.InvHouse:
                case Microsoft.Msagl.Drawing.Shape.Ellipse:
                case Microsoft.Msagl.Drawing.Shape.DrawFromGeometry:
                case Microsoft.Msagl.Drawing.Shape.TestShape:
                    this.WriteFromMsaglCurve(node);
                    break;
                default:
                    this.WriteEllipse(node);
                    break;
            }
            this.WriteLabel(node.get_Label());
            if (hasUri && this.get_AllowedToWriteUri())
                this.WriteEndElement();
        },
        WriteFromMsaglCurve: function (node){
            var attr = node.get_Attr();
            var iCurve = node.get_GeometryNode().get_BoundaryCurve();
            var c = As(iCurve, Microsoft.Msagl.Core.Geometry.Curves.Curve.ctor);
            if (c != null)
                this.WriteCurve(c, node);
            else {
                var ellipse = As(iCurve, Microsoft.Msagl.Core.Geometry.Curves.Ellipse.ctor);
                if (ellipse != null)
                    this.WriteEllipseOnPosition(node.get_Attr(), ellipse.get_Center(), ellipse.get_AxisA().get_Length(), ellipse.get_AxisB().get_Length());
                else {
                    var poly = As(iCurve, Microsoft.Msagl.Core.Geometry.Curves.Polyline.ctor);
                    if (poly != null)
                        this.WriteCurve(this.CreateCurveFromPolyline(poly), node);
                    else
                        throw $CreateException(new System.NotImplementedException.ctor(), new Error());
                }
            }
        },
        CreateCurveFromPolyline: function (poly){
            var c = new Microsoft.Msagl.Core.Geometry.Curves.Curve.ctor();
            var $it90 = poly.get_PolylinePoints().GetEnumerator();
            while ($it90.MoveNext()){
                var p = $it90.get_Current();
                if (p.get_Next() != null)
                    Microsoft.Msagl.Core.Geometry.Curves.Curve.AddLineSegment$$Curve$$Point$$Point(c, p.get_Point(), p.get_Next().get_Point());
            }
            if (poly.get_Closed())
                Microsoft.Msagl.Core.Geometry.Curves.Curve.AddLineSegment$$Curve$$Point$$Point(c, c.get_End(), poly.get_Start());
            return c;
        },
        WriteFillAndStroke: function (attr){
            this.WriteFill(attr);
            this.WriteStroke(attr);
        },
        WriteStroke: function (attr){
            this.WriteAttribute("stroke", this.MsaglColorToSvgColor(attr.get_Color()));
            this.WriteAttribute("stroke-opacity", Microsoft.Msagl.Drawing.SvgGraphWriter.MsaglColorToSvgOpacity(attr.get_Color()));
            this.WriteAttribute("stroke-width", attr.get_LineWidth());
            if (System.Linq.Enumerable.Any$1$$IEnumerable$1$$Func$2(Microsoft.Msagl.Drawing.Style.ctor, attr.get_Styles(), $CreateAnonymousDelegate(this, function (style){
                return style == Microsoft.Msagl.Drawing.Style.Dashed;
            }))){
                this.WriteAttribute("stroke-dasharray", 5);
            }
            else if (System.Linq.Enumerable.Any$1$$IEnumerable$1$$Func$2(Microsoft.Msagl.Drawing.Style.ctor, attr.get_Styles(), $CreateAnonymousDelegate(this, function (style){
                return style == Microsoft.Msagl.Drawing.Style.Dotted;
            }))){
                this.WriteAttribute("stroke-dasharray", 2);
            }
        },
        WriteCurve: function (curve, node){
            this.WriteStartElement("path");
            this.WriteFillAndStroke(node.get_Attr());
            this.WriteCurveGeometry(curve);
            this.WriteEndElement();
        },
        WriteCurveGeometry: function (curve){
            this.WriteAttribute("d", this.CurveString(curve));
        },
        CurveString: function (iCurve){
            return System.String.Join$$String$$String$Array(" ", System.Linq.Enumerable.ToArray$1(System.String.ctor, this.CurveStringTokens(iCurve)));
        },
        CurveStringTokens: function (iCurve){
            var $yield = [];
            $yield.push("M");
            $yield.push(this.PointToString(iCurve.get_Start()));
            var curve = As(iCurve, Microsoft.Msagl.Core.Geometry.Curves.Curve.ctor);
            if (curve != null){
                var $it91 = curve.get_Segments().GetEnumerator();
                while ($it91.MoveNext()){
                    var segment = $it91.get_Current();
                    $yield.push(this.SegmentString(segment));
                }
            }
            else {
                var lineSeg = As(iCurve, Microsoft.Msagl.Core.Geometry.Curves.LineSegment.ctor);
                if (lineSeg != null){
                    $yield.push("L");
                    $yield.push(this.PointToString(lineSeg.get_End()));
                }
                else {
                    var cubic = As(iCurve, Microsoft.Msagl.Core.Geometry.Curves.CubicBezierSegment.ctor);
                    if (cubic != null){
                        $yield.push(this.CubicBezierSegmentToString(cubic));
                    }
                    else {
                        var poly = As(iCurve, Microsoft.Msagl.Core.Geometry.Curves.Polyline.ctor);
                        if (poly != null){
                            var $it92 = System.Linq.Enumerable.Skip$1(Microsoft.Msagl.Core.Geometry.Point.ctor, poly, 1).GetEnumerator();
                            while ($it92.MoveNext()){
                                var p = $it92.get_Current();
                                $yield.push("L");
                                $yield.push(this.PointToString(p));
                            }
                            if (poly.get_Closed()){
                                $yield.push("L");
                                $yield.push(this.PointToString(poly.get_Start()));
                            }
                        }
                        else {
                            var roundedRect = As(iCurve, Microsoft.Msagl.Core.Geometry.Curves.RoundedRect.ctor);
                            if (roundedRect != null){
                                var $it93 = roundedRect.get_Curve().get_Segments().GetEnumerator();
                                while ($it93.MoveNext()){
                                    var segment = $it93.get_Current();
                                    $yield.push(this.SegmentString(segment));
                                }
                            }
                            else {
                                var ellipse = As(iCurve, Microsoft.Msagl.Core.Geometry.Curves.Ellipse.ctor);
                                if (ellipse != null){
                                    if (Microsoft.Msagl.Drawing.SvgGraphWriter.IsFullEllipse(ellipse)){
                                        $yield.push(this.EllipseToString(new Microsoft.Msagl.Core.Geometry.Curves.Ellipse.ctor$$Double$$Double$$Point$$Point$$Point(0, 3.14159265358979, ellipse.get_AxisA(), ellipse.get_AxisB(), ellipse.get_Center())));
                                        $yield.push(this.EllipseToString(new Microsoft.Msagl.Core.Geometry.Curves.Ellipse.ctor$$Double$$Double$$Point$$Point$$Point(3.14159265358979, 6.28318530717959, ellipse.get_AxisA(), ellipse.get_AxisB(), ellipse.get_Center())));
                                    }
                                    else
                                        $yield.push(this.EllipseToString(ellipse));
                                }
                            }
                        }
                    }
                }
            }
            return $yield;
        },
        SegmentString: function (segment){
            var ls = As(segment, Microsoft.Msagl.Core.Geometry.Curves.LineSegment.ctor);
            if (ls != null)
                return this.LineSegmentString(ls);
            var cubic = As(segment, Microsoft.Msagl.Core.Geometry.Curves.CubicBezierSegment.ctor);
            if (cubic != null)
                return this.CubicBezierSegmentToString(cubic);
            var ell = As(segment, Microsoft.Msagl.Core.Geometry.Curves.Ellipse.ctor);
            if (ell != null)
                return this.EllipseToString(ell);
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        EllipseToString: function (ellipse){
            var largeArc = System.Math.Abs$$Double(ellipse.get_ParEnd() - ellipse.get_ParStart()) >= 3.14159265358979 ? "1" : "0";
            var sweepFlag = ellipse.OrientedCounterclockwise() ? "1" : "0";
            return System.String.Join$$String$$String$Array(" ", "A", this.EllipseRadiuses(ellipse), this.DoubleToString(Microsoft.Msagl.Core.Geometry.Point.Angle$$Point$$Point(new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(1, 0), ellipse.get_AxisA()) / (0.0174532925199433)), largeArc, sweepFlag, this.PointsToString(ellipse.get_End()));
        },
        EllipseRadiuses: function (ellipse){
            return this.DoubleToString(ellipse.get_AxisA().get_Length()) + "," + this.DoubleToString(ellipse.get_AxisB().get_Length());
        },
        CubicBezierSegmentToString: function (cubic){
            return "C" + this.PointsToString(cubic.B(1), cubic.B(2), cubic.B(3));
        },
        PointsToString: function (points){
            return System.String.Join$$String$$String$Array(" ", System.Linq.Enumerable.ToArray$1(System.String.ctor, System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(Microsoft.Msagl.Core.Geometry.Point.ctor, System.String.ctor, points, $CreateAnonymousDelegate(this, function (p){
                return this.PointToString(p);
            }))));
        },
        LineSegmentString: function (ls){
            return "L " + this.PointToString(ls.get_End());
        },
        Precision$$: "System.Int32",
        get_Precision: function (){
            return this.precision;
        },
        set_Precision: function (value){
            this.precision = System.Math.Max$$Int32$$Int32(1, value);
            var s = new Array(this.precision + 2);
            s[0] = "#";
            s[1] = ".";
            for (var i = 0; i < this.precision; i++)
                s[2 + i] = "#";
            this.formatForDoubleString = new System.String.ctor$$Char$Array(s);
        },
        AllowedToWriteUri$$: "System.Boolean",
        get_AllowedToWriteUri: function (){
            return this.allowedToWriteUri;
        },
        set_AllowedToWriteUri: function (value){
            this.allowedToWriteUri = value;
        },
        PointToString: function (start){
            return this.DoubleToString(start.get_X()) + " " + this.DoubleToString(start.get_Y());
        },
        DoubleToString: function (d){
            return (System.Math.Abs$$Double(d) < 1E-11) ? "0" : d.ToString$$String$$IFormatProvider(this.formatForDoubleString, System.Globalization.CultureInfo.get_InvariantCulture());
        },
        WriteDiamond: function (node){
            var nodeAttr = node.get_Attr();
            var w2 = node.get_GeometryNode().get_Width() / 2;
            var h2 = node.get_GeometryNode().get_Height() / 2;
            var cx = node.get_GeometryNode().get_Center().get_X();
            var cy = node.get_GeometryNode().get_Center().get_Y();
            var ps = [new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(cx - w2, cy), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(cx, cy + h2), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(cx + w2, cy), new Microsoft.Msagl.Core.Geometry.Point.ctor$$Double$$Double(cx, cy - h2)];
            this.DrawPolygon(node.get_Attr(), ps);
        },
        WriteBox: function (node){
            this.WriteStartElement("rect");
            this.WriteFill(node.get_Attr());
            this.WriteStroke(node.get_Attr());
            var curve = node.get_GeometryNode().get_BoundaryCurve();
            this.WriteAttribute("x", node.get_BoundingBox().get_Left());
            this.WriteAttribute("y", node.get_BoundingBox().get_Bottom());
            this.WriteAttribute("width", curve.get_BoundingBox().get_Width());
            this.WriteAttribute("height", curve.get_BoundingBox().get_Height());
            this.WriteAttribute("rx", node.get_Attr().get_XRadius());
            this.WriteAttribute("ry", node.get_Attr().get_YRadius());
            this.WriteEndElement();
        },
        WriteEllipse: function (node){
            var geomNode = node.get_GeometryNode();
            var center = geomNode.get_Center();
            var rx = geomNode.get_Width() / 2;
            var ry = geomNode.get_Height() / 2;
            this.WriteEllipseOnPosition(node.get_Attr(), center, rx, ry);
        },
        WriteDoubleCircle: function (node){
            var geomNode = node.get_GeometryNode();
            var center = geomNode.get_Center();
            var rx = geomNode.get_Width() / 2;
            var ry = geomNode.get_Height() / 2;
            this.WriteEllipseOnPosition(node.get_Attr(), center, rx * 0.9, ry * 0.9);
            this.WriteEllipseOnPosition(node.get_Attr(), center, rx, ry);
        },
        WriteEllipseOnPosition: function (nodeAttr, center, rx, ry){
            this.WriteStartElement("ellipse");
            this.WriteFill(nodeAttr);
            this.WriteStroke(nodeAttr);
            this.WriteFullEllipseGeometry(center, rx, ry);
            this.WriteEndElement();
        },
        WriteFill: function (attr){
            var color = attr.get_FillColor();
            if (color.get_A() == 0 && !System.Linq.Enumerable.Contains$1$$IEnumerable$1$$TSource(Microsoft.Msagl.Drawing.Style.ctor, attr.get_Styles(), Microsoft.Msagl.Drawing.Style.Filled)){
                this.WriteAttribute("fill", "none");
            }
            else {
                this.WriteAttribute("fill", this.MsaglColorToSvgColor(color));
                this.WriteAttribute("fill-opacity", Microsoft.Msagl.Drawing.SvgGraphWriter.MsaglColorToSvgOpacity(color));
            }
        },
        WriteFullEllipseGeometry: function (cx, rx, ry){
            this.WriteAttribute("cx", cx.get_X());
            this.WriteAttribute("cy", cx.get_Y());
            this.WriteAttribute("rx", rx);
            this.WriteAttribute("ry", ry);
        },
        WriteEndElement: function (){
            this.xmlWriter.WriteEndElement();
        },
        WriteStartElement: function (s){
            this.xmlWriter.WriteStartElement$$String(s);
        },
        InitColorSet: function (){
            this.colorSet.Insert("AliceBlue".toLowerCase());
            this.colorSet.Insert("AntiqueWhite".toLowerCase());
            this.colorSet.Insert("Aqua".toLowerCase());
            this.colorSet.Insert("Aquamarine".toLowerCase());
            this.colorSet.Insert("Azure".toLowerCase());
            this.colorSet.Insert("Beige".toLowerCase());
            this.colorSet.Insert("Bisque".toLowerCase());
            this.colorSet.Insert("Black".toLowerCase());
            this.colorSet.Insert("BlanchedAlmond".toLowerCase());
            this.colorSet.Insert("Blue".toLowerCase());
            this.colorSet.Insert("BlueViolet".toLowerCase());
            this.colorSet.Insert("Brown".toLowerCase());
            this.colorSet.Insert("BurlyWood".toLowerCase());
            this.colorSet.Insert("CadetBlue".toLowerCase());
            this.colorSet.Insert("Chartreuse".toLowerCase());
            this.colorSet.Insert("Chocolate".toLowerCase());
            this.colorSet.Insert("Coral".toLowerCase());
            this.colorSet.Insert("CornflowerBlue".toLowerCase());
            this.colorSet.Insert("Cornsilk".toLowerCase());
            this.colorSet.Insert("Crimson".toLowerCase());
            this.colorSet.Insert("Cyan".toLowerCase());
            this.colorSet.Insert("DarkBlue".toLowerCase());
            this.colorSet.Insert("DarkCyan".toLowerCase());
            this.colorSet.Insert("DarkGoldenrod".toLowerCase());
            this.colorSet.Insert("DarkGray".toLowerCase());
            this.colorSet.Insert("DarkGreen".toLowerCase());
            this.colorSet.Insert("DarkKhaki".toLowerCase());
            this.colorSet.Insert("DarkMagenta".toLowerCase());
            this.colorSet.Insert("DarkOliveGreen".toLowerCase());
            this.colorSet.Insert("DarkOrange".toLowerCase());
            this.colorSet.Insert("DarkOrchid".toLowerCase());
            this.colorSet.Insert("DarkRed".toLowerCase());
            this.colorSet.Insert("DarkSalmon".toLowerCase());
            this.colorSet.Insert("DarkSeaGreen".toLowerCase());
            this.colorSet.Insert("DarkSlateBlue".toLowerCase());
            this.colorSet.Insert("DarkSlateGray".toLowerCase());
            this.colorSet.Insert("DarkTurquoise".toLowerCase());
            this.colorSet.Insert("DarkViolet".toLowerCase());
            this.colorSet.Insert("DeepPink".toLowerCase());
            this.colorSet.Insert("DeepSkyBlue".toLowerCase());
            this.colorSet.Insert("DimGray".toLowerCase());
            this.colorSet.Insert("DodgerBlue".toLowerCase());
            this.colorSet.Insert("Firebrick".toLowerCase());
            this.colorSet.Insert("FloralWhite".toLowerCase());
            this.colorSet.Insert("ForestGreen".toLowerCase());
            this.colorSet.Insert("Fuchsia".toLowerCase());
            this.colorSet.Insert("Gainsboro".toLowerCase());
            this.colorSet.Insert("GhostWhite".toLowerCase());
            this.colorSet.Insert("Gold".toLowerCase());
            this.colorSet.Insert("Goldenrod".toLowerCase());
            this.colorSet.Insert("Gray".toLowerCase());
            this.colorSet.Insert("Green".toLowerCase());
            this.colorSet.Insert("GreenYellow".toLowerCase());
            this.colorSet.Insert("Honeydew".toLowerCase());
            this.colorSet.Insert("HotPink".toLowerCase());
            this.colorSet.Insert("IndianRed".toLowerCase());
            this.colorSet.Insert("Indigo".toLowerCase());
            this.colorSet.Insert("Ivory".toLowerCase());
            this.colorSet.Insert("Khaki".toLowerCase());
            this.colorSet.Insert("Lavender".toLowerCase());
            this.colorSet.Insert("LavenderBlush".toLowerCase());
            this.colorSet.Insert("LawnGreen".toLowerCase());
            this.colorSet.Insert("LemonChiffon".toLowerCase());
            this.colorSet.Insert("LightBlue".toLowerCase());
            this.colorSet.Insert("LightCoral".toLowerCase());
            this.colorSet.Insert("LightCyan".toLowerCase());
            this.colorSet.Insert("LightGoldenrodYellow".toLowerCase());
            this.colorSet.Insert("LightGray".toLowerCase());
            this.colorSet.Insert("LightGreen".toLowerCase());
            this.colorSet.Insert("LightPink".toLowerCase());
            this.colorSet.Insert("LightSalmon".toLowerCase());
            this.colorSet.Insert("LightSeaGreen".toLowerCase());
            this.colorSet.Insert("LightSkyBlue".toLowerCase());
            this.colorSet.Insert("LightSlateGray".toLowerCase());
            this.colorSet.Insert("LightSteelBlue".toLowerCase());
            this.colorSet.Insert("LightYellow".toLowerCase());
            this.colorSet.Insert("Lime".toLowerCase());
            this.colorSet.Insert("LimeGreen".toLowerCase());
            this.colorSet.Insert("Linen".toLowerCase());
            this.colorSet.Insert("Magenta".toLowerCase());
            this.colorSet.Insert("Maroon".toLowerCase());
            this.colorSet.Insert("MediumAquamarine".toLowerCase());
            this.colorSet.Insert("MediumBlue".toLowerCase());
            this.colorSet.Insert("MediumOrchid".toLowerCase());
            this.colorSet.Insert("MediumPurple".toLowerCase());
            this.colorSet.Insert("MediumSeaGreen".toLowerCase());
            this.colorSet.Insert("MediumSlateBlue".toLowerCase());
            this.colorSet.Insert("MediumSpringGreen".toLowerCase());
            this.colorSet.Insert("MediumTurquoise".toLowerCase());
            this.colorSet.Insert("MediumVioletRed".toLowerCase());
            this.colorSet.Insert("MidnightBlue".toLowerCase());
            this.colorSet.Insert("MintCream".toLowerCase());
            this.colorSet.Insert("MistyRose".toLowerCase());
            this.colorSet.Insert("Moccasin".toLowerCase());
            this.colorSet.Insert("NavajoWhite".toLowerCase());
            this.colorSet.Insert("Navy".toLowerCase());
            this.colorSet.Insert("OldLace".toLowerCase());
            this.colorSet.Insert("Olive".toLowerCase());
            this.colorSet.Insert("OliveDrab".toLowerCase());
            this.colorSet.Insert("Orange".toLowerCase());
            this.colorSet.Insert("OrangeRed".toLowerCase());
            this.colorSet.Insert("Orchid".toLowerCase());
            this.colorSet.Insert("PaleGoldenrod".toLowerCase());
            this.colorSet.Insert("PaleGreen".toLowerCase());
            this.colorSet.Insert("PaleTurquoise".toLowerCase());
            this.colorSet.Insert("PaleVioletRed".toLowerCase());
            this.colorSet.Insert("PapayaWhip".toLowerCase());
            this.colorSet.Insert("PeachPuff".toLowerCase());
            this.colorSet.Insert("Peru".toLowerCase());
            this.colorSet.Insert("Pink".toLowerCase());
            this.colorSet.Insert("Plum".toLowerCase());
            this.colorSet.Insert("PowderBlue".toLowerCase());
            this.colorSet.Insert("Purple".toLowerCase());
            this.colorSet.Insert("Red".toLowerCase());
            this.colorSet.Insert("RosyBrown".toLowerCase());
            this.colorSet.Insert("RoyalBlue".toLowerCase());
            this.colorSet.Insert("SaddleBrown".toLowerCase());
            this.colorSet.Insert("Salmon".toLowerCase());
            this.colorSet.Insert("SandyBrown".toLowerCase());
            this.colorSet.Insert("SeaGreen".toLowerCase());
            this.colorSet.Insert("SeaShell".toLowerCase());
            this.colorSet.Insert("Sienna".toLowerCase());
            this.colorSet.Insert("Silver".toLowerCase());
            this.colorSet.Insert("SkyBlue".toLowerCase());
            this.colorSet.Insert("SlateBlue".toLowerCase());
            this.colorSet.Insert("SlateGray".toLowerCase());
            this.colorSet.Insert("Snow".toLowerCase());
            this.colorSet.Insert("SpringGreen".toLowerCase());
            this.colorSet.Insert("SteelBlue".toLowerCase());
            this.colorSet.Insert("Tan".toLowerCase());
            this.colorSet.Insert("Teal".toLowerCase());
            this.colorSet.Insert("Thistle".toLowerCase());
            this.colorSet.Insert("Tomato".toLowerCase());
            this.colorSet.Insert("Transparent".toLowerCase());
            this.colorSet.Insert("Turquoise".toLowerCase());
            this.colorSet.Insert("Violet".toLowerCase());
            this.colorSet.Insert("Wheat".toLowerCase());
            this.colorSet.Insert("White".toLowerCase());
            this.colorSet.Insert("WhiteSmoke".toLowerCase());
            this.colorSet.Insert("Yellow".toLowerCase());
            this.colorSet.Insert("YellowGreen".toLowerCase());
        },
        WriteOpening: function (){
            var currentCulture = System.Threading.Thread.get_CurrentThread().get_CurrentCulture();
            System.Threading.Thread.get_CurrentThread().set_CurrentCulture(System.Globalization.CultureInfo.get_InvariantCulture());
            this.Open();
        },
        TransformGraphByFlippingY: function (){
            var matrix = new Microsoft.Msagl.Core.Geometry.Curves.PlaneTransformation.ctor$$Double$$Double$$Double$$Double$$Double$$Double(1, 0, 0, 0, -1, 0);
            this._graph.get_GeometryGraph().Transform(matrix);
        },
        WriteLine: function (a, b){
            this.WriteStartElement("line");
            this.WriteAttribute("x1", a.get_X());
            this.WriteAttribute("y1", a.get_Y());
            this.WriteAttribute("x2", b.get_X());
            this.WriteAttribute("y2", b.get_Y());
            this.WriteAttribute("style", "stroke:rgb(0,0,0);stroke-width:1");
            this.WriteEndElement();
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$SvgGraphWriter);
var Microsoft$Msagl$Drawing$Tokens = {
    fullname: "Microsoft.Msagl.Drawing.Tokens",
    staticDefinition: {
        MsaglGraph: 0,
        Text: 1,
        Edges: 2,
        Edge: 3,
        Nodes: 4,
        Node: 5,
        SourceNodeID: 6,
        TargetNodeID: 7,
        ID: 8,
        LayerSeparation: 9,
        NodeAttribute: 10,
        NodeSeparation: 11,
        AspectRatio: 12,
        OptimizeLabelPositions: 13,
        Padding: 14,
        TransparencyOfSelectedEntityColor: 15,
        SelectedEntityColor: 16,
        Color: 17,
        A: 18,
        R: 19,
        G: 20,
        B: 21,
        SelectedNodeBoundaryColor: 22,
        MinNodeWidth: 23,
        MinNodeHeight: 24,
        Border: 25,
        Fillcolor: 26,
        FontColor: 27,
        FontStyle: 28,
        FontName: 29,
        FontSize: 30,
        Label: 31,
        LabelMargin: 32,
        LineWidth: 33,
        Shape: 34,
        XRad: 35,
        YRad: 36,
        Styles: 37,
        Style: 38,
        BaseAttr: 39,
        LabelSize: 40,
        Width: 41,
        Height: 42,
        EdgeAttribute: 43,
        EdgeSeparation: 44,
        Weight: 45,
        ArrowStyle: 46,
        ArrowheadLength: 47,
        GraphAttribute: 48,
        BackgroundColor: 49,
        Margin: 50,
        MinNodeSeparation: 51,
        MinLayerSeparation: 52,
        LayerDirection: 53,
        GeometryGraphIsPresent: 54,
        UserData: 55,
        UserDataType: 56,
        SerializedUserData: 57,
        Subgraphs: 58,
        Subgraph: 59,
        listOfSubgraphs: 60,
        listOfNodes: 61,
        graph: 62,
        End: 63
    },
    Kind: "Enum"
};
JsTypes.push(Microsoft$Msagl$Drawing$Tokens);
var Microsoft$Msagl$Drawing$VerticalConstraintsForLayeredLayout = {
    fullname: "Microsoft.Msagl.Drawing.VerticalConstraintsForLayeredLayout",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._maxLayerOfDrawingGraph = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Drawing.Node.ctor);
            this._minLayerOfDrawingGraph = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(Microsoft.Msagl.Drawing.Node.ctor);
            this.SameLayerConstraints = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(System.Tuple$2.ctor);
            this.UpDownConstraints = new Microsoft.Msagl.Core.DataStructures.Set$1.ctor(System.Tuple$2.ctor);
            System.Object.ctor.call(this);
        },
        PinNodeToMaxLayer: function (node){
            this._maxLayerOfDrawingGraph.Insert(node);
        },
        PinNodeToMinLayer: function (node){
            System.Diagnostics.Debug.Assert$$Boolean(node != null);
            this._minLayerOfDrawingGraph.Insert(node);
        },
        Clear: function (){
            this._maxLayerOfDrawingGraph.Clear();
            this._minLayerOfDrawingGraph.Clear();
            this.SameLayerConstraints.Clear();
            this.UpDownConstraints.Clear();
        }
    }
};
JsTypes.push(Microsoft$Msagl$Drawing$VerticalConstraintsForLayeredLayout);
var System$ExtensionsForSharpKit = {
    fullname: "System.ExtensionsForSharpKit",
    baseTypeName: "System.Object",
    staticDefinition: {
        Trim_SharpKit: function (me, chars){
            var start = 0,end = me.length - 1;
            for (; start < me.length; start++){
                var found = false;
                for (var i = 0; i < chars.length && !found; i++)
                    if (me.charAt(start) == chars[i])
                        found = true;
                if (!found)
                    break;
            }
            for (; end >= 0; end--){
                var found = false;
                for (var i = 0; i < chars.length && !found; i++)
                    if (me.charAt(end) == chars[i])
                        found = true;
                if (!found)
                    break;
            }
            return me.substr(start, end - start + 1);
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$ExtensionsForSharpKit);
var SharpKitExtensions$Regex_SharpKit = {
    fullname: "SharpKitExtensions.Regex_SharpKit",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (pattern){
            this.m_JSRegex = null;
            System.Object.ctor.call(this);
            this.m_JSRegex = new RegExp(pattern);
        },
        Match: function (input, start){
            input = input.substr(start);
            var result = this.m_JSRegex.exec(input);
            var ret = new SharpKitExtensions.Match_SharpKit.ctor(result);
            return ret;
        }
    }
};
JsTypes.push(SharpKitExtensions$Regex_SharpKit);
var SharpKitExtensions$Match_SharpKit = {
    fullname: "SharpKitExtensions.Match_SharpKit",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (res){
            this.m_JSResult = null;
            System.Object.ctor.call(this);
            this.m_JSResult = res;
        },
        Success$$: "System.Boolean",
        get_Success: function (){
            return this.m_JSResult != null;
        },
        Value$$: "System.String",
        get_Value: function (){
            return this.m_JSResult[0];
        },
        Length$$: "System.Int32",
        get_Length: function (){
            return this.m_JSResult[0].length;
        }
    }
};
JsTypes.push(SharpKitExtensions$Match_SharpKit);
var SharpKitExtensions$StringWriter_SharpKit = {
    fullname: "SharpKitExtensions.StringWriter_SharpKit",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.m_SB = null;
            System.Object.ctor.call(this);
            this.m_SB = new System.Text.StringBuilder.ctor();
        },
        WriteLine: function (str){
            this.m_SB.Append$$String(str);
            this.m_SB.Append$$String("\n");
        },
        Flush: function (){
        },
        Close: function (){
        },
        Write: function (str){
            this.m_SB.Append$$String(str);
        },
        toString: function (){
            return this.m_SB.toString();
        }
    }
};
JsTypes.push(SharpKitExtensions$StringWriter_SharpKit);
var Test$Test = {
    fullname: "Test.Test",
    baseTypeName: "System.Object",
    staticDefinition: {
        RunTest: function (){
            System.Console.Write$$Object(Test.Test.TestInner.TestInnerEnum.A);
        }
    },
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(Test$Test);
var Test$Test$TestEnum = {
    fullname: "Test.Test.TestEnum",
    staticDefinition: {
        C: 0,
        D: 1
    },
    Kind: "Enum"
};
JsTypes.push(Test$Test$TestEnum);
var Test$Test$TestInner = {
    fullname: "Test.Test.TestInner",
    baseTypeName: "System.Object",
    assemblyName: "Microsoft.Msagl.Drawing",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(Test$Test$TestInner);
var Test$Test$TestInner$TestInnerEnum = {
    fullname: "Test.Test.TestInner.TestInnerEnum",
    staticDefinition: {
        A: 0,
        B: 1
    },
    Kind: "Enum"
};
JsTypes.push(Test$Test$TestInner$TestInnerEnum);

