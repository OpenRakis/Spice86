digraph xyz {
orientation=landscape;
ratio=compress;
size="16,16";
AbstractMemory -> Memory;
AliasedMemory -> AliasedMemory;
AliasedMemory -> Memory;
Architecture -> ROOT;
Assembly -> ROOT;
AtomProperties -> NRAtom;
AtomWr -> Wr;
Break -> Break;
Break -> Target;
Breakpoint -> Breakpoint;
Breakpoint -> Event;
Breakpoint -> ROOT;
CDB -> Target;
CDB -> Thread;
CommonFrame -> Target;
ControlOps -> InterpF;
Displayed -> Displayed;
Displayed -> InterpTypes;
ETimer -> RTHeapRep;
Event -> Event;
Event -> ROOT;
Event -> Target;
EventHandler -> ROOT;
EventHandler -> StandardEvents;
Expression -> ROOT;
ExpressionServer -> Expression;
FollowBreakpoint -> Breakpoint;
Formatter -> ROOT;
Formatter -> Thread;
Frame -> Frame;
Frame -> Memory;
Frame -> Target;
FrameClass -> Frame;
IntIntTbl -> IntIntTbl;
IntIntTbl -> ROOT;
Interp -> InterpF;
Interp -> ROOT;
InterpF -> Interp;
InterpF -> InterpF;
InterpF -> ROOT;
InterpScan -> TokenStream;
InterpTypes -> InterpTypes;
InterpTypes -> ROOT;
List -> Thread;
LoadState -> LoadState;
LoadState -> LoadStateRep;
LoadState -> ROOT;
LoadStateRep -> LoadState;
LocationRep -> Memory;
MC68Frame -> CommonFrame;
MC68GCommonFrame -> EventHandler;
MUTEX  -> ROOT;
Memory -> Displayed;
Memory -> InterpTypes;
MipsFrame -> CommonFrame;
MipsFrame -> InterpTypes;
MipsGCommonFrame -> EventHandler;
NRAtom -> AtomProperties;
NRAtom -> ROOT;
NopBreakpoint -> Breakpoint;
PSFormatter -> InterpTypes;
PSInterp -> InterpTypes;
PSLoadState -> InterpTypes;
PSMemory -> InterpTypes;
ProtectedWire -> ProtectedWire;
ProtectedWire -> Wire;
RTHeap -> RTHeapRep;
RTHeapRep -> ROOT;
Rd -> RdClass;
RdClass -> MUTEX;
RegisterMemory -> Memory;
Scope -> ROOT;
Scope -> Scope;
Scope -> Target;
SourceLoc -> Target;
SourceMap -> ROOT;
SparcFrame -> CommonFrame;
SparcGCommonFrame -> EventHandler;
StandardEvents -> StandardEvents;
StandardEvents -> Target;
StreamWire -> Wire;
Symbol -> Displayed;
Symbol -> Symbol;
TThread -> ROOT;
TThread -> Target;
Target -> Displayed;
Target -> Event;
Target -> FrameClass;
Target -> ROOT;
Target -> TThread;
Target -> Target;
Target -> TargetF;
Target -> Thread;
TargetF -> Target;
TargetState -> Assembly;
TextRd -> Rd;
TextWr -> Wr;
Thread -> ROOT;
Thread -> Thread;
TokenStream -> ROOT;
TokenStream -> TokenStream;
Trap -> ROOT;
TrapMemory -> Memory;
UFileRd -> Rd;
UFileRd -> UFileRd;
UFileWr -> UFileWr;
UFileWr -> Wr;
UnixHandler -> Event;
UnixHandler -> UnixHandler;
UserBreak -> Break;
UserBreak -> Breakpoint;
UserBreak -> Event;
UserBreak -> Trap;
UserBreak -> UserBreak;
VaxFrame -> CommonFrame;
VaxGCommonFrame -> EventHandler;
Wire -> ROOT;
Wire -> TrapMemory;
Wire -> Wire;
Wr -> WrClass;
WrClass -> MUTEX;
}
