@moxy
@attribute required int Size
@attribute required string RmSignedType
@attribute required string RmUnsignedType
@attribute required string ImmSignedType
@attribute required string ResSignedType
@moxy

namespace {{ moxy.Class.Namespace }};

using Spice86.Core.Emulator.CPU.CfgCpu.Ast.Builder;
using Spice86.Core.Emulator.CPU.CfgCpu.Ast.Instruction;
using Spice86.Core.Emulator.CPU.CfgCpu.InstructionExecutor;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.CommonGrammar;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.ModRm;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Prefix;
using Spice86.Shared.Emulator.Memory;

public partial class {{ moxy.Class.Name }} : InstructionWithModRmAndValueField<{{ImmSignedType}}> {
    public {{ moxy.Class.Name }}(SegmentedAddress address, InstructionField<ushort> opcodeField, List<InstructionPrefix> prefixes,
        ModRmContext modRmContext, InstructionField<{{ImmSignedType}}> valueField) : base(address, opcodeField, prefixes,
        modRmContext, valueField, 1) {
    }
    
    public override void Execute(InstructionExecutionHelper helper) {
        helper.ModRm.RefreshWithNewModRmContext(ModRmContext);
        {{RmSignedType}} value = ({{RmSignedType}})helper.InstructionFieldValueRetriever.GetFieldValue(ValueField);
        {{ResSignedType}} result = helper.Alu{{Size}}.Imul(value, ({{RmSignedType}})helper.ModRm.RM{{Size}});
        helper.ModRm.R{{Size}} = ({{RmUnsignedType}})result;
        helper.MoveIpAndSetNextNode(this);
    }

    public override InstructionNode ToInstructionAst(AstBuilder builder) {
        return new InstructionNode(InstructionOperation.IMUL,
             builder.ModRm.RToNode(builder.UType({{Size}}), ModRmContext),
             builder.ModRm.RmToNode(builder.UType({{Size}}), ModRmContext),
             builder.InstructionField.ToNode(ValueField));
    }
}