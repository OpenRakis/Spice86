@moxy
@attribute required string Operation
@attribute required string Accumulator
@attribute required int Size
@attribute required string Type
@attribute required bool Assign=true
@attribute required string Mnemonic=null
@moxy

namespace {{ moxy.Class.Namespace }};

using Spice86.Core.Emulator.CPU.CfgCpu.Ast.Builder;
using Spice86.Core.Emulator.CPU.CfgCpu.Ast.Instruction;
using Spice86.Core.Emulator.CPU.CfgCpu.InstructionExecutor;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.CommonGrammar;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Prefix;
using Spice86.Shared.Emulator.Memory;

public partial class {{ moxy.Class.Name }} : InstructionWithValueField<{{Type}}> {
    public {{ moxy.Class.Name }}(SegmentedAddress address,
        InstructionField<ushort> opcodeField,
        List<InstructionPrefix> prefixes,
        InstructionField<{{Type}}> valueField) : base(address, opcodeField, prefixes, valueField, 1) {
    }
    
    public override void Execute(InstructionExecutionHelper helper) {
        {{if Assign}}helper.State.{{Accumulator}} = {{end}}helper.Alu{{Size}}.{{Operation}}(helper.State.{{Accumulator}}, helper.InstructionFieldValueRetriever.GetFieldValue(ValueField));
        helper.MoveIpAndSetNextNode(this);
    }

    public override InstructionNode ToInstructionAst(AstBuilder builder) {
        return new InstructionNode(InstructionOperation.{{if Mnemonic}}{{Mnemonic | string.upcase}}{{else}}{{Operation | string.upcase}}{{end}},
            builder.Register.Accumulator(builder.UType({{Size}})),
            builder.InstructionField.ToNode(ValueField));
    }
}