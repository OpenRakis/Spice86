@moxy
@attribute required int Size
@attribute required bool IsSegment
@moxy

namespace {{ moxy.Class.Namespace }};

using Spice86.Core.Emulator.CPU.CfgCpu.Ast.Builder;
using Spice86.Core.Emulator.CPU.CfgCpu.Ast.Instruction;
using Spice86.Core.Emulator.CPU.CfgCpu.InstructionExecutor;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Prefix;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.CommonGrammar;
using Spice86.Core.Emulator.CPU.Registers;
using Spice86.Shared.Emulator.Memory;

public partial class {{ moxy.Class.Name }} : InstructionWithRegisterIndex {
    public {{ moxy.Class.Name }}(SegmentedAddress address, InstructionField<ushort> opcodeField, List<InstructionPrefix> prefixes,
        int registerIndex) : base(address, opcodeField, prefixes, registerIndex, 1) {
        {{ if IsSegment }}
        if(registerIndex == (int)SegmentRegisterIndex.CsIndex) {
            throw new ArgumentException("Register CS is not allowed");
        }
        {{ end }}
    }

    public override void Execute(InstructionExecutionHelper helper) {
        helper.{{ if IsSegment }}SegmentRegisters{{ else }}UInt{{Size}}Registers{{ end }}[RegisterIndex] = helper.Stack.Pop{{Size}}();
        helper.MoveIpAndSetNextNode(this);
    }

    public override InstructionNode ToInstructionAst(AstBuilder builder) {
        return new InstructionNode(InstructionOperation.POP,
        builder.Register.{{ if IsSegment }}SReg({{else}}Reg(builder.UType({{Size}}), {{end}}RegisterIndex));
    }
}