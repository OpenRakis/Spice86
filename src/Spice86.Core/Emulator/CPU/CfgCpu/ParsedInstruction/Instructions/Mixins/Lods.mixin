@moxy
@attribute required int Size
@attribute required string Accumulator
@moxy

namespace {{ moxy.Class.Namespace }};

using Spice86.Core.Emulator.CPU.CfgCpu.Ast.Builder;
using Spice86.Core.Emulator.CPU.CfgCpu.Ast.Instruction;
using Spice86.Core.Emulator.CPU.CfgCpu.InstructionExecutor;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.CommonGrammar;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions.Interfaces;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Prefix;
using Spice86.Core.Emulator.CPU.Registers;
using Spice86.Shared.Emulator.Memory;

public partial class {{ moxy.Class.Name }} : InstructionWithSegmentRegisterIndex, StringInstruction {
    public {{ moxy.Class.Name }}(SegmentedAddress address,
        InstructionField<ushort> opcodeField, List<InstructionPrefix> prefixes, int segmentRegisterIndex) : base(address, opcodeField, prefixes, segmentRegisterIndex, 1) {
    }

    public bool ChangesFlags => false;

    public void ExecuteStringOperation(InstructionExecutionHelper helper) {
        helper.State.{{Accumulator}} = helper.Memory.UInt{{Size}}[helper.GetMemoryAddressOverridableDsSi(this)];
        helper.AdvanceSI(helper.State.Direction{{Size}});
    }

    public override void Execute(InstructionExecutionHelper helper) {
        helper.ExecuteStringOperation(this);
        helper.MoveIpAndSetNextNode(this);
    }

    public override InstructionNode ToInstructionAst(AstBuilder builder) {
        return new InstructionNode(builder.Rep(this), InstructionOperation.LODS, 
            builder.Register.Accumulator(builder.UType({{Size}})),
            builder.Pointer.ToSegmentedPointer(
                builder.UType({{Size}}), 
                SegmentRegisterIndex,
                builder.Register.Reg(builder.AddressType(this), RegisterIndex.SiIndex)
            )
        );
    }
}