@moxy
@attribute required string Operation
@attribute required bool Has8
@attribute required bool IsOnlyField8
@attribute required bool IsUnsignedField
@attribute required bool IsFinalValue
@attribute required bool bitWidthFromOperandSize
@moxy

namespace {{ moxy.Class.Namespace }};

using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Instructions;
using Spice86.Core.Emulator.CPU.CfgCpu.ParsedInstruction.Prefix;
using Spice86.Shared.Emulator.Memory;

public partial class {{ moxy.Class.Name }} : BaseInstructionParser {
    public {{ moxy.Class.Name }}(BaseInstructionParser other) : base(other) {
    }
    public CfgInstruction Parse(ParsingContext context) {
        BitWidth bitWidth = {{if bitWidthFromOperandSize}}GetBitWidth({{ if !Has8 }}false{{ else }}context.OpcodeField{{ end }}, context.HasOperandSize32){{else}}context.AddressWidthFromPrefixes{{end}};
        return Parse(context, bitWidth);
    }

    protected CfgInstruction Parse(ParsingContext context, BitWidth bitWidth) {
        return bitWidth switch {
            {{ if Has8 }}BitWidth.BYTE_8 => new {{Operation}}8(context.Address, context.OpcodeField, context.Prefixes, _instructionReader.{{if IsUnsignedField}}U{{end}}Int8.NextField({{IsFinalValue}})),{{ end }}
            BitWidth.WORD_16 => new {{Operation}}16(context.Address, context.OpcodeField, context.Prefixes, _instructionReader.{{if IsUnsignedField}}U{{end}}Int{{if IsOnlyField8}}8{{else}}16{{end}}.NextField({{IsFinalValue}})),
            BitWidth.DWORD_32 => new {{Operation}}32(context.Address, context.OpcodeField, context.Prefixes, _instructionReader.{{if IsUnsignedField}}U{{end}}Int{{if IsOnlyField8}}8{{else}}32{{end}}.NextField({{IsFinalValue}})),
            _ => throw CreateUnsupportedBitWidthException(bitWidth)
        };
    }
}