<UserControl xmlns="https://github.com/avaloniaui"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 xmlns:progRing="clr-namespace:AvaloniaProgressRing;assembly=AvaloniaProgressRing"
			 xmlns:models="clr-namespace:Spice86.Models.Debugging"
			 xmlns:viewModels="clr-namespace:Spice86.ViewModels"
			 xmlns:userControls="clr-namespace:Spice86.UserControls"
			 xmlns:dialogHost="clr-namespace:DialogHostAvalonia;assembly=DialogHost.Avalonia"
			 xmlns:converters="clr-namespace:Spice86.Converters"
			 xmlns:controls="clr-namespace:Spice86.Controls;assembly=Spice86"
			 mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
			 x:Class="Spice86.Views.DisassemblyView"
			 x:DataType="viewModels:DisassemblyViewModel">
	<UserControl.Resources>
		<converters:BoolToBrushConverter x:Key="BoolToBrushConverter" />
		<converters:InstructionToStringConverter x:Key="InstructionToStringConverter" />
		<converters:BoolToFontWeightConverter x:Key="BoolToFontWeightConverter" />
		<converters:BreakpointToBrushConverter x:Key="BreakpointToBrushConverter" />
		<converters:AddressStringToLinearMemoryAddresssConverter x:Key="AddressStringToLinearMemoryAddresssConverter"
			State="{Binding State}" />
	</UserControl.Resources>
	<Grid RowDefinitions="Auto,*">
		<Grid ColumnDefinitions="Auto,Auto,Auto,Auto,*,Auto" Grid.Row="0"
			ScrollViewer.HorizontalScrollBarVisibility="Disabled"
			IsVisible="{Binding IsPaused}"
			HorizontalAlignment="Left"
			VerticalAlignment="Top">
			<StackPanel Orientation="Vertical" Grid.Column="0">
				<Button
					Command="{Binding NewDisassemblyViewCommand}"
					Content="New Disassembly View"
					HotKey="Ctrl+T" ToolTip.Tip="Ctrl-T"
					IsEnabled="{Binding IsPaused}" />
				<Button
					HotKey="Ctrl+F4"
					ToolTip.Tip="Ctrl-F4"
					Command="{Binding CloseTabCommand}"
					Content="Close View"
					IsEnabled="{Binding CanCloseTab}"/>
			</StackPanel>
			<StackPanel Orientation="Vertical" Grid.Column="1">
				<Button Command="{Binding BeginCreateExecutionBreakpointCommand}" Content="Breakpoint..." />
				<Button Content="Step into" ToolTip.Tip="F11" HotKey="F11" Command="{Binding StepIntoCommand}" />
				<Button Content="Step over" ToolTip.Tip="F10" HotKey="F10" Command="{Binding StepOverCommand}" />
			</StackPanel>
			<StackPanel Orientation="Vertical" Grid.Column="2">
				<Label HorizontalAlignment="Center" Content="Number of instructions shown" Margin="5" />
				<NumericUpDown Width="100" Margin="5" Name="NumberOfInstructionsShownNumericUpDown" Value="{Binding NumberOfInstructionsShown}" />
			</StackPanel>
			<StackPanel Orientation="Vertical" Grid.Column="3">
				<Label HorizontalAlignment="Center" Content="Start Address" />
				<Grid ColumnDefinitions="*,*">
					<TextBox Name="StartAddressTextBox"
						Grid.Column="0"
						MinWidth="150"
						Text="{Binding StartAddress, Mode=TwoWay,
							Converter={StaticResource AddressStringToLinearMemoryAddresssConverter}}" />
				</Grid>
			</StackPanel>
			<StackPanel Orientation="Vertical" Grid.Column="4">
				<Button Content="Go to CS:IP" HotKey="Ctrl+F5" ToolTip.Tip="Ctrl-F5" Command="{Binding GoToCsIpCommand}" />
				<Label
					IsVisible="{Binding AreFunctionInformationProvided}">
					Go to function:
				</Label>
				<ComboBox
					Name="FunctionComboBox"
					IsVisible="{Binding AreFunctionInformationProvided}"
					ItemsSource="{Binding Functions}"
					SelectedItem="{Binding SelectedFunction, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
					<ComboBox.ItemTemplate>
						<DataTemplate x:DataType="models:FunctionInfo">
							<Grid RowDefinitions="Auto,Auto" ColumnDefinitions="200">
								<TextBlock Grid.Row="0" Grid.Column="0" TextWrapping="Wrap" Text="{Binding Name}" />
								<TextBlock Grid.Row="1" Grid.Column="0" TextWrapping="Wrap" Text="{Binding Address, StringFormat={}Address: 0x{0:X4}}" />
							</Grid>
						</DataTemplate>
					</ComboBox.ItemTemplate>
				</ComboBox>
			</StackPanel>
			<Button Grid.Column="5" Content="Refresh" HotKey="Ctrl+R" ToolTip.Tip="Ctrl-R" Command="{Binding UpdateDisassemblyCommand}" />
		</Grid>
		<progRing:ProgressRing
			IsVisible="{Binding IsLoading}"
			Width="100" Height="100"
			Grid.Row="0"
			IsActive="{Binding IsLoading}"
			HorizontalAlignment="Center"
			VerticalAlignment="Center"
			Foreground="Black" />
		<DataGrid
			x:Name="DisassemblyDataGrid"
			IsEnabled="{Binding !IsLoading}"
			Grid.Row="1"
			AutoGenerateColumns="False"
			CanUserReorderColumns="True"
			CanUserResizeColumns="True"
			CanUserSortColumns="False"
			IsReadOnly="True"
			ColumnWidth="Auto"
			SelectionMode="Extended"
			FontSize="12"
			FontFamily="{StaticResource ResourceKey=RobotoMonoFont}"
			SelectedItem="{Binding SelectedInstruction, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
			IsVisible="{Binding IsPaused}"
			ItemsSource="{Binding Instructions}">
			<DataGrid.Columns>
				<DataGridTemplateColumn Header="Address">
					<DataGridTemplateColumn.CellTheme>
						<ControlTheme TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
							<Setter Property="FontWeight"
								Value="{ReflectionBinding IsCsIp,
								Converter={StaticResource BoolToFontWeightConverter}}" />
							<Setter Property="Background"
								Value="{ReflectionBinding Breakpoint,
								Converter={StaticResource BreakpointToBrushConverter}}" />
						</ControlTheme>
					</DataGridTemplateColumn.CellTheme>
					<DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<WrapPanel Orientation="Horizontal">
								<TextBox IsReadOnly="True" Text="{ReflectionBinding Address, Mode=OneWay}" />
							</WrapPanel>
						</DataTemplate>
					</DataGridTemplateColumn.CellTemplate>
				</DataGridTemplateColumn>
				<DataGridTemplateColumn Header="CS:IP based address">
					<DataGridTemplateColumn.CellTheme>
						<ControlTheme TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
							<Setter Property="FontWeight"
								Value="{ReflectionBinding IsCsIp,
								Converter={StaticResource BoolToFontWeightConverter}}" />
							<Setter Property="Background"
								Value="{ReflectionBinding Breakpoint,
								Converter={StaticResource BreakpointToBrushConverter}}" />
						</ControlTheme>
					</DataGridTemplateColumn.CellTheme>
					<DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<WrapPanel Orientation="Horizontal">
								<TextBox IsReadOnly="True" Text="{ReflectionBinding SegmentedAddress, Mode=OneWay}" />
							</WrapPanel>
						</DataTemplate>
					</DataGridTemplateColumn.CellTemplate>
				</DataGridTemplateColumn>
				<DataGridTemplateColumn MaxWidth="300"
					Header="MASM">
					<DataGridTemplateColumn.CellTheme>
						<ControlTheme TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
							<Setter Property="FontWeight"
								Value="{ReflectionBinding IsCsIp,
								Converter={StaticResource BoolToFontWeightConverter}}" />
							<Setter Property="Background" Value="{ReflectionBinding ,
									Converter={StaticResource BoolToBrushConverter}}" />
						</ControlTheme>
					</DataGridTemplateColumn.CellTheme>
					<DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<TextBox Text="{Binding Mode=OneWay,
									 Converter={StaticResource InstructionToStringConverter}}"
									 IsReadOnly="True" />
						</DataTemplate>
					</DataGridTemplateColumn.CellTemplate>
				</DataGridTemplateColumn>
				<DataGridTextColumn Binding="{Binding Bytes}" Header="Bytes (Length)">
					<DataGridTextColumn.CellTheme>
						<ControlTheme TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
							<Setter Property="FontWeight"
								Value="{ReflectionBinding IsCsIp,
								Converter={StaticResource BoolToFontWeightConverter}}" />
						</ControlTheme>
					</DataGridTextColumn.CellTheme>
				</DataGridTextColumn>
				<DataGridTextColumn Binding="{Binding SegmentPrefix}" Header="Segment Prefix">
					<DataGridTextColumn.CellTheme>
						<ControlTheme TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
							<Setter Property="FontWeight"
								Value="{ReflectionBinding IsCsIp,
								Converter={StaticResource BoolToFontWeightConverter}}" />
						</ControlTheme>
					</DataGridTextColumn.CellTheme>
				</DataGridTextColumn>
				<DataGridCheckBoxColumn Binding="{Binding IsStackInstruction}" Header="Stack Instruction?" />
			</DataGrid.Columns>
			<DataGrid.ContextMenu>
				<ContextMenu>
					<MenuItem Header="Copy line (Ctrl-C)" Command="{Binding CopyLineCommand}" />
					<MenuItem Header="Create execution breakpoint here (F2)" Command="{Binding CreateExecutionBreakpointHereCommand}" />
					<MenuItem Header="Remove execution breakpoint here (Del)" Command="{Binding RemoveExecutionBreakpointHereCommand}" />
					<MenuItem Header="Disable breakpoint" Command="{Binding DisableBreakpointCommand}" />
					<MenuItem Header="Enable breakpoint" Command="{Binding EnableBreakpointCommand}" />
					<MenuItem Header="Move CS:IP here" Command="{Binding MoveCsIpHereCommand}" />
				</ContextMenu>
			</DataGrid.ContextMenu>
			<DataGrid.Styles>
				<Style Selector="DataGridColumnHeader">
					<Setter Property="Padding" Value="0" />
					<Setter Property="Margin" Value="0" />
				</Style>
			</DataGrid.Styles>
		</DataGrid>
		<Rectangle Fill="{Binding $parent[Window].Background}" Opacity="0.5" Grid.Row="0" Grid.RowSpan="2"
			IsVisible="{Binding CreatingExecutionBreakpoint}"/>
		<dialogHost:DialogHost IsVisible="{Binding !IsLoading}"
			Grid.Row="0" Grid.RowSpan="2"
			Background="{Binding $parent[Window].Background}"
			CloseOnClickAway="False"
			IsOpen="{Binding CreatingExecutionBreakpoint}">
			<dialogHost:DialogHost.DialogContent>
				<Grid RowDefinitions="Auto,*,Auto">
					<Label
						Grid.Row="0"
						HorizontalAlignment="Center"
						Content="Creating execution breakpoint"
						FontWeight="Bold" />
					<Grid
						Grid.Row="1"
						RowDefinitions="Auto,Auto,Auto">
						<Label
							Grid.Row="0"
							VerticalContentAlignment="Center"
							HorizontalContentAlignment="Left"
							Content="Memory hex, decimal, or Segmented Address to break on:" />
						<controls:GroupBox Grid.Row="1" Header="Segmented address">
							<TextBox
								Text="{Binding BreakpointAddress,
									Mode=TwoWay,
									Converter={StaticResource AddressStringToLinearMemoryAddresssConverter},
									}"
								Watermark="1000:FFFF (example) or like 'cs:ip'"
								Margin="5,0,0,0" />
						</controls:GroupBox>
					</Grid>
					<StackPanel
						Grid.Row="2"
						HorizontalAlignment="Right"
						Orientation="Horizontal">
						<Button
							Command="{Binding ConfirmCreateExecutionBreakpointCommand}"
							Content="OK"
							IsDefault="True" />
						<Button
							Command="{Binding CancelCreateExecutionBreakpointCommand}"
							Content="Cancel"
							IsCancel="True" />
					</StackPanel>
				</Grid>
			</dialogHost:DialogHost.DialogContent>
		</dialogHost:DialogHost>
		<userControls:ErrorModalDialogUserControl Grid.Row="0" Grid.RowSpan="2" />
	</Grid>
</UserControl>
